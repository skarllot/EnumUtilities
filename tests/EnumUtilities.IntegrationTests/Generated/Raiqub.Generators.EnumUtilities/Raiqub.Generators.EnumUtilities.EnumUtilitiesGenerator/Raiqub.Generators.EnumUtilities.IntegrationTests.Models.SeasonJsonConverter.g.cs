// <auto-generated />
#nullable enable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;

#pragma warning disable CS1591 // publicly visible type or member must be documented

namespace Raiqub.Generators.EnumUtilities.IntegrationTests.Models
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Raiqub.Generators.EnumUtilities", "1.6.0.0")]
    public sealed class SeasonJsonConverter : JsonConverter<Season>
    {
        private const int MaxBytesLength = 12;
        private const int MaxCharsLength = 2;

        public override Season Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            if (reader.TokenType == JsonTokenType.String)
                return (Season)ReadFromString(ref reader);
            if (reader.TokenType == JsonTokenType.Number)
                return (Season)ReadFromNumber(ref reader);

            throw new JsonException();
        }

        public override void Write(Utf8JsonWriter writer, Season value, JsonSerializerOptions options)
        {
            switch ((int)value)
            {
                case 1:
                    writer.WriteStringValue("🌱"u8);
                    break;
                case 2:
                    writer.WriteStringValue("☀️"u8);
                    break;
                case 3:
                    writer.WriteStringValue("🍂"u8);
                    break;
                case 4:
                    writer.WriteStringValue("⛄"u8);
                    break;
                default:
                    writer.WriteStringValue(value.ToString());
                    break;
            }
        }

        private int ReadFromString(ref Utf8JsonReader reader)
        {
    #if NET7_0_OR_GREATER
            int length = reader.HasValueSequence ? checked((int)reader.ValueSequence.Length) : reader.ValueSpan.Length;
            if (length > MaxBytesLength)
                throw new JsonException();

            Span<char> name = stackalloc char[MaxBytesLength];
            int charsWritten = reader.CopyString(name);
            name = name.Slice(0, charsWritten);
    #else
            string? name = reader.GetString();
    #endif

            return name switch
            {
                "🌱" => 1,
                "☀️" => 2,
                "🍂" => 3,
                "⛄" => 4,
                _ => Enum.TryParse(name, out Season result) ? (int)result : throw new JsonException()
            };
        }

        private int ReadFromNumber(ref Utf8JsonReader reader)
        {
            return reader.TryGetInt32(out int value)
                ? value
                : throw new JsonException();
        }
    }
}
