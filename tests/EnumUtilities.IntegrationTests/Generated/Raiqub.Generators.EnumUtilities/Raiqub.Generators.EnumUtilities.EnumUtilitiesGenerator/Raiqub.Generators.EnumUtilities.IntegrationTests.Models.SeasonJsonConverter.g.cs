// <auto-generated />
#nullable enable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;

#pragma warning disable CS1591 // publicly visible type or member must be documented

namespace Raiqub.Generators.EnumUtilities.IntegrationTests.Models
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Raiqub.Generators.EnumUtilities", "1.5.0.0")]
    internal sealed class SeasonJsonConverter : JsonConverter<Season>
    {
        private const int MaxValueLength = 6;

        public override Season Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
    #if NET7_0_OR_GREATER
            int length = reader.HasValueSequence ? checked((int)reader.ValueSequence.Length) : reader.ValueSpan.Length;
            if (length != MaxValueLength)
                return 0;

            Span<char> name = stackalloc char[MaxValueLength];
            reader.CopyString(name);
    #else
            string? name = reader.GetString();
    #endif

            return name switch
            {
                nameof(Season.Spring) => Season.Spring,
                nameof(Season.Summer) => Season.Summer,
                nameof(Season.Autumn) => Season.Autumn,
                "⛄" => Season.Winter,
                _ => 0
            };
        }

        public override void Write(Utf8JsonWriter writer, Season value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case Season.Spring:
                    writer.WriteStringValue("Spring"u8);
                    break;
                case Season.Summer:
                    writer.WriteStringValue("Summer"u8);
                    break;
                case Season.Autumn:
                    writer.WriteStringValue("Autumn"u8);
                    break;
                case Season.Winter:
                    writer.WriteStringValue("⛄"u8);
                    break;
                default:
                    writer.WriteNullValue();
                    break;
            }
        }
    }
}
