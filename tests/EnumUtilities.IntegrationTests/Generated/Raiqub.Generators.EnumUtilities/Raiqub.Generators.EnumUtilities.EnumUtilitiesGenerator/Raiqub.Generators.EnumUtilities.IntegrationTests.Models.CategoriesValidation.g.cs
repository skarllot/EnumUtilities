// <auto-generated />
#nullable enable

using System;
using System.Diagnostics.CodeAnalysis;

#pragma warning disable CS1591 // publicly visible type or member must be documented

namespace Raiqub.Generators.EnumUtilities.IntegrationTests.Models
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Raiqub.Generators.EnumUtilities", "1.5.0.0")]
    public static partial class CategoriesValidation
    {
        /// <summary>Returns a boolean telling whether the value of <see cref="Categories"/> instance exists in the enumeration.</summary>
        /// <returns><c>true</c> if the value of <see cref="Categories"/> instance exists in the enumeration; <c>false</c> otherwise.</returns>
        public static bool IsDefined(Categories value)
        {
            return value switch
            {
                Categories.Electronics => true,
                Categories.Food => true,
                Categories.Automotive => true,
                Categories.Arts => true,
                Categories.BeautyCare => true,
                Categories.Fashion => true,
                _ => false
            };
        }

        public static bool IsDefined(
            [NotNullWhen(true)] string? name,
            StringComparison comparisonType)
        {
            return name switch
            {
                { } s when s.Equals(nameof(Categories.Electronics), comparisonType) => true,
                { } s when s.Equals(nameof(Categories.Food), comparisonType) => true,
                { } s when s.Equals(nameof(Categories.Automotive), comparisonType) => true,
                { } s when s.Equals(nameof(Categories.Arts), comparisonType) => true,
                { } s when s.Equals(nameof(Categories.BeautyCare), comparisonType) => true,
                { } s when s.Equals(nameof(Categories.Fashion), comparisonType) => true,
                _ => false
            };
        }

        public static bool IsDefinedIgnoreCase([NotNullWhen(true)] string? name)
        {
            return IsDefined(name, StringComparison.OrdinalIgnoreCase);
        }

        public static bool IsDefined([NotNullWhen(true)] string? name)
        {
            return name switch
            {
                nameof(Categories.Electronics) => true,
                nameof(Categories.Food) => true,
                nameof(Categories.Automotive) => true,
                nameof(Categories.Arts) => true,
                nameof(Categories.BeautyCare) => true,
                nameof(Categories.Fashion) => true,
                _ => false
            };
        }
    }
}
