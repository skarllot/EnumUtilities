// <auto-generated />
#nullable enable

using System;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;

#pragma warning disable CS1591 // publicly visible type or member must be documented

[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Raiqub.Generators.EnumUtilities", "1.6.0.0")]
public static partial class NoNamespaceFactory
{
    /// <summary>
    /// Converts the string representation of the name or numeric value of one or more enumerated constants to
    /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.
    /// </summary>
    /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
    /// <param name="comparisonType">One of the enumeration values that specifies how the strings will be compared.</param>
    /// <param name="result">
    /// When this method returns, result contains an object of type NoNamespace whose value is represented by value
    /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
    /// underlying type of NoNamespace. Note that this value need not be a member of the NoNamespace enumeration.
    /// </param>
    /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
    /// <exception cref="ArgumentException"><paramref name="comparisonType"/> is not a <see cref="StringComparison"/> value.</exception>
    public static bool TryParse(
        [NotNullWhen(true)] string? name,
        StringComparison comparisonType,
        out NoNamespace result)
    {
        int numValue;
        switch (name)
        {
            case { } s when s.Equals("Zero", comparisonType):
                numValue = 0;
                break;
            case { } s when s.Equals("One", comparisonType):
                numValue = 1;
                break;
            case { } s when s.Equals("Two", comparisonType):
                numValue = 2;
                break;
            case { } s when TryParseNumeric(s, comparisonType, out numValue):
                break;
            default:
                return Enum.TryParse(name, out result);
        }

        result = (NoNamespace)numValue;
        return true;
    }

    /// <summary>
    /// Converts the string representation of the name or numeric value of one or more enumerated constants to
    /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.
    /// </summary>
    /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
    /// <param name="result">
    /// When this method returns, result contains an object of type NoNamespace whose value is represented by value
    /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
    /// underlying type of NoNamespace. Note that this value need not be a member of the NoNamespace enumeration.
    /// </param>
    /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
    public static bool TryParse(
        [NotNullWhen(true)] string? name,
        out NoNamespace result)
    {
        int numValue;
        switch (name)
        {
            case "Zero":
                numValue = 0;
                break;
            case "One":
                numValue = 1;
                break;
            case "Two":
                numValue = 2;
                break;
            case { } s when TryParseNumeric(s, StringComparison.Ordinal, out numValue):
                break;
            default:
                return Enum.TryParse(name, out result);
        }

        result = (NoNamespace)numValue;
        return true;
    }

    /// <summary>
    /// Converts the string representation of the name or numeric value of one or more enumerated constants to
    /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.
    /// </summary>
    /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
    /// <param name="result">
    /// When this method returns, result contains an object of type NoNamespace whose value is represented by value
    /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
    /// underlying type of NoNamespace. Note that this value need not be a member of the NoNamespace enumeration.
    /// </param>
    /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
    public static bool TryParseIgnoreCase(
        [NotNullWhen(true)] string? name,
        out NoNamespace result)
    {
        return TryParse(name, StringComparison.OrdinalIgnoreCase, out result);
    }

    /// <summary>
    /// Converts the string representation of the name or numeric value of one or more enumerated constants to
    /// an equivalent enumerated object.
    /// </summary>
    /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
    /// <returns>
    /// Contains an object of type NoNamespace whose value is represented by value if the parse operation succeeds.
    /// If the parse operation fails, result contains <c>null</c> value.
    /// </returns>
    public static NoNamespace? TryParse(string? name)
    {
        return TryParse(name, out NoNamespace result) ? result : null;
    }

    /// <summary>
    /// Converts the string representation of the name or numeric value of one or more enumerated constants to
    /// an equivalent enumerated object.
    /// </summary>
    /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
    /// <returns>
    /// Contains an object of type NoNamespace whose value is represented by value if the parse operation succeeds.
    /// If the parse operation fails, result contains <c>null</c> value.
    /// </returns>
    public static NoNamespace? TryParseIgnoreCase(string? name)
    {
        return TryParse(name, StringComparison.OrdinalIgnoreCase, out NoNamespace result) ? result : null;
    }

    /// <summary>
    /// Converts the string representation of the name or numeric value of one or more enumerated constants to
    /// an equivalent enumerated object.
    /// </summary>
    /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
    /// <param name="comparisonType">One of the enumeration values that specifies how the strings will be compared.</param>
    /// <returns>
    /// Contains an object of type NoNamespace whose value is represented by value if the parse operation succeeds.
    /// If the parse operation fails, result contains <c>null</c> value.
    /// </returns>
    /// <exception cref="ArgumentException"><paramref name="comparisonType"/> is not a <see cref="StringComparison"/> value.</exception>
    public static NoNamespace? TryParse(string? name, StringComparison comparisonType)
    {
        return TryParse(name, comparisonType, out NoNamespace result) ? result : null;
    }

    /// <summary>Retrieves an array of the values of the constants in the NoNamespace enumeration.</summary>
    /// <returns>An array that contains the values of the constants in NoNamespace.</returns>
    public static NoNamespace[] GetValues()
    {
        return new[]
        {
            (NoNamespace)0,
            (NoNamespace)1,
            (NoNamespace)2,
        };
    }

    /// <summary>Retrieves an array of the names of the constants in NoNamespace enumeration.</summary>
    /// <returns>A string array of the names of the constants in NoNamespace.</returns>
    public static string[] GetNames()
    {
        return new[]
        {
            "Zero",
            "One",
            "Two",
        };
    }

    private static bool TryParseNumeric(
        string name,
        StringComparison comparisonType,
        out int result)
    {
        switch (comparisonType)
        {
            case StringComparison.CurrentCulture:
            case StringComparison.CurrentCultureIgnoreCase:
                return int.TryParse(name, NumberStyles.Integer, NumberFormatInfo.CurrentInfo, out result);
            case StringComparison.InvariantCulture:
            case StringComparison.InvariantCultureIgnoreCase:
            case StringComparison.Ordinal:
            case StringComparison.OrdinalIgnoreCase:
                return int.TryParse(name, NumberStyles.Integer, NumberFormatInfo.InvariantInfo, out result);
            default:
                return int.TryParse(name, out result);
        }
    }
}
