// <auto-generated />
#nullable enable

using System;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;

#pragma warning disable CS1591 // publicly visible type or member must be documented

namespace Raiqub.Generators.EnumUtilities.IntegrationTests.Models
{
    public static partial class HumanStatesFactory
    {
        public static bool TryParse(
            [NotNullWhen(true)] string? name,
            StringComparison comparisonType,
            out HumanStates result)
        {
            switch (name)
            {
                case { } s when s.Equals(nameof(HumanStates.Idle), comparisonType):
                    result = HumanStates.Idle;
                    return true;
                case { } s when s.Equals(nameof(HumanStates.Working), comparisonType):
                    result = HumanStates.Working;
                    return true;
                case { } s when s.Equals(nameof(HumanStates.Sleeping), comparisonType):
                    result = HumanStates.Sleeping;
                    return true;
                case { } s when s.Equals(nameof(HumanStates.Eating), comparisonType):
                    result = HumanStates.Eating;
                    return true;
                case { } s when s.Equals(nameof(HumanStates.Dead), comparisonType):
                    result = HumanStates.Dead;
                    return true;
                case { } s when s.Equals(nameof(HumanStates.Relaxing), comparisonType):
                    result = HumanStates.Relaxing;
                    return true;
                case { } s when TryParseNumeric(s, comparisonType, out var val):
                    result = (HumanStates)val;
                    return true;
                default:
                    return Enum.TryParse(name, out result);
            }
        }

        public static bool TryParseIgnoreCase(
            [NotNullWhen(true)] string? name,
            out HumanStates result)
        {
            return TryParse(name, StringComparison.OrdinalIgnoreCase, out result);
        }

        public static bool TryParse(
            [NotNullWhen(true)] string? name,
            out HumanStates result)
        {
            switch (name)
            {
                case nameof(HumanStates.Idle):
                    result = HumanStates.Idle;
                    return true;
                case nameof(HumanStates.Working):
                    result = HumanStates.Working;
                    return true;
                case nameof(HumanStates.Sleeping):
                    result = HumanStates.Sleeping;
                    return true;
                case nameof(HumanStates.Eating):
                    result = HumanStates.Eating;
                    return true;
                case nameof(HumanStates.Dead):
                    result = HumanStates.Dead;
                    return true;
                case nameof(HumanStates.Relaxing):
                    result = HumanStates.Relaxing;
                    return true;
                case { } s when TryParseNumeric(s, StringComparison.Ordinal, out var val):
                    result = (HumanStates)val;
                    return true;
                default:
                    return Enum.TryParse(name, out result);
            }
        }

        public static HumanStates[] GetValues()
        {
            return new[]
            {
                HumanStates.Idle,
                HumanStates.Working,
                HumanStates.Sleeping,
                HumanStates.Eating,
                HumanStates.Dead,
            };
        }

        public static string[] GetNames()
        {
            return new[]
            {
                nameof(HumanStates.Idle),
                nameof(HumanStates.Working),
                nameof(HumanStates.Sleeping),
                nameof(HumanStates.Eating),
                nameof(HumanStates.Dead),
                nameof(HumanStates.Relaxing),
            };
        }

        private static bool TryParseNumeric(
            string name,
            StringComparison comparisonType,
            out Int32 result)
        {
            switch (comparisonType)
            {
                case StringComparison.CurrentCulture:
                case StringComparison.CurrentCultureIgnoreCase:
                    return Int32.TryParse(name, NumberStyles.Integer, NumberFormatInfo.CurrentInfo, out result);
                case StringComparison.InvariantCulture:
                case StringComparison.InvariantCultureIgnoreCase:
                case StringComparison.Ordinal:
                case StringComparison.OrdinalIgnoreCase:
                    return Int32.TryParse(name, NumberStyles.Integer, NumberFormatInfo.InvariantInfo, out result);
                default:
                    return Int32.TryParse(name, out result);
            }
        }
    }
}
