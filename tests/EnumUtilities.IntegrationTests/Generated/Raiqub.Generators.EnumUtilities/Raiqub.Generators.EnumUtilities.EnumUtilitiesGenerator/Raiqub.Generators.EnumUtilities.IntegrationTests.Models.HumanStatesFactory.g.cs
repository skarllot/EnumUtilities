// <auto-generated />
#nullable enable

using System;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;

#pragma warning disable CS1591 // publicly visible type or member must be documented

namespace Raiqub.Generators.EnumUtilities.IntegrationTests.Models
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Raiqub.Generators.EnumUtilities", "1.6.0.0")]
    public static partial class HumanStatesFactory
    {
        /// <summary>
        /// Converts the string representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
        /// <param name="comparisonType">One of the enumeration values that specifies how the strings will be compared.</param>
        /// <param name="result">
        /// When this method returns, result contains an object of type HumanStates whose value is represented by value
        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
        /// underlying type of HumanStates. Note that this value need not be a member of the HumanStates enumeration.
        /// </param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        /// <exception cref="ArgumentException"><paramref name="comparisonType"/> is not a <see cref="StringComparison"/> value.</exception>
        public static bool TryParse(
            [NotNullWhen(true)] string? name,
            StringComparison comparisonType,
            out HumanStates result)
        {
            switch (name)
            {
                case { } s when s.Equals(nameof(HumanStates.Idle), comparisonType):
                    result = HumanStates.Idle;
                    return true;
                case { } s when s.Equals(nameof(HumanStates.Working), comparisonType):
                    result = HumanStates.Working;
                    return true;
                case { } s when s.Equals(nameof(HumanStates.Sleeping), comparisonType):
                    result = HumanStates.Sleeping;
                    return true;
                case { } s when s.Equals(nameof(HumanStates.Eating), comparisonType):
                    result = HumanStates.Eating;
                    return true;
                case { } s when s.Equals(nameof(HumanStates.Dead), comparisonType):
                    result = HumanStates.Dead;
                    return true;
                case { } s when s.Equals(nameof(HumanStates.Relaxing), comparisonType):
                    result = HumanStates.Relaxing;
                    return true;
                case { } s when TryParseNumeric(s.AsSpan(), out int val):
                    result = (HumanStates)val;
                    return true;
                default:
                    return Enum.TryParse(name, out result);
            }
        }

        /// <summary>
        /// Converts the string representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
        /// <param name="result">
        /// When this method returns, result contains an object of type HumanStates whose value is represented by value
        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
        /// underlying type of HumanStates. Note that this value need not be a member of the HumanStates enumeration.
        /// </param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
            [NotNullWhen(true)] string? name,
            out HumanStates result)
        {
            switch (name)
            {
                case nameof(HumanStates.Idle):
                    result = HumanStates.Idle;
                    return true;
                case nameof(HumanStates.Working):
                    result = HumanStates.Working;
                    return true;
                case nameof(HumanStates.Sleeping):
                    result = HumanStates.Sleeping;
                    return true;
                case nameof(HumanStates.Eating):
                    result = HumanStates.Eating;
                    return true;
                case nameof(HumanStates.Dead):
                    result = HumanStates.Dead;
                    return true;
                case nameof(HumanStates.Relaxing):
                    result = HumanStates.Relaxing;
                    return true;
                case { } s when TryParseNumeric(s.AsSpan(), out int val):
                    result = (HumanStates)val;
                    return true;
                default:
                    return Enum.TryParse(name, out result);
            }
        }

        /// <summary>
        /// Converts the string representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
        /// <param name="result">
        /// When this method returns, result contains an object of type HumanStates whose value is represented by value
        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
        /// underlying type of HumanStates. Note that this value need not be a member of the HumanStates enumeration.
        /// </param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParseIgnoreCase(
            [NotNullWhen(true)] string? name,
            out HumanStates result)
        {
            return TryParse(name, StringComparison.OrdinalIgnoreCase, out result);
        }

        /// <summary>
        /// Converts the string representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
        /// <returns>
        /// Contains an object of type HumanStates whose value is represented by value if the parse operation succeeds.
        /// If the parse operation fails, result contains <c>null</c> value.
        /// </returns>
        public static HumanStates? TryParse(string? name)
        {
            return TryParse(name, out HumanStates result) ? result : null;
        }

        /// <summary>
        /// Converts the string representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
        /// <returns>
        /// Contains an object of type HumanStates whose value is represented by value if the parse operation succeeds.
        /// If the parse operation fails, result contains <c>null</c> value.
        /// </returns>
        public static HumanStates? TryParseIgnoreCase(string? name)
        {
            return TryParse(name, StringComparison.OrdinalIgnoreCase, out HumanStates result) ? result : null;
        }

        /// <summary>
        /// Converts the string representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
        /// <param name="comparisonType">One of the enumeration values that specifies how the strings will be compared.</param>
        /// <returns>
        /// Contains an object of type HumanStates whose value is represented by value if the parse operation succeeds.
        /// If the parse operation fails, result contains <c>null</c> value.
        /// </returns>
        /// <exception cref="ArgumentException"><paramref name="comparisonType"/> is not a <see cref="StringComparison"/> value.</exception>
        public static HumanStates? TryParse(string? name, StringComparison comparisonType)
        {
            return TryParse(name, comparisonType, out HumanStates result) ? result : null;
        }

        /// <summary>
        /// Converts the string representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="source">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
        /// <param name="result">
        /// When this method returns, result contains an object of type HumanStates whose value is represented by value
        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
        /// underlying type of HumanStates. Note that this value need not be a member of the HumanStates enumeration.
        /// </param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(ReadOnlySpan<char> source, out HumanStates result)
        {
            switch (source)
            {
                case "Idle":
                    result = HumanStates.Idle;
                    return true;
                case "Working":
                    result = HumanStates.Working;
                    return true;
                case "Sleeping":
                    result = HumanStates.Sleeping;
                    return true;
                case "Eating":
                    result = HumanStates.Eating;
                    return true;
                case "Dead":
                    result = HumanStates.Dead;
                    return true;
                case "Relaxing":
                    result = HumanStates.Relaxing;
                    return true;
                case { } when TryParseNumeric(source, out int number):
                    result = (HumanStates)number;
                    return true;
                default:
    #if NET6_0_OR_GREATER
                    return Enum.TryParse(source, out result);
    #else
                    return Enum.TryParse(source.ToString(), out result);
    #endif
            }
        }

        /// <summary>
        /// Converts the string representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="source">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
        /// <param name="ignoreCase"><c>true</c> to read <paramref name="source"/> in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <param name="result">
        /// When this method returns, result contains an object of type HumanStates whose value is represented by value
        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
        /// underlying type of HumanStates. Note that this value need not be a member of the HumanStates enumeration.
        /// </param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(ReadOnlySpan<char> source, bool ignoreCase, out HumanStates result)
        {
            if (!ignoreCase)
            {
                return TryParse(source, out result);
            }

            if (source.Equals("Idle", StringComparison.OrdinalIgnoreCase))
            {
                result = HumanStates.Idle;
                return true;
            }

            if (source.Equals("Working", StringComparison.OrdinalIgnoreCase))
            {
                result = HumanStates.Working;
                return true;
            }

            if (source.Equals("Sleeping", StringComparison.OrdinalIgnoreCase))
            {
                result = HumanStates.Sleeping;
                return true;
            }

            if (source.Equals("Eating", StringComparison.OrdinalIgnoreCase))
            {
                result = HumanStates.Eating;
                return true;
            }

            if (source.Equals("Dead", StringComparison.OrdinalIgnoreCase))
            {
                result = HumanStates.Dead;
                return true;
            }

            if (source.Equals("Relaxing", StringComparison.OrdinalIgnoreCase))
            {
                result = HumanStates.Relaxing;
                return true;
            }

            if (TryParseNumeric(source, out int number))
            {
                result = (HumanStates)number;
                return true;
            }

    #if NET6_0_OR_GREATER
            return Enum.TryParse(source, ignoreCase, out result);
    #else
            return Enum.TryParse(source.ToString(), ignoreCase, out result);
    #endif
        }

        /// <summary>
        /// Converts the UTF-8 representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="source">The case-sensitive UTF-8 representation of the enumeration name or underlying value to convert.</param>
        /// <param name="result">
        /// When this method returns, result contains an object of type HumanStates whose value is represented by value
        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
        /// underlying type of HumanStates. Note that this value need not be a member of the HumanStates enumeration.
        /// </param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParseUtf8(ReadOnlySpan<byte> source, out HumanStates result)
        {
            if (source == "Idle"u8)
            {
                result = HumanStates.Idle;
                return true;
            }

            if (source == "Working"u8)
            {
                result = HumanStates.Working;
                return true;
            }

            if (source == "Sleeping"u8)
            {
                result = HumanStates.Sleeping;
                return true;
            }

            if (source == "Eating"u8)
            {
                result = HumanStates.Eating;
                return true;
            }

            if (source == "Dead"u8)
            {
                result = HumanStates.Dead;
                return true;
            }

            if (source == "Relaxing"u8)
            {
                result = HumanStates.Relaxing;
                return true;
            }

            if (source == "1"u8)
            {
                result = HumanStates.Idle;
                return true;
            }

            if (source == "2"u8)
            {
                result = HumanStates.Working;
                return true;
            }

            if (source == "3"u8)
            {
                result = HumanStates.Sleeping;
                return true;
            }

            if (source == "4"u8)
            {
                result = HumanStates.Eating;
                return true;
            }

            if (source == "5"u8)
            {
                result = HumanStates.Dead;
                return true;
            }

            if (source == "0"u8)
            {
                result = 0;
                return true;
            }

    #if NET6_0_OR_GREATER
            int charCount = System.Text.Encoding.UTF8.GetCharCount(source);
            Span<char> buffer = charCount <= 512
                ? stackalloc char[512].Slice(0, charCount)
                : new char[charCount];
            System.Text.Encoding.UTF8.GetChars(source, buffer);
            return Enum.TryParse(buffer, out result);
    #else
            return Enum.TryParse(System.Text.Encoding.UTF8.GetString(source), out result);
    #endif
        }

        /// <summary>Retrieves an array of the values of the constants in the HumanStates enumeration.</summary>
        /// <returns>An array that contains the values of the constants in HumanStates.</returns>
        public static HumanStates[] GetValues()
        {
            return new[]
            {
                HumanStates.Idle,
                HumanStates.Working,
                HumanStates.Sleeping,
                HumanStates.Eating,
                HumanStates.Dead,
            };
        }

        /// <summary>Retrieves an array of the names of the constants in HumanStates enumeration.</summary>
        /// <returns>A string array of the names of the constants in HumanStates.</returns>
        public static string[] GetNames()
        {
            return new[]
            {
                nameof(HumanStates.Idle),
                nameof(HumanStates.Working),
                nameof(HumanStates.Sleeping),
                nameof(HumanStates.Eating),
                nameof(HumanStates.Dead),
                nameof(HumanStates.Relaxing),
            };
        }

        private static bool TryParseNumeric(ReadOnlySpan<char> name, out int result)
        {
            return int.TryParse(name, NumberStyles.Integer, NumberFormatInfo.InvariantInfo, out result);
        }
    }
}
