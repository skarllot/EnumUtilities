// <auto-generated />
#nullable enable

using System;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Runtime.CompilerServices;
using Raiqub.Generators.EnumUtilities;

#pragma warning disable CS1591 // publicly visible type or member must be documented

namespace Raiqub.Generators.EnumUtilities.IntegrationTests.Models
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Raiqub.Generators.EnumUtilities", "1.6.0.0")]
    public static partial class WeekDaysFactory
    {
        /// <summary>
        /// Converts the string representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
        /// <param name="ignoreCase"><see langword="true"/> to ignore case; <see langword="false"/> to regard case.</param>
        /// <param name="result">
        /// When this method returns, result contains an object of type WeekDays whose value is represented by value
        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
        /// underlying type of WeekDays. Note that this value need not be a member of the WeekDays enumeration.
        /// </param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse([NotNullWhen(true)] string? name, bool ignoreCase, out WeekDays result)
        {
            return TryParse(name.AsSpan(), ignoreCase, out result);
        }

        /// <summary>
        /// Converts the string representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
        /// <param name="result">
        /// When this method returns, result contains an object of type WeekDays whose value is represented by value
        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
        /// underlying type of WeekDays. Note that this value need not be a member of the WeekDays enumeration.
        /// </param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse([NotNullWhen(true)] string? name, out WeekDays result)
        {
            return TryParse(name.AsSpan(), false, out result);
        }

        /// <summary>
        /// Converts the string representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
        /// <param name="ignoreCase"><see langword="true"/> to ignore case; <see langword="false"/> to regard case.</param>
        /// <returns>
        /// Contains an object of type WeekDays whose value is represented by value if the parse operation succeeds.
        /// If the parse operation fails, result contains <c>null</c> value.
        /// </returns>
        public static WeekDays? TryParse(string? name, bool ignoreCase)
        {
            return TryParse(name.AsSpan(), ignoreCase, out WeekDays result) ? result : null;
        }

        /// <summary>
        /// Converts the string representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
        /// <returns>
        /// Contains an object of type WeekDays whose value is represented by value if the parse operation succeeds.
        /// If the parse operation fails, result contains <c>null</c> value.
        /// </returns>
        public static WeekDays? TryParse(string? name)
        {
            return TryParse(name.AsSpan(), false, out WeekDays result) ? result : null;
        }

        /// <summary>
        /// Converts the string representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="source">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
        /// <param name="ignoreCase"><c>true</c> to read <paramref name="source"/> in case insensitive mode; <c>false</c> to read value in case sensitive mode.</param>
        /// <param name="result">
        /// When this method returns, result contains an object of type WeekDays whose value is represented by value
        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
        /// underlying type of WeekDays. Note that this value need not be a member of the WeekDays enumeration.
        /// </param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(ReadOnlySpan<char> source, bool ignoreCase, out WeekDays result)
        {
            bool success = EnumStringParser.TryParse(source, WeekDaysStringParser.Instance, ignoreCase, false, out int number);
            if (!success)
            {
                result = 0;
                return false;
            }

            result = (WeekDays)number;
            return true;
        }

        /// <summary>
        /// Converts the string representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="source">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
        /// <param name="result">
        /// When this method returns, result contains an object of type WeekDays whose value is represented by value
        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
        /// underlying type of WeekDays. Note that this value need not be a member of the WeekDays enumeration.
        /// </param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(ReadOnlySpan<char> source, out WeekDays result)
        {
            return TryParse(source, false, out result);
        }

        /// <summary>
        /// Converts the UTF-8 representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="source">The case-sensitive UTF-8 representation of the enumeration name or underlying value to convert.</param>
        /// <param name="result">
        /// When this method returns, result contains an object of type WeekDays whose value is represented by value
        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
        /// underlying type of WeekDays. Note that this value need not be a member of the WeekDays enumeration.
        /// </param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParseUtf8(ReadOnlySpan<byte> source, out WeekDays result)
        {
            if (source == "Monday"u8)
            {
                result = WeekDays.Monday;
                return true;
            }

            if (source == "Tuesday"u8)
            {
                result = WeekDays.Tuesday;
                return true;
            }

            if (source == "Wednesday"u8)
            {
                result = WeekDays.Wednesday;
                return true;
            }

            if (source == "Thursday"u8)
            {
                result = WeekDays.Thursday;
                return true;
            }

            if (source == "Friday"u8)
            {
                result = WeekDays.Friday;
                return true;
            }

            if (source == "Saturday"u8)
            {
                result = WeekDays.Saturday;
                return true;
            }

            if (source == "Sunday"u8)
            {
                result = WeekDays.Sunday;
                return true;
            }

            if (source == "0"u8)
            {
                result = WeekDays.Monday;
                return true;
            }

            if (source == "1"u8)
            {
                result = WeekDays.Tuesday;
                return true;
            }

            if (source == "2"u8)
            {
                result = WeekDays.Wednesday;
                return true;
            }

            if (source == "3"u8)
            {
                result = WeekDays.Thursday;
                return true;
            }

            if (source == "4"u8)
            {
                result = WeekDays.Friday;
                return true;
            }

            if (source == "5"u8)
            {
                result = WeekDays.Saturday;
                return true;
            }

            if (source == "6"u8)
            {
                result = WeekDays.Sunday;
                return true;
            }

    #if NET6_0_OR_GREATER
            int charCount = System.Text.Encoding.UTF8.GetCharCount(source);
            Span<char> buffer = charCount <= 512
                ? stackalloc char[512].Slice(0, charCount)
                : new char[charCount];
            System.Text.Encoding.UTF8.GetChars(source, buffer);
            return Enum.TryParse(buffer, out result);
    #else
            return Enum.TryParse(System.Text.Encoding.UTF8.GetString(source), out result);
    #endif
        }

        private sealed class WeekDaysStringParser : IEnumParser<int>
        {
            public static WeekDaysStringParser Instance = new WeekDaysStringParser();

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public int BitwiseOr(int value1, int value2) => unchecked((int)(value1 | value2));

            public bool TryParseNumber(ReadOnlySpan<char> value, out int result) => EnumNumericParser.TryParse(value, out result);

            public bool TryParseSingleName(ReadOnlySpan<char> value, bool ignoreCase, out int result)
            {
                return ignoreCase
                    ? TryParse(value, out result)
                    : TryParse(value, StringComparison.OrdinalIgnoreCase, out result);
            }

            public bool TryParseSingleName(ReadOnlySpan<char> value, StringComparison comparisonType, out int result)
            {
                return TryParse(value, comparisonType, out result);
            }

            private bool TryParse(ReadOnlySpan<char> value, out int result)
            {
                switch (value)
                {
                    case "Monday":
                        result = 0;
                        return true;
                    case "Tuesday":
                        result = 1;
                        return true;
                    case "Wednesday":
                        result = 2;
                        return true;
                    case "Thursday":
                        result = 3;
                        return true;
                    case "Friday":
                        result = 4;
                        return true;
                    case "Saturday":
                        result = 5;
                        return true;
                    case "Sunday":
                        result = 6;
                        return true;
                    default:
                        result = 0;
                        return false;
                }
            }

            private bool TryParse(ReadOnlySpan<char> value, StringComparison comparisonType, out int result)
            {
                switch (value)
                {
                    case { } when value.Equals("Monday", comparisonType):
                        result = 0;
                        return true;
                    case { } when value.Equals("Tuesday", comparisonType):
                        result = 1;
                        return true;
                    case { } when value.Equals("Wednesday", comparisonType):
                        result = 2;
                        return true;
                    case { } when value.Equals("Thursday", comparisonType):
                        result = 3;
                        return true;
                    case { } when value.Equals("Friday", comparisonType):
                        result = 4;
                        return true;
                    case { } when value.Equals("Saturday", comparisonType):
                        result = 5;
                        return true;
                    case { } when value.Equals("Sunday", comparisonType):
                        result = 6;
                        return true;
                    default:
                        result = 0;
                        return false;
                }
            }
        }

        /// <summary>
        /// Converts the string representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
        /// <param name="comparisonType">One of the enumeration values that specifies how the strings will be compared.</param>
        /// <param name="result">
        /// When this method returns, result contains an object of type WeekDays whose value is represented by value
        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
        /// underlying type of WeekDays. Note that this value need not be a member of the WeekDays enumeration.
        /// </param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        /// <exception cref="ArgumentException"><paramref name="comparisonType"/> is not a <see cref="StringComparison"/> value.</exception>
        public static bool TryParse(
            [NotNullWhen(true)] string? name,
            StringComparison comparisonType,
            out WeekDays result)
        {
            bool success = WeekDaysStringParser.Instance.TryParseSingleName(name.AsSpan(), comparisonType, out int number)
                || WeekDaysStringParser.Instance.TryParseNumber(name.AsSpan(), out number);
            if (!success)
            {
                return Enum.TryParse(name, out result);
            }

            result = (WeekDays)number;
            return true;
        }

        /// <summary>
        /// Converts the string representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
        /// <param name="result">
        /// When this method returns, result contains an object of type WeekDays whose value is represented by value
        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
        /// underlying type of WeekDays. Note that this value need not be a member of the WeekDays enumeration.
        /// </param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParseIgnoreCase(
            [NotNullWhen(true)] string? name,
            out WeekDays result)
        {
            return TryParse(name.AsSpan(), true, out result);
        }

        /// <summary>
        /// Converts the string representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
        /// <returns>
        /// Contains an object of type WeekDays whose value is represented by value if the parse operation succeeds.
        /// If the parse operation fails, result contains <c>null</c> value.
        /// </returns>
        public static WeekDays? TryParseIgnoreCase(string? name)
        {
            return TryParse(name.AsSpan(), true, out WeekDays result) ? result : null;
        }

        /// <summary>
        /// Converts the string representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
        /// <param name="comparisonType">One of the enumeration values that specifies how the strings will be compared.</param>
        /// <returns>
        /// Contains an object of type WeekDays whose value is represented by value if the parse operation succeeds.
        /// If the parse operation fails, result contains <c>null</c> value.
        /// </returns>
        /// <exception cref="ArgumentException"><paramref name="comparisonType"/> is not a <see cref="StringComparison"/> value.</exception>
        public static WeekDays? TryParse(string? name, StringComparison comparisonType)
        {
            return TryParse(name, comparisonType, out WeekDays result) ? result : null;
        }

        public static bool TryCreateFromDisplayShortName(
            [NotNullWhen(true)] string? displayShortName,
            StringComparison comparisonType,
            out WeekDays result)
        {
            switch (displayShortName)
            {
                case { } s when s.Equals(Raiqub.Generators.EnumUtilities.IntegrationTests.Strings.MondayShort, comparisonType):
                    result = WeekDays.Monday;
                    return true;
                case { } s when s.Equals("Tue", comparisonType):
                    result = WeekDays.Tuesday;
                    return true;
                case { } s when s.Equals("Fri", comparisonType):
                    result = WeekDays.Friday;
                    return true;
                case { } s when s.Equals("Sat", comparisonType):
                    result = WeekDays.Saturday;
                    return true;
                default:
                    return TryCreateFromDisplayName(displayShortName, comparisonType, out result);
            }
        }

        public static bool TryCreateFromDisplayShortName([NotNullWhen(true)] string? displayShortName, out WeekDays result)
        {
            return TryCreateFromDisplayShortName(displayShortName, StringComparison.Ordinal, out result);
        }

        public static WeekDays? TryCreateFromDisplayShortName(string? displayShortName, StringComparison comparisonType)
        {
            return TryCreateFromDisplayShortName(displayShortName, comparisonType, out WeekDays result) ? result : null;
        }

        public static WeekDays? TryCreateFromDisplayShortName(string? displayShortName)
        {
            return TryCreateFromDisplayShortName(displayShortName, StringComparison.Ordinal, out WeekDays result) ? result : null;
        }

        public static bool TryCreateFromDisplayName(
            [NotNullWhen(true)] string? displayName,
            StringComparison comparisonType,
            out WeekDays result)
        {
            switch (displayName)
            {
                case { } s when s.Equals(Raiqub.Generators.EnumUtilities.IntegrationTests.Strings.MondayFull, comparisonType):
                    result = WeekDays.Monday;
                    return true;
                case { } s when s.Equals(nameof(WeekDays.Tuesday), comparisonType):
                    result = WeekDays.Tuesday;
                    return true;
                case { } s when s.Equals(nameof(WeekDays.Wednesday), comparisonType):
                    result = WeekDays.Wednesday;
                    return true;
                case { } s when s.Equals("Thursday", comparisonType):
                    result = WeekDays.Thursday;
                    return true;
                case { } s when s.Equals("Friday", comparisonType):
                    result = WeekDays.Friday;
                    return true;
                case { } s when s.Equals(nameof(WeekDays.Saturday), comparisonType):
                    result = WeekDays.Saturday;
                    return true;
                case { } s when s.Equals(nameof(WeekDays.Sunday), comparisonType):
                    result = WeekDays.Sunday;
                    return true;
                default:
                    result = default;
                    return false;
            }
        }

        public static bool TryCreateFromDisplayName([NotNullWhen(true)] string? displayName, out WeekDays result)
        {
            return TryCreateFromDisplayName(displayName, StringComparison.Ordinal, out result);
        }

        public static WeekDays? TryCreateFromDisplayName(string? displayName, StringComparison comparisonType)
        {
            return TryCreateFromDisplayName(displayName, comparisonType, out WeekDays result) ? result : null;
        }

        public static WeekDays? TryCreateFromDisplayName(string? displayName)
        {
            return TryCreateFromDisplayName(displayName, StringComparison.Ordinal, out WeekDays result) ? result : null;
        }

        public static bool TryCreateFromDescription(
            [NotNullWhen(true)] string? description,
            StringComparison comparisonType,
            out WeekDays result)
        {
            switch (description)
            {
                case { } s when s.Equals(Raiqub.Generators.EnumUtilities.IntegrationTests.Strings.MondayDescription, comparisonType):
                    result = WeekDays.Monday;
                    return true;
                case { } s when s.Equals("Almost the last day of the week", comparisonType):
                    result = WeekDays.Saturday;
                    return true;
                case { } s when s.Equals("The last day of the week", comparisonType):
                    result = WeekDays.Sunday;
                    return true;
                default:
                    result = default;
                    return false;
            }
        }

        public static bool TryCreateFromDescription([NotNullWhen(true)] string? description, out WeekDays result)
        {
            return TryCreateFromDescription(description, StringComparison.Ordinal, out result);
        }

        public static WeekDays? TryCreateFromDescription(string? description, StringComparison comparisonType)
        {
            return TryCreateFromDescription(description, comparisonType, out WeekDays result) ? result : null;
        }

        public static WeekDays? TryCreateFromDescription(string? description)
        {
            return TryCreateFromDescription(description, StringComparison.Ordinal, out WeekDays result) ? result : null;
        }

        /// <summary>Retrieves an array of the values of the constants in the WeekDays enumeration.</summary>
        /// <returns>An array that contains the values of the constants in WeekDays.</returns>
        public static WeekDays[] GetValues()
        {
            return new[]
            {
                WeekDays.Monday,
                WeekDays.Tuesday,
                WeekDays.Wednesday,
                WeekDays.Thursday,
                WeekDays.Friday,
                WeekDays.Saturday,
                WeekDays.Sunday,
            };
        }

        /// <summary>Retrieves an array of the names of the constants in WeekDays enumeration.</summary>
        /// <returns>A string array of the names of the constants in WeekDays.</returns>
        public static string[] GetNames()
        {
            return new[]
            {
                nameof(WeekDays.Monday),
                nameof(WeekDays.Tuesday),
                nameof(WeekDays.Wednesday),
                nameof(WeekDays.Thursday),
                nameof(WeekDays.Friday),
                nameof(WeekDays.Saturday),
                nameof(WeekDays.Sunday),
            };
        }
    }
}
