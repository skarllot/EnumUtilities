// <auto-generated />
#nullable enable

using System;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;

#pragma warning disable CS1591 // publicly visible type or member must be documented

namespace Raiqub.Generators.EnumUtilities.IntegrationTests.Models
{
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public static partial class PaymentMethodFactory
    {
        /// <summary>
        /// Converts the string representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
        /// <param name="comparisonType">One of the enumeration values that specifies how the strings will be compared.</param>
        /// <param name="result">
        /// When this method returns, result contains an object of type PaymentMethod whose value is represented by value
        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
        /// underlying type of PaymentMethod. Note that this value need not be a member of the PaymentMethod enumeration.
        /// </param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        /// <exception cref="ArgumentException"><paramref name="comparisonType"/> is not a <see cref="StringComparison"/> value.</exception>
        public static bool TryParse(
            [NotNullWhen(true)] string? name,
            StringComparison comparisonType,
            out PaymentMethod result)
        {
            switch (name)
            {
                case { } s when s.Equals(nameof(PaymentMethod.Credit), comparisonType):
                    result = PaymentMethod.Credit;
                    return true;
                case { } s when s.Equals(nameof(PaymentMethod.Debit), comparisonType):
                    result = PaymentMethod.Debit;
                    return true;
                case { } s when s.Equals(nameof(PaymentMethod.Cash), comparisonType):
                    result = PaymentMethod.Cash;
                    return true;
                case { } s when s.Equals(nameof(PaymentMethod.Cheque), comparisonType):
                    result = PaymentMethod.Cheque;
                    return true;
                case { } s when TryParseNumeric(s, comparisonType, out var val):
                    result = (PaymentMethod)val;
                    return true;
                default:
                    return Enum.TryParse(name, out result);
            }
        }

        /// <summary>
        /// Converts the string representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
        /// <param name="result">
        /// When this method returns, result contains an object of type PaymentMethod whose value is represented by value
        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
        /// underlying type of PaymentMethod. Note that this value need not be a member of the PaymentMethod enumeration.
        /// </param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParseIgnoreCase(
            [NotNullWhen(true)] string? name,
            out PaymentMethod result)
        {
            return TryParse(name, StringComparison.OrdinalIgnoreCase, out result);
        }

        /// <summary>
        /// Converts the string representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
        /// <param name="result">
        /// When this method returns, result contains an object of type PaymentMethod whose value is represented by value
        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
        /// underlying type of PaymentMethod. Note that this value need not be a member of the PaymentMethod enumeration.
        /// </param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
            [NotNullWhen(true)] string? name,
            out PaymentMethod result)
        {
            switch (name)
            {
                case nameof(PaymentMethod.Credit):
                    result = PaymentMethod.Credit;
                    return true;
                case nameof(PaymentMethod.Debit):
                    result = PaymentMethod.Debit;
                    return true;
                case nameof(PaymentMethod.Cash):
                    result = PaymentMethod.Cash;
                    return true;
                case nameof(PaymentMethod.Cheque):
                    result = PaymentMethod.Cheque;
                    return true;
                case { } s when TryParseNumeric(s, StringComparison.Ordinal, out var val):
                    result = (PaymentMethod)val;
                    return true;
                default:
                    return Enum.TryParse(name, out result);
            }
        }

        public static bool TryParseFromEnumMemberValue(
            [NotNullWhen(true)] string? enumMemberValue,
            StringComparison comparisonType,
            out PaymentMethod result)
        {
            switch (enumMemberValue)
            {
                case { } s when s.Equals("Credit card", comparisonType):
                    result = PaymentMethod.Credit;
                    return true;
                case { } s when s.Equals("Debit card", comparisonType):
                    result = PaymentMethod.Debit;
                    return true;
                case { } s when s.Equals(nameof(PaymentMethod.Cash), comparisonType):
                    result = PaymentMethod.Cash;
                    return true;
                case { } s when s.Equals(nameof(PaymentMethod.Cheque), comparisonType):
                    result = PaymentMethod.Cheque;
                    return true;
                default:
                    result = default;
                    return false;
            }
        }

        public static bool TryCreateFromDescription(
            [NotNullWhen(true)] string? description,
            StringComparison comparisonType,
            out PaymentMethod result)
        {
            switch (description)
            {
                case { } s when s.Equals("The payment by using physical cash", comparisonType):
                    result = PaymentMethod.Cash;
                    return true;
                default:
                    result = default;
                    return false;
            }
        }

        public static bool TryCreateFromDisplayShortName(
            [NotNullWhen(true)] string? displayShortName,
            StringComparison comparisonType,
            out PaymentMethod result)
        {
            switch (displayShortName)
            {
                default:
                    return TryCreateFromDisplayName(displayShortName, comparisonType, out result);
            }
        }

        public static bool TryCreateFromDisplayName(
            [NotNullWhen(true)] string? displayName,
            StringComparison comparisonType,
            out PaymentMethod result)
        {
            switch (displayName)
            {
                case { } s when s.Equals("Credit Card", comparisonType):
                    result = PaymentMethod.Credit;
                    return true;
                case { } s when s.Equals("Debit Card", comparisonType):
                    result = PaymentMethod.Debit;
                    return true;
                case { } s when s.Equals("Physical Cash", comparisonType):
                    result = PaymentMethod.Cash;
                    return true;
                case { } s when s.Equals(nameof(PaymentMethod.Cheque), comparisonType):
                    result = PaymentMethod.Cheque;
                    return true;
                default:
                    result = default;
                    return false;
            }
        }

        public static PaymentMethod[] GetValues()
        {
            return new[]
            {
                PaymentMethod.Credit,
                PaymentMethod.Debit,
                PaymentMethod.Cash,
                PaymentMethod.Cheque,
            };
        }

        public static string[] GetNames()
        {
            return new[]
            {
                nameof(PaymentMethod.Credit),
                nameof(PaymentMethod.Debit),
                nameof(PaymentMethod.Cash),
                nameof(PaymentMethod.Cheque),
            };
        }

        private static bool TryParseNumeric(
            string name,
            StringComparison comparisonType,
            out int result)
        {
            switch (comparisonType)
            {
                case StringComparison.CurrentCulture:
                case StringComparison.CurrentCultureIgnoreCase:
                    return int.TryParse(name, NumberStyles.Integer, NumberFormatInfo.CurrentInfo, out result);
                case StringComparison.InvariantCulture:
                case StringComparison.InvariantCultureIgnoreCase:
                case StringComparison.Ordinal:
                case StringComparison.OrdinalIgnoreCase:
                    return int.TryParse(name, NumberStyles.Integer, NumberFormatInfo.InvariantInfo, out result);
                default:
                    return int.TryParse(name, out result);
            }
        }
    }
}
