// <auto-generated />
#nullable enable

using System;
using System.Runtime.CompilerServices;
using System.Threading;

#pragma warning disable CS1591 // publicly visible type or member must be documented

namespace Raiqub.Generators.EnumUtilities.IntegrationTests.Models
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Raiqub.Generators.EnumUtilities", "1.6.0.0")]
    public static partial class HumanStatesExtensions
    {
        /// <summary>Represents the largest possible number of bytes produced by encoding an <see cref="HumanStates" /> value to UTF-8, based on defined members. This field is constant.</summary>
        public const int NameMaxBytesLength = 8;

        /// <summary>Represents the largest possible number of characters produced by converting an <see cref="HumanStates" /> value to string, based on defined members. This field is constant.</summary>
        public const int NameMaxCharsLength = 8;

        /// <summary>Converts the value of this instance to its equivalent string representation.</summary>
        /// <returns>The string representation of the value of this instance.</returns>
        public static string ToStringFast(this HumanStates value)
        {
            return value switch
            {
                HumanStates.Idle => nameof(HumanStates.Idle),
                HumanStates.Working => nameof(HumanStates.Working),
                HumanStates.Sleeping => nameof(HumanStates.Sleeping),
                HumanStates.Eating => nameof(HumanStates.Eating),
                HumanStates.Dead => nameof(HumanStates.Dead),
                _ => value.ToString()
            };
        }

        /// <summary>Returns a boolean telling whether the value of this instance exists in the enumeration.</summary>
        /// <returns><c>true</c> if the value of this instance exists in the enumeration; <c>false</c> otherwise.</returns>
        public static bool IsDefined(this HumanStates value)
        {
            return HumanStatesValidation.IsDefined(value);
        }

        /// <summary>Determines whether one or more bit fields are set in the current instance.</summary>
        /// <param name="flag">An enumeration value.</param>
        /// <returns><see langword="true"/> if the bit field or bit fields that are set in flag are also set in the current instance; otherwise, <see langword="false"/>.</returns>
        public static bool HasFlagFast(this HumanStates value, HumanStates flag)
        {
            return (value & flag) == flag;
        }

        /// <summary>Calculates the number of characters produced by converting the specified value to string.</summary>
        /// <param name="value">The value to calculate the number of characters.</param>
        /// <returns>The number of characters produced by converting the specified value to string.</returns>
        public static int GetStringCount(this HumanStates value)
        {
            return value switch
            {
                HumanStates.Idle => 4,
                HumanStates.Working => 7,
                HumanStates.Sleeping => 8,
                HumanStates.Eating => 6,
                HumanStates.Dead => 4,
                0 => 1,
                _ => value.ToString().Length
            };
        }

        /// <summary>Calculates the number of bytes produced by encoding the specified value to UTF-8.</summary>
        /// <param name="value">The value to calculate the number of bytes.</param>
        /// <returns>The number of bytes produced by encoding the specified value to UTF-8.</returns>
        public static int GetUtf8ByteCount(this HumanStates value)
        {
            return value switch
            {
                HumanStates.Idle => 4,
                HumanStates.Working => 7,
                HumanStates.Sleeping => 8,
                HumanStates.Eating => 6,
                HumanStates.Dead => 4,
                0 => 1,
                _ => value.ToString().Length
            };
        }

        /// <summary>Tries to write the current value as string into the provided span of characters.</summary>
        /// <param name="value">The value to write to the provided span of characters.</param>
        /// <param name="destination">The span in which to write current value as a span of characters.</param>
        /// <param name="charsWritten">When this method returns, contains the number of characters that were written in <paramref name="destination"/>.</param>
        /// <returns><see langword="true"/> if the writing was successful; otherwise, <see langword="false"/>.</returns>
        public static bool TryWriteString(this HumanStates value, Span<char> destination, out int charsWritten)
        {
            string result = value switch
            {
                HumanStates.Idle => "Idle",
                HumanStates.Working => "Working",
                HumanStates.Sleeping => "Sleeping",
                HumanStates.Eating => "Eating",
                HumanStates.Dead => "Dead",
                0 => "0",
                _ => value.ToString()
            };

            if (result.Length > destination.Length)
            {
                charsWritten = 0;
                return false;
            }

            result.AsSpan().CopyTo(destination);
            charsWritten = result.Length;
            return true;
        }

        /// <summary>Tries to write the current value as UTF-8 into the provided span of bytes.</summary>
        /// <param name="value">The value to write to the provided span of bytes.</param>
        /// <param name="destination">The span in which to write current value as a span of bytes.</param>
        /// <param name="bytesWritten">When this method returns, contains the number of bytes that were written in <paramref name="destination"/>.</param>
        /// <returns><see langword="true"/> if the writing was successful; otherwise, <see langword="false"/>.</returns>
        public static bool TryWriteUtf8Bytes(this HumanStates value, Span<byte> destination, out int bytesWritten)
        {
            var bytes = value switch
            {
                HumanStates.Idle => "Idle"u8,
                HumanStates.Working => "Working"u8,
                HumanStates.Sleeping => "Sleeping"u8,
                HumanStates.Eating => "Eating"u8,
                HumanStates.Dead => "Dead"u8,
                0 => "0"u8,
                _ => ReadOnlySpan<byte>.Empty
            };

            if (bytes.IsEmpty)
            {
                string str = value.ToString();
                if (System.Text.Encoding.UTF8.GetByteCount(str) > destination.Length)
                {
                    bytesWritten = 0;
                    return false;
                }

                bytesWritten = System.Text.Encoding.UTF8.GetBytes(str.AsSpan(), destination);
                return true;
            }

            if (bytes.Length > destination.Length)
            {
                bytesWritten = 0;
                return false;
            }

            bytes.CopyTo(destination);
            bytesWritten = bytes.Length;
            return true;
        }

        /// <summary>Adds two enumerations and replaces the first integer with the sum, as an atomic operation.</summary>
        /// <param name="location">A variable containing the first value to be added.</param>
        /// <param name="value">The value to be added to the enumeration at <paramref name="location" />.</param>
        /// <returns>The new value that was stored at <paramref name="location" /> by this operation.</returns>
        public static HumanStates InterlockedAdd(this ref HumanStates location, int value)
        {
            ref int locationRaw = ref Unsafe.As<HumanStates, int>(ref location);
            int resultRaw = Interlocked.Add(ref locationRaw, value);
            return Unsafe.As<int, HumanStates>(ref resultRaw);
        }

        /// <summary>Decrements enumeration and stores the result, as an atomic operation.</summary>
        /// <param name="location">The variable whose value is to be decremented.</param>
        /// <returns>The value of the variable immediately after the decrement operation finished.</returns>
        public static HumanStates InterlockedDecrement(this ref HumanStates location)
        {
            ref int locationRaw = ref Unsafe.As<HumanStates, int>(ref location);
            int resultRaw = Interlocked.Decrement(ref locationRaw);
            return Unsafe.As<int, HumanStates>(ref resultRaw);
        }

        /// <summary>Increments enumeration and stores the result, as an atomic operation.</summary>
        /// <param name="location">The variable whose value is to be incremented.</param>
        /// <returns>The value of the variable immediately after the increment operation finished.</returns>
        public static HumanStates InterlockedIncrement(this ref HumanStates location)
        {
            ref int locationRaw = ref Unsafe.As<HumanStates, int>(ref location);
            int resultRaw = Interlocked.Increment(ref locationRaw);
            return Unsafe.As<int, HumanStates>(ref resultRaw);
        }

        /// <summary>Compares two enumerations for equality and, if they are equal, replaces the first value.</summary>
        /// <param name="location">The destination, whose value is compared with <paramref name="comparand" /> and possibly replaced.</param>
        /// <param name="value">The value that replaces the destination value if the comparison results in equality.</param>
        /// <param name="comparand">The value that is compared to the value at <paramref name="location" />.</param>
        /// <returns>The original value in <paramref name="location" />.</returns>
        public static HumanStates InterlockedCompareExchange(this ref HumanStates location, HumanStates value, HumanStates comparand)
        {
            ref int locationRaw = ref Unsafe.As<HumanStates, int>(ref location);
            int resultRaw = Interlocked.CompareExchange(ref locationRaw, Unsafe.As<HumanStates, int>(ref value), Unsafe.As<HumanStates, int>(ref comparand));
            return Unsafe.As<int, HumanStates>(ref resultRaw);
        }

        /// <summary>Sets an enumeration value to a specified value and returns the original value, as an atomic operation.</summary>
        /// <param name="location">The variable to set to the specified value.</param>
        /// <param name="value">The value to which the <paramref name="location" /> parameter is set.</param>
        /// <returns>The original value of <paramref name="location" />.</returns>
        public static HumanStates InterlockedExchange(this ref HumanStates location, HumanStates value)
        {
            ref int locationRaw = ref Unsafe.As<HumanStates, int>(ref location);
            int resultRaw = Interlocked.Exchange(ref locationRaw, Unsafe.As<HumanStates, int>(ref value));
            return Unsafe.As<int, HumanStates>(ref resultRaw);
        }
    }
}
