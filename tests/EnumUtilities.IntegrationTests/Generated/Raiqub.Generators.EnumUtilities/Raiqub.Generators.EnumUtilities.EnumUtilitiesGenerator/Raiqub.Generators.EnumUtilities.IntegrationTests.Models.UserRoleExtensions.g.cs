// <auto-generated />
#nullable enable

using System;
using System.Runtime.CompilerServices;
using System.Threading;

#pragma warning disable CS1591 // publicly visible type or member must be documented

namespace Raiqub.Generators.EnumUtilities.IntegrationTests.Models
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Raiqub.Generators.EnumUtilities", "1.6.0.0")]
    public static partial class UserRoleExtensions
    {
        /// <summary>Represents the largest possible number of bytes produced by encoding an <see cref="UserRole" /> value to UTF-8, based on defined members. This field is constant.</summary>
        public const int NameMaxBytesLength = 10;

        /// <summary>Represents the largest possible number of characters produced by converting an <see cref="UserRole" /> value to string, based on defined members. This field is constant.</summary>
        public const int NameMaxCharsLength = 10;

        /// <summary>Converts the value of this instance to its equivalent string representation.</summary>
        /// <returns>The string representation of the value of this instance.</returns>
        public static string ToStringFast(this UserRole value)
        {
            return value switch
            {
                UserRole.None => nameof(UserRole.None),
                UserRole.NormalUser => nameof(UserRole.NormalUser),
                UserRole.Custodian => nameof(UserRole.Custodian),
                UserRole.Finance => nameof(UserRole.Finance),
                UserRole.SuperUser => nameof(UserRole.SuperUser),
                UserRole.All => nameof(UserRole.All),
                _ => value.ToString()
            };
        }

        /// <summary>Returns a boolean telling whether the value of this instance exists in the enumeration.</summary>
        /// <returns><c>true</c> if the value of this instance exists in the enumeration; <c>false</c> otherwise.</returns>
        public static bool IsDefined(this UserRole value)
        {
            return UserRoleValidation.IsDefined(value);
        }

        /// <summary>Determines whether one or more bit fields are set in the current instance.</summary>
        /// <param name="flag">An enumeration value.</param>
        /// <returns><see langword="true"/> if the bit field or bit fields that are set in flag are also set in the current instance; otherwise, <see langword="false"/>.</returns>
        public static bool HasFlagFast(this UserRole value, UserRole flag)
        {
            return (value & flag) == flag;
        }

        /// <summary>Calculates the number of characters produced by converting the specified value to string.</summary>
        /// <param name="value">The value to calculate the number of characters.</param>
        /// <returns>The number of characters produced by converting the specified value to string.</returns>
        public static int GetStringCount(this UserRole value)
        {
            return value switch
            {
                UserRole.None => 4,
                UserRole.NormalUser => 10,
                UserRole.Custodian => 9,
                UserRole.Finance => 7,
                UserRole.SuperUser => 9,
                UserRole.All => 3,
                _ => value.ToString().Length
            };
        }

        /// <summary>Calculates the number of bytes produced by encoding the specified value to UTF-8.</summary>
        /// <param name="value">The value to calculate the number of bytes.</param>
        /// <returns>The number of bytes produced by encoding the specified value to UTF-8.</returns>
        public static int GetUtf8ByteCount(this UserRole value)
        {
            return value switch
            {
                UserRole.None => 4,
                UserRole.NormalUser => 10,
                UserRole.Custodian => 9,
                UserRole.Finance => 7,
                UserRole.SuperUser => 9,
                UserRole.All => 3,
                _ => value.ToString().Length
            };
        }

        /// <summary>Tries to write the current value as string into the provided span of characters.</summary>
        /// <param name="value">The value to write to the provided span of characters.</param>
        /// <param name="destination">The span in which to write current value as a span of characters.</param>
        /// <param name="charsWritten">When this method returns, contains the number of characters that were written in <paramref name="destination"/>.</param>
        /// <returns><see langword="true"/> if the writing was successful; otherwise, <see langword="false"/>.</returns>
        public static bool TryWriteString(this UserRole value, Span<char> destination, out int charsWritten)
        {
            string result = value switch
            {
                UserRole.None => "None",
                UserRole.NormalUser => "NormalUser",
                UserRole.Custodian => "Custodian",
                UserRole.Finance => "Finance",
                UserRole.SuperUser => "SuperUser",
                UserRole.All => "All",
                _ => value.ToString()
            };

            if (result.Length > destination.Length)
            {
                charsWritten = 0;
                return false;
            }

            result.AsSpan().CopyTo(destination);
            charsWritten = result.Length;
            return true;
        }

        /// <summary>Tries to write the current value as UTF-8 into the provided span of bytes.</summary>
        /// <param name="value">The value to write to the provided span of bytes.</param>
        /// <param name="destination">The span in which to write current value as a span of bytes.</param>
        /// <param name="bytesWritten">When this method returns, contains the number of bytes that were written in <paramref name="destination"/>.</param>
        /// <returns><see langword="true"/> if the writing was successful; otherwise, <see langword="false"/>.</returns>
        public static bool TryWriteUtf8Bytes(this UserRole value, Span<byte> destination, out int bytesWritten)
        {
            var bytes = value switch
            {
                UserRole.None => "None"u8,
                UserRole.NormalUser => "NormalUser"u8,
                UserRole.Custodian => "Custodian"u8,
                UserRole.Finance => "Finance"u8,
                UserRole.SuperUser => "SuperUser"u8,
                UserRole.All => "All"u8,
                _ => ReadOnlySpan<byte>.Empty
            };

            if (bytes.IsEmpty)
            {
                string str = value.ToString();
                if (System.Text.Encoding.UTF8.GetByteCount(str) > destination.Length)
                {
                    bytesWritten = 0;
                    return false;
                }

                bytesWritten = System.Text.Encoding.UTF8.GetBytes(str.AsSpan(), destination);
                return true;
            }

            if (bytes.Length > destination.Length)
            {
                bytesWritten = 0;
                return false;
            }

            bytes.CopyTo(destination);
            bytesWritten = bytes.Length;
            return true;
        }

    #if NET5_0_OR_GREATER
        /// <summary>Bitwise "ands" two enumerations and replaces the first value with the result, as an atomic operation.</summary>
        /// <param name="location">A variable containing the first value to be combined.</param>
        /// <param name="value">The value to be combined with the value at <paramref name="location" />.</param>
        /// <returns>The original value in <paramref name="location" />.</returns>
        public static UserRole InterlockedAnd(this ref UserRole location, UserRole value)
        {
            ref long locationRaw = ref Unsafe.As<UserRole, long>(ref location);
            long resultRaw = Interlocked.And(ref locationRaw, Unsafe.As<UserRole, long>(ref value));
            return Unsafe.As<long, UserRole>(ref resultRaw);
        }

        /// <summary>Bitwise "ors" two enumerations and replaces the first value with the result, as an atomic operation.</summary>
        /// <param name="location">A variable containing the first value to be combined.</param>
        /// <param name="value">The value to be combined with the value at <paramref name="location" />.</param>
        /// <returns>The original value in <paramref name="location" />.</returns>
        public static UserRole InterlockedOr(this ref UserRole location, UserRole value)
        {
            ref long locationRaw = ref Unsafe.As<UserRole, long>(ref location);
            long resultRaw = Interlocked.Or(ref locationRaw, Unsafe.As<UserRole, long>(ref value));
            return Unsafe.As<long, UserRole>(ref resultRaw);
        }
    #endif

        /// <summary>Compares two enumerations for equality and, if they are equal, replaces the first value.</summary>
        /// <param name="location">The destination, whose value is compared with <paramref name="comparand" /> and possibly replaced.</param>
        /// <param name="value">The value that replaces the destination value if the comparison results in equality.</param>
        /// <param name="comparand">The value that is compared to the value at <paramref name="location" />.</param>
        /// <returns>The original value in <paramref name="location" />.</returns>
        public static UserRole InterlockedCompareExchange(this ref UserRole location, UserRole value, UserRole comparand)
        {
            ref long locationRaw = ref Unsafe.As<UserRole, long>(ref location);
            long resultRaw = Interlocked.CompareExchange(ref locationRaw, Unsafe.As<UserRole, long>(ref value), Unsafe.As<UserRole, long>(ref comparand));
            return Unsafe.As<long, UserRole>(ref resultRaw);
        }

        /// <summary>Sets an enumeration value to a specified value and returns the original value, as an atomic operation.</summary>
        /// <param name="location">The variable to set to the specified value.</param>
        /// <param name="value">The value to which the <paramref name="location" /> parameter is set.</param>
        /// <returns>The original value of <paramref name="location" />.</returns>
        public static UserRole InterlockedExchange(this ref UserRole location, UserRole value)
        {
            ref long locationRaw = ref Unsafe.As<UserRole, long>(ref location);
            long resultRaw = Interlocked.Exchange(ref locationRaw, Unsafe.As<UserRole, long>(ref value));
            return Unsafe.As<long, UserRole>(ref resultRaw);
        }

        /// <summary>Returns a 64-bit enumeration value, loaded as an atomic operation.</summary>
        /// <param name="location">The 64-bit enumeration value to be loaded.</param>
        /// <returns>The loaded value.</returns>
        public static UserRole InterlockedRead(this ref UserRole location)
        {
            ref long locationRaw = ref Unsafe.As<UserRole, long>(ref location);
            long resultRaw = Interlocked.Read(ref locationRaw);
            return Unsafe.As<long, UserRole>(ref resultRaw);
        }
    }
}
