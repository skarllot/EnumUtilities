// <auto-generated />
#nullable enable

using System;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;

#pragma warning disable CS1591 // publicly visible type or member must be documented

namespace Raiqub.Generators.EnumUtilities.IntegrationTests.Models
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Raiqub.Generators.EnumUtilities", "1.6.0.0")]
    public static partial class UserRoleFactory
    {
        /// <summary>
        /// Converts the string representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
        /// <param name="comparisonType">One of the enumeration values that specifies how the strings will be compared.</param>
        /// <param name="result">
        /// When this method returns, result contains an object of type UserRole whose value is represented by value
        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
        /// underlying type of UserRole. Note that this value need not be a member of the UserRole enumeration.
        /// </param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        /// <exception cref="ArgumentException"><paramref name="comparisonType"/> is not a <see cref="StringComparison"/> value.</exception>
        public static bool TryParse(
            [NotNullWhen(true)] string? name,
            StringComparison comparisonType,
            out UserRole result)
        {
            switch (name)
            {
                case { } s when s.Equals(nameof(UserRole.None), comparisonType):
                    result = UserRole.None;
                    return true;
                case { } s when s.Equals(nameof(UserRole.NormalUser), comparisonType):
                    result = UserRole.NormalUser;
                    return true;
                case { } s when s.Equals(nameof(UserRole.Custodian), comparisonType):
                    result = UserRole.Custodian;
                    return true;
                case { } s when s.Equals(nameof(UserRole.Finance), comparisonType):
                    result = UserRole.Finance;
                    return true;
                case { } s when s.Equals(nameof(UserRole.SuperUser), comparisonType):
                    result = UserRole.SuperUser;
                    return true;
                case { } s when s.Equals(nameof(UserRole.All), comparisonType):
                    result = UserRole.All;
                    return true;
                case { } s when TryParseNumeric(s, comparisonType, out ulong val):
                    result = (UserRole)val;
                    return true;
                default:
                    return Enum.TryParse(name, out result);
            }
        }

        /// <summary>
        /// Converts the string representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
        /// <param name="result">
        /// When this method returns, result contains an object of type UserRole whose value is represented by value
        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
        /// underlying type of UserRole. Note that this value need not be a member of the UserRole enumeration.
        /// </param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
            [NotNullWhen(true)] string? name,
            out UserRole result)
        {
            switch (name)
            {
                case nameof(UserRole.None):
                    result = UserRole.None;
                    return true;
                case nameof(UserRole.NormalUser):
                    result = UserRole.NormalUser;
                    return true;
                case nameof(UserRole.Custodian):
                    result = UserRole.Custodian;
                    return true;
                case nameof(UserRole.Finance):
                    result = UserRole.Finance;
                    return true;
                case nameof(UserRole.SuperUser):
                    result = UserRole.SuperUser;
                    return true;
                case nameof(UserRole.All):
                    result = UserRole.All;
                    return true;
                case { } s when TryParseNumeric(s, StringComparison.Ordinal, out ulong val):
                    result = (UserRole)val;
                    return true;
                default:
                    return Enum.TryParse(name, out result);
            }
        }

        /// <summary>
        /// Converts the string representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
        /// <param name="result">
        /// When this method returns, result contains an object of type UserRole whose value is represented by value
        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
        /// underlying type of UserRole. Note that this value need not be a member of the UserRole enumeration.
        /// </param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParseIgnoreCase(
            [NotNullWhen(true)] string? name,
            out UserRole result)
        {
            return TryParse(name, StringComparison.OrdinalIgnoreCase, out result);
        }

        /// <summary>
        /// Converts the string representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
        /// <returns>
        /// Contains an object of type UserRole whose value is represented by value if the parse operation succeeds.
        /// If the parse operation fails, result contains <c>null</c> value.
        /// </returns>
        public static UserRole? TryParse(string? name)
        {
            return TryParse(name, out UserRole result) ? result : null;
        }

        /// <summary>
        /// Converts the string representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
        /// <returns>
        /// Contains an object of type UserRole whose value is represented by value if the parse operation succeeds.
        /// If the parse operation fails, result contains <c>null</c> value.
        /// </returns>
        public static UserRole? TryParseIgnoreCase(string? name)
        {
            return TryParse(name, StringComparison.OrdinalIgnoreCase, out UserRole result) ? result : null;
        }

        /// <summary>
        /// Converts the string representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
        /// <param name="comparisonType">One of the enumeration values that specifies how the strings will be compared.</param>
        /// <returns>
        /// Contains an object of type UserRole whose value is represented by value if the parse operation succeeds.
        /// If the parse operation fails, result contains <c>null</c> value.
        /// </returns>
        /// <exception cref="ArgumentException"><paramref name="comparisonType"/> is not a <see cref="StringComparison"/> value.</exception>
        public static UserRole? TryParse(string? name, StringComparison comparisonType)
        {
            return TryParse(name, comparisonType, out UserRole result) ? result : null;
        }

        /// <summary>Retrieves an array of the values of the constants in the UserRole enumeration.</summary>
        /// <returns>An array that contains the values of the constants in UserRole.</returns>
        public static UserRole[] GetValues()
        {
            return new[]
            {
                UserRole.None,
                UserRole.NormalUser,
                UserRole.Custodian,
                UserRole.Finance,
                UserRole.SuperUser,
                UserRole.All,
            };
        }

        /// <summary>Retrieves an array of the names of the constants in UserRole enumeration.</summary>
        /// <returns>A string array of the names of the constants in UserRole.</returns>
        public static string[] GetNames()
        {
            return new[]
            {
                nameof(UserRole.None),
                nameof(UserRole.NormalUser),
                nameof(UserRole.Custodian),
                nameof(UserRole.Finance),
                nameof(UserRole.SuperUser),
                nameof(UserRole.All),
            };
        }

        private static bool TryParseNumeric(
            string name,
            StringComparison comparisonType,
            out ulong result)
        {
            switch (comparisonType)
            {
                case StringComparison.CurrentCulture:
                case StringComparison.CurrentCultureIgnoreCase:
                    return ulong.TryParse(name, NumberStyles.Integer, NumberFormatInfo.CurrentInfo, out result);
                case StringComparison.InvariantCulture:
                case StringComparison.InvariantCultureIgnoreCase:
                case StringComparison.Ordinal:
                case StringComparison.OrdinalIgnoreCase:
                    return ulong.TryParse(name, NumberStyles.Integer, NumberFormatInfo.InvariantInfo, out result);
                default:
                    return ulong.TryParse(name, out result);
            }
        }
    }
}
