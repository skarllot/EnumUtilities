// <auto-generated />
#nullable enable

using System;
using System.Runtime.CompilerServices;
using Raiqub.Generators.EnumUtilities.Formatters;
using Raiqub.Generators.EnumUtilities.Parsers;

#pragma warning disable CS1591 // publicly visible type or member must be documented

[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("Raiqub.Generators.EnumUtilities", "1.8.0.0")]
public static partial class NoNamespaceMetadata
{
    /// <summary>Provides constant values for <see cref="NoNamespace" /> members names.</summary>
    public static partial class Name
    {
        /// <summary>Represents the largest possible number of characters produced by converting an <see cref="NoNamespace" /> value to string, based on defined members. This field is constant.</summary>
        public const int MaxCharsLength = 4;

        /// <summary>The string representation of <see cref="NoNamespace.Zero" /> name.</summary>
        public const string Zero = "Zero";

        /// <summary>The string representation of <see cref="NoNamespace.One" /> name.</summary>
        public const string One = "One";

        /// <summary>The string representation of <see cref="NoNamespace.Two" /> name.</summary>
        public const string Two = "Two";
    }

    /// <summary>Provides static values for <see cref="NoNamespace" /> UTF-8 encoded members names.</summary>
    public static partial class Utf8Name
    {
        /// <summary>Represents the largest possible number of bytes produced by converting an <see cref="NoNamespace" /> value to UTF-8 string, based on defined members. This field is constant.</summary>
        public const int MaxBytesLength = 4;

        /// <summary>The UTF-8 representation of <see cref="NoNamespace.Zero" /> name.</summary>
        public static ReadOnlySpan<byte> Zero => new byte[4] { 90, 101, 114, 111 };

        /// <summary>The UTF-8 representation of <see cref="NoNamespace.One" /> name.</summary>
        public static ReadOnlySpan<byte> One => new byte[3] { 79, 110, 101 };

        /// <summary>The UTF-8 representation of <see cref="NoNamespace.Two" /> name.</summary>
        public static ReadOnlySpan<byte> Two => new byte[3] { 84, 119, 111 };
    }


    /// <summary>Provides support for parsing <see cref="NoNamespace"/> values.</summary>
    internal sealed partial class StringParser
        : IEnumParser<int>
    {
        /// <summary>Gets the singleton instance of the <see cref="StringParser"/> class.</summary>
        public static StringParser Instance = new StringParser();

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int BitwiseOr(int value1, int value2) => unchecked((int)(value1 | value2));

        /// <inheritdoc />
        public bool TryParseNumber(ReadOnlySpan<char> value, out int result) => EnumNumericParser.TryParse(value, out result);

        /// <inheritdoc />
        public bool TryParseSingleName(ReadOnlySpan<char> value, StringComparison comparisonType, out int result)
        {
            if (value.IsEmpty)
            {
                result = 0;
                return false;
            }

            switch (value[0])
            {
                case 'Z':
                case 'z':
                    switch (value)
                    {
                        case { } when value.Equals("Zero", comparisonType):
                            result = 0;
                            return true;
                    }
                    goto default;
                case 'O':
                case 'o':
                    switch (value)
                    {
                        case { } when value.Equals("One", comparisonType):
                            result = 1;
                            return true;
                    }
                    goto default;
                case 'T':
                case 't':
                    switch (value)
                    {
                        case { } when value.Equals("Two", comparisonType):
                            result = 2;
                            return true;
                    }
                    goto default;
                default:
                    result = 0;
                    return false;
            }
        }
    }
}
