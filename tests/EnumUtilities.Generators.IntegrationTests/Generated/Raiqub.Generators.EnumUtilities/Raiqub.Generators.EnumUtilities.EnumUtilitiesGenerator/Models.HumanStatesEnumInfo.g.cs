// <auto-generated />
#nullable enable

using System;
using System.Runtime.CompilerServices;
using Raiqub.Generators.EnumUtilities.Formatters;
using Raiqub.Generators.EnumUtilities.Parsers;

#pragma warning disable CS1591 // publicly visible type or member must be documented

namespace Raiqub.Generators.EnumUtilities.IntegrationTests.Models
{
    /// <summary>Provides metadata for <see cref="HumanStates" /> enumeration.</summary>
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Raiqub.Generators.EnumUtilities", "1.12.0.0")]
    public static partial class HumanStatesMetadata
    {
        /// <summary>Provides constant values for <see cref="HumanStates" /> members names.</summary>
        public static partial class Name
        {
            /// <summary>Represents the largest possible number of characters produced by converting a <see cref="HumanStates" /> value to string, based on defined members.</summary>
            public const int MaxCharsLength = 8;

            /// <summary>The string representation of <see cref="HumanStates.Idle" /> name.</summary>
            public const string Idle = "Idle";

            /// <summary>The string representation of <see cref="HumanStates.Working" /> name.</summary>
            public const string Working = "Working";

            /// <summary>The string representation of <see cref="HumanStates.Sleeping" /> name.</summary>
            public const string Sleeping = "Sleeping";

            /// <summary>The string representation of <see cref="HumanStates.Eating" /> name.</summary>
            public const string Eating = "Eating";

            /// <summary>The string representation of <see cref="HumanStates.Dead" /> name.</summary>
            public const string Dead = "Dead";

            /// <summary>The string representation of <see cref="HumanStates.Relaxing" /> name.</summary>
            public const string Relaxing = "Relaxing";
        }

        /// <summary>Provides static values for <see cref="HumanStates" /> UTF-8 encoded members names.</summary>
        public static partial class Utf8Name
        {
            /// <summary>Represents the largest possible number of bytes produced by converting a <see cref="HumanStates" /> value to UTF-8 string, based on defined members.</summary>
            public const int MaxBytesLength = 8;

            /// <summary>The UTF-8 representation of <see cref="HumanStates.Idle" /> name.</summary>
            public static ReadOnlySpan<byte> Idle => new byte[4] { 73, 100, 108, 101 };

            /// <summary>The UTF-8 representation of <see cref="HumanStates.Working" /> name.</summary>
            public static ReadOnlySpan<byte> Working => new byte[7] { 87, 111, 114, 107, 105, 110, 103 };

            /// <summary>The UTF-8 representation of <see cref="HumanStates.Sleeping" /> name.</summary>
            public static ReadOnlySpan<byte> Sleeping => new byte[8] { 83, 108, 101, 101, 112, 105, 110, 103 };

            /// <summary>The UTF-8 representation of <see cref="HumanStates.Eating" /> name.</summary>
            public static ReadOnlySpan<byte> Eating => new byte[6] { 69, 97, 116, 105, 110, 103 };

            /// <summary>The UTF-8 representation of <see cref="HumanStates.Dead" /> name.</summary>
            public static ReadOnlySpan<byte> Dead => new byte[4] { 68, 101, 97, 100 };

            /// <summary>The UTF-8 representation of <see cref="HumanStates.Relaxing" /> name.</summary>
            public static ReadOnlySpan<byte> Relaxing => new byte[8] { 82, 101, 108, 97, 120, 105, 110, 103 };
        }
    }
}
