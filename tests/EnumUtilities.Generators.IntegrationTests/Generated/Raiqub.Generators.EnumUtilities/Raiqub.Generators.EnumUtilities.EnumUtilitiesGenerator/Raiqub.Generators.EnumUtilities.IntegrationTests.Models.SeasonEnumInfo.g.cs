// <auto-generated />
#nullable enable

using System;
using System.Runtime.CompilerServices;
using Raiqub.Generators.EnumUtilities.Formatters;
using Raiqub.Generators.EnumUtilities.Parsers;

#pragma warning disable CS1591 // publicly visible type or member must be documented

namespace Raiqub.Generators.EnumUtilities.IntegrationTests.Models
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Raiqub.Generators.EnumUtilities", "1.8.0.0")]
    public static partial class SeasonMetadata
    {
        /// <summary>Provides support for formatting <see cref="Season"/> values.</summary>
        internal sealed partial class StringFormatter : IEnumFormatter<int>
        {
            /// <summary>Gets the singleton instance of the <see cref="StringFormatter"/> class.</summary>
            public static StringFormatter Instance = new StringFormatter();

            /// <inheritdoc />
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public int GetStringLengthForNumber(int value) => EnumNumericFormatter.GetStringLength(value);

            /// <inheritdoc />
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public string GetStringForNumber(int value) => value.ToString();

            /// <inheritdoc />
            public int? TryGetStringLengthForMember(int value)
            {
                return value switch
                {
                    1 => 6,
                    2 => 6,
                    3 => 6,
                    4 => 6,
                    _ => null
                };
            }

            /// <inheritdoc />
            public string? TryGetStringForMember(int value)
            {
                return value switch
                {
                    1 => "Spring",
                    2 => "Summer",
                    3 => "Autumn",
                    4 => "Winter",
                    _ => null
                };
            }
        }

        /// <summary>Provides support for parsing <see cref="Season"/> values.</summary>
        internal sealed partial class StringParser
            : IEnumParser<int>
        {
            /// <summary>Gets the singleton instance of the <see cref="StringParser"/> class.</summary>
            public static StringParser Instance = new StringParser();

            /// <inheritdoc />
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public int BitwiseOr(int value1, int value2) => unchecked((int)(value1 | value2));

            /// <inheritdoc />
            public bool TryParseNumber(ReadOnlySpan<char> value, out int result) => EnumNumericParser.TryParse(value, out result);

            /// <inheritdoc />
            public bool TryParseSingleName(ReadOnlySpan<char> value, StringComparison comparisonType, out int result)
            {
                if (value.IsEmpty)
                {
                    result = 0;
                    return false;
                }

                switch (value[0])
                {
                    case 'S':
                    case 's':
                        switch (value)
                        {
                            case { } when value.Equals("Spring", comparisonType):
                                result = 1;
                                return true;
                            case { } when value.Equals("Summer", comparisonType):
                                result = 2;
                                return true;
                            default:
                                result = 0;
                                return false;
                        }
                    case 'A':
                    case 'a':
                        switch (value)
                        {
                            case { } when value.Equals("Autumn", comparisonType):
                                result = 3;
                                return true;
                            default:
                                result = 0;
                                return false;
                        }
                    case 'W':
                    case 'w':
                        switch (value)
                        {
                            case { } when value.Equals("Winter", comparisonType):
                                result = 4;
                                return true;
                            default:
                                result = 0;
                                return false;
                        }
                    default:
                        result = 0;
                        return false;
                }
            }
        }
    }
}
