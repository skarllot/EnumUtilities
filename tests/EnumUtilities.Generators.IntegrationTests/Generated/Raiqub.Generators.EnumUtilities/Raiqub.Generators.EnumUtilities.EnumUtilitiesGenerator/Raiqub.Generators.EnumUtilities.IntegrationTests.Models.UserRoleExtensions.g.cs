// <auto-generated />
#nullable enable

using System;
using System.Runtime.CompilerServices;
using System.Threading;
using Raiqub.Generators.EnumUtilities.Formatters;

#pragma warning disable CS1591 // publicly visible type or member must be documented

namespace Raiqub.Generators.EnumUtilities.IntegrationTests.Models
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Raiqub.Generators.EnumUtilities", "1.8.0.0")]
    public static partial class UserRoleExtensions
    {
        /// <summary>Converts the value of this instance to its equivalent string representation.</summary>
        /// <returns>The string representation of the value of this instance.</returns>
        public static string ToStringFast(this UserRole value)
        {
            return FormatFlagNames((ulong)value)
                ?? ((ulong)value).ToString();
        }

        /// <summary>Determines whether one or more bit fields are set in the current instance.</summary>
        /// <param name="flag">An enumeration value.</param>
        /// <returns><see langword="true"/> if the bit field or bit fields that are set in flag are also set in the current instance; otherwise, <see langword="false"/>.</returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool HasFlagFast(this UserRole value, UserRole flag)
        {
            return (value & flag) == flag;
        }

        /// <summary>Calculates the number of characters produced by converting the specified value to string.</summary>
        /// <param name="value">The value to calculate the number of characters.</param>
        /// <returns>The number of characters produced by converting the specified value to string.</returns>
        public static int GetStringLength(this UserRole value)
        {
            return FormatFlagNamesLength((ulong)value)
                ?? EnumNumericFormatter.GetStringLength((ulong)value);
        }

        /// <summary>Returns a boolean telling whether the value of this instance exists in the enumeration.</summary>
        /// <returns><c>true</c> if the value of this instance exists in the enumeration; <c>false</c> otherwise.</returns>
        public static bool IsDefined(this UserRole value)
        {
            return (ulong)value switch
            {
                0 => true,
                1 => true,
                2 => true,
                4 => true,
                6 => true,
                7 => true,
                _ => false
            };
        }

        private static int? FormatFlagNamesLength(ulong value)
        {
            int? fastResult = GetNameLengthInlined(value);
            if (fastResult is not null)
            {
                return fastResult.Value;
            }

            if (value == 0)
            {
                return 1;
            }

            int count = 0, foundItemsCount = 0;
            if (true)
            {
                if ((value & 7) == 7)
                {
                    value -= 7;
                    count = checked(count + 3);
                    foundItemsCount++;
                    if (value == 0) goto CountLength;
                }
                if ((value & 6) == 6)
                {
                    value -= 6;
                    count = checked(count + 9);
                    foundItemsCount++;
                    if (value == 0) goto CountLength;
                }
                if ((value & 4) == 4)
                {
                    value -= 4;
                    count = checked(count + 7);
                    foundItemsCount++;
                    if (value == 0) goto CountLength;
                }
                if ((value & 2) == 2)
                {
                    value -= 2;
                    count = checked(count + 9);
                    foundItemsCount++;
                    if (value == 0) goto CountLength;
                }
                if ((value & 1) == 1)
                {
                    value -= 1;
                    count = checked(count + 10);
                    foundItemsCount++;
                    if (value == 0) goto CountLength;
                }
            }

            if (value != 0)
            {
                return null;
            }

    CountLength:
            const int separatorStringLength = 2;
            return checked(count + (separatorStringLength * (foundItemsCount - 1)));
        }

        private static string? FormatFlagNames(ulong value)
        {
            string? result = GetNameInlined(value);
            if (result is null)
            {
                var rented = System.Buffers.ArrayPool<string>.Shared.Rent(3);
                try
                {
                    Span<string> foundItems = new Span<string>(rented, 0, 3);
                    if (TryFindFlagsNames(value, foundItems, out int foundItemsCount, out int resultLength))
                    {
                        result = EnumStringFormatter.WriteMultipleFoundFlagsNames(foundItems, foundItemsCount, resultLength);
                    }
                }
                finally
                {
                    System.Buffers.ArrayPool<string>.Shared.Return(rented);
                }
            }

            return result;
        }

        private static bool TryFindFlagsNames(ulong value, Span<string> foundItems, out int foundItemsCount, out int resultLength)
        {
            resultLength = 0;
            foundItemsCount = 0;
            if (true)
            {
                if ((value & 7) == 7)
                {
                    value -= 7;
                    resultLength = checked(resultLength + 3);
                    foundItems[foundItemsCount++] = "All";
                    if (value == 0) return true;
                }
                if ((value & 6) == 6)
                {
                    value -= 6;
                    resultLength = checked(resultLength + 9);
                    foundItems[foundItemsCount++] = "SuperUser";
                    if (value == 0) return true;
                }
                if ((value & 4) == 4)
                {
                    value -= 4;
                    resultLength = checked(resultLength + 7);
                    foundItems[foundItemsCount++] = "Finance";
                    if (value == 0) return true;
                }
                if ((value & 2) == 2)
                {
                    value -= 2;
                    resultLength = checked(resultLength + 9);
                    foundItems[foundItemsCount++] = "Custodian";
                    if (value == 0) return true;
                }
                if ((value & 1) == 1)
                {
                    value -= 1;
                    resultLength = checked(resultLength + 10);
                    foundItems[foundItemsCount++] = "NormalUser";
                    if (value == 0) return true;
                }
            }

            return value == 0;
        }

        private static int? GetNameLengthInlined(ulong value)
        {
            return value switch
            {
                0 => 4,
                1 => 10,
                2 => 9,
                4 => 7,
                6 => 9,
                7 => 3,
                _ => null
            };
        }

        private static string? GetNameInlined(ulong value)
        {
            return value switch
            {
                0 => "None",
                1 => "NormalUser",
                2 => "Custodian",
                4 => "Finance",
                6 => "SuperUser",
                7 => "All",
                _ => null
            };
        }

    #if NET5_0_OR_GREATER
        /// <summary>Bitwise "ands" two enumerations and replaces the first value with the result, as an atomic operation.</summary>
        /// <param name="location">A variable containing the first value to be combined.</param>
        /// <param name="value">The value to be combined with the value at <paramref name="location" />.</param>
        /// <returns>The original value in <paramref name="location" />.</returns>
        public static UserRole InterlockedAnd(this ref UserRole location, UserRole value)
        {
            ref long locationRaw = ref Unsafe.As<UserRole, long>(ref location);
            long resultRaw = Interlocked.And(ref locationRaw, Unsafe.As<UserRole, long>(ref value));
            return Unsafe.As<long, UserRole>(ref resultRaw);
        }

        /// <summary>Bitwise "ors" two enumerations and replaces the first value with the result, as an atomic operation.</summary>
        /// <param name="location">A variable containing the first value to be combined.</param>
        /// <param name="value">The value to be combined with the value at <paramref name="location" />.</param>
        /// <returns>The original value in <paramref name="location" />.</returns>
        public static UserRole InterlockedOr(this ref UserRole location, UserRole value)
        {
            ref long locationRaw = ref Unsafe.As<UserRole, long>(ref location);
            long resultRaw = Interlocked.Or(ref locationRaw, Unsafe.As<UserRole, long>(ref value));
            return Unsafe.As<long, UserRole>(ref resultRaw);
        }
    #endif

        /// <summary>Compares two enumerations for equality and, if they are equal, replaces the first value.</summary>
        /// <param name="location">The destination, whose value is compared with <paramref name="comparand" /> and possibly replaced.</param>
        /// <param name="value">The value that replaces the destination value if the comparison results in equality.</param>
        /// <param name="comparand">The value that is compared to the value at <paramref name="location" />.</param>
        /// <returns>The original value in <paramref name="location" />.</returns>
        public static UserRole InterlockedCompareExchange(this ref UserRole location, UserRole value, UserRole comparand)
        {
            ref long locationRaw = ref Unsafe.As<UserRole, long>(ref location);
            long resultRaw = Interlocked.CompareExchange(ref locationRaw, Unsafe.As<UserRole, long>(ref value), Unsafe.As<UserRole, long>(ref comparand));
            return Unsafe.As<long, UserRole>(ref resultRaw);
        }

        /// <summary>Sets an enumeration value to a specified value and returns the original value, as an atomic operation.</summary>
        /// <param name="location">The variable to set to the specified value.</param>
        /// <param name="value">The value to which the <paramref name="location" /> parameter is set.</param>
        /// <returns>The original value of <paramref name="location" />.</returns>
        public static UserRole InterlockedExchange(this ref UserRole location, UserRole value)
        {
            ref long locationRaw = ref Unsafe.As<UserRole, long>(ref location);
            long resultRaw = Interlocked.Exchange(ref locationRaw, Unsafe.As<UserRole, long>(ref value));
            return Unsafe.As<long, UserRole>(ref resultRaw);
        }

        /// <summary>Returns a 64-bit enumeration value, loaded as an atomic operation.</summary>
        /// <param name="location">The 64-bit enumeration value to be loaded.</param>
        /// <returns>The loaded value.</returns>
        public static UserRole InterlockedRead(this ref UserRole location)
        {
            ref long locationRaw = ref Unsafe.As<UserRole, long>(ref location);
            long resultRaw = Interlocked.Read(ref locationRaw);
            return Unsafe.As<long, UserRole>(ref resultRaw);
        }

        public static string ToEnumMemberValue(this UserRole value)
        {
            return FormatFlagEnumMemberValues((ulong)value)
                ?? ((ulong)value).ToString();
        }

        public static int GetEnumMemberValueStringLength(this UserRole value)
        {
            return FormatFlagEnumMemberValuesLength((ulong)value)
                ?? EnumNumericFormatter.GetStringLength((ulong)value);
        }

        private static int? FormatFlagEnumMemberValuesLength(ulong value)
        {
            int? fastResult = GetEnumMemberValueLengthInlined(value);
            if (fastResult is not null)
            {
                return fastResult.Value;
            }

            if (value == 0)
            {
                return 1;
            }

            int count = 0, foundItemsCount = 0;
            if (true)
            {
                if ((value & 7) == 7)
                {
                    value -= 7;
                    count = checked(count + 3);
                    foundItemsCount++;
                    if (value == 0) goto CountLength;
                }
                if ((value & 6) == 6)
                {
                    value -= 6;
                    count = checked(count + 10);
                    foundItemsCount++;
                    if (value == 0) goto CountLength;
                }
                if ((value & 4) == 4)
                {
                    value -= 4;
                    count = checked(count + 7);
                    foundItemsCount++;
                    if (value == 0) goto CountLength;
                }
                if ((value & 2) == 2)
                {
                    value -= 2;
                    count = checked(count + 9);
                    foundItemsCount++;
                    if (value == 0) goto CountLength;
                }
                if ((value & 1) == 1)
                {
                    value -= 1;
                    count = checked(count + 11);
                    foundItemsCount++;
                    if (value == 0) goto CountLength;
                }
            }

            if (value != 0)
            {
                return null;
            }

    CountLength:
            const int separatorStringLength = 2;
            return checked(count + (separatorStringLength * (foundItemsCount - 1)));
        }

        private static string? FormatFlagEnumMemberValues(ulong value)
        {
            string? result = GetEnumMemberValueInlined(value);
            if (result is null)
            {
                var rented = System.Buffers.ArrayPool<string>.Shared.Rent(3);
                try
                {
                    Span<string> foundItems = new Span<string>(rented, 0, 3);
                    if (TryFindFlagsEnumMemberValues(value, foundItems, out int foundItemsCount, out int resultLength))
                    {
                        result = EnumStringFormatter.WriteMultipleFoundFlagsNames(foundItems, foundItemsCount, resultLength);
                    }
                }
                finally
                {
                    System.Buffers.ArrayPool<string>.Shared.Return(rented);
                }
            }

            return result;
        }

        private static bool TryFindFlagsEnumMemberValues(ulong value, Span<string> foundItems, out int foundItemsCount, out int resultLength)
        {
            resultLength = 0;
            foundItemsCount = 0;
            if (true)
            {
                if ((value & 7) == 7)
                {
                    value -= 7;
                    resultLength = checked(resultLength + 3);
                    foundItems[foundItemsCount++] = "All";
                    if (value == 0) return true;
                }
                if ((value & 6) == 6)
                {
                    value -= 6;
                    resultLength = checked(resultLength + 10);
                    foundItems[foundItemsCount++] = "Super User";
                    if (value == 0) return true;
                }
                if ((value & 4) == 4)
                {
                    value -= 4;
                    resultLength = checked(resultLength + 7);
                    foundItems[foundItemsCount++] = "Finance";
                    if (value == 0) return true;
                }
                if ((value & 2) == 2)
                {
                    value -= 2;
                    resultLength = checked(resultLength + 9);
                    foundItems[foundItemsCount++] = "Custodian";
                    if (value == 0) return true;
                }
                if ((value & 1) == 1)
                {
                    value -= 1;
                    resultLength = checked(resultLength + 11);
                    foundItems[foundItemsCount++] = "Normal User";
                    if (value == 0) return true;
                }
            }

            return value == 0;
        }

        private static int? GetEnumMemberValueLengthInlined(ulong value)
        {
            return value switch
            {
                0 => 4,
                1 => 11,
                2 => 9,
                4 => 7,
                6 => 10,
                7 => 3,
                _ => null
            };
        }

        private static string? GetEnumMemberValueInlined(ulong value)
        {
            return value switch
            {
                0 => "None",
                1 => "Normal User",
                2 => "Custodian",
                4 => "Finance",
                6 => "Super User",
                7 => "All",
                _ => null
            };
        }
    }
}
