// <auto-generated />
#nullable enable

using System;
using System.Runtime.CompilerServices;
using System.Threading;
using Raiqub.Generators.EnumUtilities.Formatters;

#pragma warning disable CS1591 // publicly visible type or member must be documented

namespace Raiqub.Generators.EnumUtilities.IntegrationTests.Models
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Raiqub.Generators.EnumUtilities", "1.8.0.0")]
    public static partial class UserRoleExtensions
    {
        private static readonly UserRoleMetadata.StringFormatter s_stringFormatter = UserRoleMetadata.StringFormatter.Instance;

        /// <summary>Represents the largest possible number of characters produced by converting an <see cref="UserRole" /> value to string, based on defined members. This field is constant.</summary>
        public const int NameMaxCharsLength = 10;

        /// <summary>Converts the value of this instance to its equivalent string representation.</summary>
        /// <returns>The string representation of the value of this instance.</returns>
        public static string ToStringFast(this UserRole value)
        {
            return EnumStringFormatter.GetString((ulong)value, s_stringFormatter);
        }

        /// <summary>Determines whether one or more bit fields are set in the current instance.</summary>
        /// <param name="flag">An enumeration value.</param>
        /// <returns><see langword="true"/> if the bit field or bit fields that are set in flag are also set in the current instance; otherwise, <see langword="false"/>.</returns>
        public static bool HasFlagFast(this UserRole value, UserRole flag)
        {
            return (value & flag) == flag;
        }

        /// <summary>Calculates the number of characters produced by converting the specified value to string.</summary>
        /// <param name="value">The value to calculate the number of characters.</param>
        /// <returns>The number of characters produced by converting the specified value to string.</returns>
        public static int GetStringLength(this UserRole value)
        {
            return EnumStringFormatter.GetStringLength((ulong)value, s_stringFormatter);
        }

        /// <summary>Returns a boolean telling whether the value of this instance exists in the enumeration.</summary>
        /// <returns><c>true</c> if the value of this instance exists in the enumeration; <c>false</c> otherwise.</returns>
        public static bool IsDefined(this UserRole value)
        {
            return UserRoleValidation.IsDefined(value);
        }

    #if NET5_0_OR_GREATER
        /// <summary>Bitwise "ands" two enumerations and replaces the first value with the result, as an atomic operation.</summary>
        /// <param name="location">A variable containing the first value to be combined.</param>
        /// <param name="value">The value to be combined with the value at <paramref name="location" />.</param>
        /// <returns>The original value in <paramref name="location" />.</returns>
        public static UserRole InterlockedAnd(this ref UserRole location, UserRole value)
        {
            ref long locationRaw = ref Unsafe.As<UserRole, long>(ref location);
            long resultRaw = Interlocked.And(ref locationRaw, Unsafe.As<UserRole, long>(ref value));
            return Unsafe.As<long, UserRole>(ref resultRaw);
        }

        /// <summary>Bitwise "ors" two enumerations and replaces the first value with the result, as an atomic operation.</summary>
        /// <param name="location">A variable containing the first value to be combined.</param>
        /// <param name="value">The value to be combined with the value at <paramref name="location" />.</param>
        /// <returns>The original value in <paramref name="location" />.</returns>
        public static UserRole InterlockedOr(this ref UserRole location, UserRole value)
        {
            ref long locationRaw = ref Unsafe.As<UserRole, long>(ref location);
            long resultRaw = Interlocked.Or(ref locationRaw, Unsafe.As<UserRole, long>(ref value));
            return Unsafe.As<long, UserRole>(ref resultRaw);
        }
    #endif

        /// <summary>Compares two enumerations for equality and, if they are equal, replaces the first value.</summary>
        /// <param name="location">The destination, whose value is compared with <paramref name="comparand" /> and possibly replaced.</param>
        /// <param name="value">The value that replaces the destination value if the comparison results in equality.</param>
        /// <param name="comparand">The value that is compared to the value at <paramref name="location" />.</param>
        /// <returns>The original value in <paramref name="location" />.</returns>
        public static UserRole InterlockedCompareExchange(this ref UserRole location, UserRole value, UserRole comparand)
        {
            ref long locationRaw = ref Unsafe.As<UserRole, long>(ref location);
            long resultRaw = Interlocked.CompareExchange(ref locationRaw, Unsafe.As<UserRole, long>(ref value), Unsafe.As<UserRole, long>(ref comparand));
            return Unsafe.As<long, UserRole>(ref resultRaw);
        }

        /// <summary>Sets an enumeration value to a specified value and returns the original value, as an atomic operation.</summary>
        /// <param name="location">The variable to set to the specified value.</param>
        /// <param name="value">The value to which the <paramref name="location" /> parameter is set.</param>
        /// <returns>The original value of <paramref name="location" />.</returns>
        public static UserRole InterlockedExchange(this ref UserRole location, UserRole value)
        {
            ref long locationRaw = ref Unsafe.As<UserRole, long>(ref location);
            long resultRaw = Interlocked.Exchange(ref locationRaw, Unsafe.As<UserRole, long>(ref value));
            return Unsafe.As<long, UserRole>(ref resultRaw);
        }

        /// <summary>Returns a 64-bit enumeration value, loaded as an atomic operation.</summary>
        /// <param name="location">The 64-bit enumeration value to be loaded.</param>
        /// <returns>The loaded value.</returns>
        public static UserRole InterlockedRead(this ref UserRole location)
        {
            ref long locationRaw = ref Unsafe.As<UserRole, long>(ref location);
            long resultRaw = Interlocked.Read(ref locationRaw);
            return Unsafe.As<long, UserRole>(ref resultRaw);
        }
    }
}
