// <auto-generated />
#nullable enable

using System;
using System.Runtime.CompilerServices;
using System.Threading;
using Raiqub.Generators.EnumUtilities.Formatters;

#pragma warning disable CS1591 // publicly visible type or member must be documented

namespace Raiqub.Generators.EnumUtilities.IntegrationTests.Models
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Raiqub.Generators.EnumUtilities", "1.8.0.0")]
    public static partial class UserRoleExtensions
    {
        /// <summary>Represents the largest possible number of characters produced by converting an <see cref="UserRole" /> value to string, based on defined members. This field is constant.</summary>
        public const int NameMaxCharsLength = 10;

        /// <summary>Converts the value of this instance to its equivalent string representation.</summary>
        /// <returns>The string representation of the value of this instance.</returns>
        public static string ToStringFast(this UserRole value)
        {
            return EnumStringFormatter.GetString((ulong)value, UserRoleStringFormatter.Instance);
        }

        /// <summary>Determines whether one or more bit fields are set in the current instance.</summary>
        /// <param name="flag">An enumeration value.</param>
        /// <returns><see langword="true"/> if the bit field or bit fields that are set in flag are also set in the current instance; otherwise, <see langword="false"/>.</returns>
        public static bool HasFlagFast(this UserRole value, UserRole flag)
        {
            return (value & flag) == flag;
        }

        /// <summary>Calculates the number of characters produced by converting the specified value to string.</summary>
        /// <param name="value">The value to calculate the number of characters.</param>
        /// <returns>The number of characters produced by converting the specified value to string.</returns>
        public static int GetStringCount(this UserRole value)
        {
            return EnumStringFormatter.GetStringCount((ulong)value, UserRoleStringFormatter.Instance);
        }

        /// <summary>Returns a boolean telling whether the value of this instance exists in the enumeration.</summary>
        /// <returns><c>true</c> if the value of this instance exists in the enumeration; <c>false</c> otherwise.</returns>
        public static bool IsDefined(this UserRole value)
        {
            return UserRoleValidation.IsDefined(value);
        }

        private sealed partial class UserRoleStringFormatter : IEnumFormatter<ulong>
        {
            public static UserRoleStringFormatter Instance = new UserRoleStringFormatter();

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public int GetStringCountForNumber(ulong value) => EnumNumericFormatter.GetStringLength(value);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public string GetStringForNumber(ulong value) => value.ToString();

            public int? TryGetStringCountForMember(ulong value)
            {
                if (value == 0)
                {
                    return 4;
                }

                int count = 0, foundItemsCount = 0;
                if ((value & 7) == 7)
                {
                    value -= 7;
                    count = checked(count + 3);
                    foundItemsCount++;
                }
                if ((value & 6) == 6)
                {
                    value -= 6;
                    count = checked(count + 9);
                    foundItemsCount++;
                }
                if ((value & 4) == 4)
                {
                    value -= 4;
                    count = checked(count + 7);
                    foundItemsCount++;
                }
                if ((value & 2) == 2)
                {
                    value -= 2;
                    count = checked(count + 9);
                    foundItemsCount++;
                }
                if ((value & 1) == 1)
                {
                    value -= 1;
                    count = checked(count + 10);
                    foundItemsCount++;
                }

                if (value != 0)
                {
                    return null;
                }

                const int separatorStringLength = 2;
                return checked(count + (separatorStringLength * (foundItemsCount - 1)));
            }

            public string? TryGetStringForMember(ulong value)
            {
                if (value == 0)
                {
                    return "None";
                }

                Span<ulong> foundItems = stackalloc ulong[3];
                int count = 0, foundItemsCount = 0;
                if ((value & 7) == 7)
                {
                    value -= 7;
                    count = checked(count + 3);
                    foundItems[foundItemsCount++] = 7;
                }
                if ((value & 6) == 6)
                {
                    value -= 6;
                    count = checked(count + 9);
                    foundItems[foundItemsCount++] = 6;
                }
                if ((value & 4) == 4)
                {
                    value -= 4;
                    count = checked(count + 7);
                    foundItems[foundItemsCount++] = 4;
                }
                if ((value & 2) == 2)
                {
                    value -= 2;
                    count = checked(count + 9);
                    foundItems[foundItemsCount++] = 2;
                }
                if ((value & 1) == 1)
                {
                    value -= 1;
                    count = checked(count + 10);
                    foundItems[foundItemsCount++] = 1;
                }

                if (value != 0)
                {
                    return null;
                }

                if (foundItemsCount == 1)
                {
                    return GetStringForSingleMember(foundItems[0]);
                }

                return WriteMultipleFoundFlagsNames(count, foundItemsCount, foundItems);
            }

            private string WriteMultipleFoundFlagsNames(int count, int foundItemsCount, Span<ulong> foundItems)
            {
                const int separatorStringLength = 2;
                const char enumSeparatorChar = ',';
                var strlen = checked(count + (separatorStringLength * (foundItemsCount - 1)));
                Span<char> result = strlen <= 128
                    ? stackalloc char[128].Slice(0, strlen)
                    : new char[strlen];
                var span = result;

                string name = GetStringForSingleMember(foundItems[--foundItemsCount]);
                name.AsSpan().CopyTo(span);
                span = span.Slice(name.Length);
                while (--foundItemsCount >= 0)
                {
                    span[0] = enumSeparatorChar;
                    span[1] = ' ';
                    span = span.Slice(2);

                    name = GetStringForSingleMember(foundItems[foundItemsCount]);
                    name.CopyTo(span);
                    span = span.Slice(name.Length);
                }

                return result.ToString();
            }

            private string GetStringForSingleMember(ulong value)
            {
                return value switch
                {
                    0 => "None",
                    1 => "NormalUser",
                    2 => "Custodian",
                    4 => "Finance",
                    6 => "SuperUser",
                    7 => "All",
                    _ => throw new ArgumentOutOfRangeException()
                };
            }
        }

    #if NET5_0_OR_GREATER
        /// <summary>Bitwise "ands" two enumerations and replaces the first value with the result, as an atomic operation.</summary>
        /// <param name="location">A variable containing the first value to be combined.</param>
        /// <param name="value">The value to be combined with the value at <paramref name="location" />.</param>
        /// <returns>The original value in <paramref name="location" />.</returns>
        public static UserRole InterlockedAnd(this ref UserRole location, UserRole value)
        {
            ref long locationRaw = ref Unsafe.As<UserRole, long>(ref location);
            long resultRaw = Interlocked.And(ref locationRaw, Unsafe.As<UserRole, long>(ref value));
            return Unsafe.As<long, UserRole>(ref resultRaw);
        }

        /// <summary>Bitwise "ors" two enumerations and replaces the first value with the result, as an atomic operation.</summary>
        /// <param name="location">A variable containing the first value to be combined.</param>
        /// <param name="value">The value to be combined with the value at <paramref name="location" />.</param>
        /// <returns>The original value in <paramref name="location" />.</returns>
        public static UserRole InterlockedOr(this ref UserRole location, UserRole value)
        {
            ref long locationRaw = ref Unsafe.As<UserRole, long>(ref location);
            long resultRaw = Interlocked.Or(ref locationRaw, Unsafe.As<UserRole, long>(ref value));
            return Unsafe.As<long, UserRole>(ref resultRaw);
        }
    #endif

        /// <summary>Compares two enumerations for equality and, if they are equal, replaces the first value.</summary>
        /// <param name="location">The destination, whose value is compared with <paramref name="comparand" /> and possibly replaced.</param>
        /// <param name="value">The value that replaces the destination value if the comparison results in equality.</param>
        /// <param name="comparand">The value that is compared to the value at <paramref name="location" />.</param>
        /// <returns>The original value in <paramref name="location" />.</returns>
        public static UserRole InterlockedCompareExchange(this ref UserRole location, UserRole value, UserRole comparand)
        {
            ref long locationRaw = ref Unsafe.As<UserRole, long>(ref location);
            long resultRaw = Interlocked.CompareExchange(ref locationRaw, Unsafe.As<UserRole, long>(ref value), Unsafe.As<UserRole, long>(ref comparand));
            return Unsafe.As<long, UserRole>(ref resultRaw);
        }

        /// <summary>Sets an enumeration value to a specified value and returns the original value, as an atomic operation.</summary>
        /// <param name="location">The variable to set to the specified value.</param>
        /// <param name="value">The value to which the <paramref name="location" /> parameter is set.</param>
        /// <returns>The original value of <paramref name="location" />.</returns>
        public static UserRole InterlockedExchange(this ref UserRole location, UserRole value)
        {
            ref long locationRaw = ref Unsafe.As<UserRole, long>(ref location);
            long resultRaw = Interlocked.Exchange(ref locationRaw, Unsafe.As<UserRole, long>(ref value));
            return Unsafe.As<long, UserRole>(ref resultRaw);
        }

        /// <summary>Returns a 64-bit enumeration value, loaded as an atomic operation.</summary>
        /// <param name="location">The 64-bit enumeration value to be loaded.</param>
        /// <returns>The loaded value.</returns>
        public static UserRole InterlockedRead(this ref UserRole location)
        {
            ref long locationRaw = ref Unsafe.As<UserRole, long>(ref location);
            long resultRaw = Interlocked.Read(ref locationRaw);
            return Unsafe.As<long, UserRole>(ref resultRaw);
        }
    }
}
