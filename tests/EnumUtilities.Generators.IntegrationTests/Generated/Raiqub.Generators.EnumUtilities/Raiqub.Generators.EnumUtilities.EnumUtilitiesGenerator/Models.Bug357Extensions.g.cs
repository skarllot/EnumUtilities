// <auto-generated />
#nullable enable

using System;
using System.Runtime.CompilerServices;
using System.Threading;
using Raiqub.Generators.EnumUtilities.Formatters;

#pragma warning disable CS1591 // publicly visible type or member must be documented

namespace Raiqub.Generators.EnumUtilities.IntegrationTests.Models
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Raiqub.Generators.EnumUtilities", "1.12.0.0")]
    public static partial class Bug357Extensions
    {
        /// <summary>Converts the value of this instance to its equivalent string representation.</summary>
        /// <returns>The string representation of the value of this instance.</returns>
        public static string ToStringFast(this Bug357 value)
        {
            return GetNameInlined((int)value)
                ?? ((int)value).ToString();
        }

        /// <summary>Calculates the number of characters produced by converting the specified value to string.</summary>
        /// <param name="value">The value to calculate the number of characters.</param>
        /// <returns>The number of characters produced by converting the specified value to string.</returns>
        public static int GetStringLength(this Bug357 value)
        {
            return GetNameLengthInlined((int)value)
                ?? EnumNumericFormatter.GetStringLength((int)value);
        }

        /// <summary>Returns a boolean telling whether the value of this instance exists in the enumeration.</summary>
        /// <returns><c>true</c> if the value of this instance exists in the enumeration; <c>false</c> otherwise.</returns>
        public static bool IsDefined(this Bug357 value)
        {
            return (int)value switch
            {
                0 => true,
                1 => true,
                2 => true,
                3 => true,
                4 => true,
                5 => true,
                _ => false
            };
        }

        private static int? GetNameLengthInlined(int value)
        {
            return value switch
            {
                0 => 3,
                1 => 3,
                2 => 3,
                3 => 4,
                4 => 4,
                5 => 4,
                _ => null
            };
        }

        private static string? GetNameInlined(int value)
        {
            return value switch
            {
                0 => "Py1",
                1 => "pay",
                2 => "PAY",
                3 => "John",
                4 => "john",
                5 => "JOHN",
                _ => null
            };
        }

        /// <summary>Adds two enumerations and replaces the first integer with the sum, as an atomic operation.</summary>
        /// <param name="location">A variable containing the first value to be added.</param>
        /// <param name="value">The value to be added to the enumeration at <paramref name="location" />.</param>
        /// <returns>The new value that was stored at <paramref name="location" /> by this operation.</returns>
        public static Bug357 InterlockedAdd(this ref Bug357 location, int value)
        {
            ref int locationRaw = ref Unsafe.As<Bug357, int>(ref location);
            int resultRaw = Interlocked.Add(ref locationRaw, value);
            return Unsafe.As<int, Bug357>(ref resultRaw);
        }

        /// <summary>Decrements enumeration and stores the result, as an atomic operation.</summary>
        /// <param name="location">The variable whose value is to be decremented.</param>
        /// <returns>The value of the variable immediately after the decrement operation finished.</returns>
        public static Bug357 InterlockedDecrement(this ref Bug357 location)
        {
            ref int locationRaw = ref Unsafe.As<Bug357, int>(ref location);
            int resultRaw = Interlocked.Decrement(ref locationRaw);
            return Unsafe.As<int, Bug357>(ref resultRaw);
        }

        /// <summary>Increments enumeration and stores the result, as an atomic operation.</summary>
        /// <param name="location">The variable whose value is to be incremented.</param>
        /// <returns>The value of the variable immediately after the increment operation finished.</returns>
        public static Bug357 InterlockedIncrement(this ref Bug357 location)
        {
            ref int locationRaw = ref Unsafe.As<Bug357, int>(ref location);
            int resultRaw = Interlocked.Increment(ref locationRaw);
            return Unsafe.As<int, Bug357>(ref resultRaw);
        }

        /// <summary>Compares two enumerations for equality and, if they are equal, replaces the first value.</summary>
        /// <param name="location">The destination, whose value is compared with <paramref name="comparand" /> and possibly replaced.</param>
        /// <param name="value">The value that replaces the destination value if the comparison results in equality.</param>
        /// <param name="comparand">The value that is compared to the value at <paramref name="location" />.</param>
        /// <returns>The original value in <paramref name="location" />.</returns>
        public static Bug357 InterlockedCompareExchange(this ref Bug357 location, Bug357 value, Bug357 comparand)
        {
            ref int locationRaw = ref Unsafe.As<Bug357, int>(ref location);
            int resultRaw = Interlocked.CompareExchange(ref locationRaw, Unsafe.As<Bug357, int>(ref value), Unsafe.As<Bug357, int>(ref comparand));
            return Unsafe.As<int, Bug357>(ref resultRaw);
        }

        /// <summary>Sets an enumeration value to a specified value and returns the original value, as an atomic operation.</summary>
        /// <param name="location">The variable to set to the specified value.</param>
        /// <param name="value">The value to which the <paramref name="location" /> parameter is set.</param>
        /// <returns>The original value of <paramref name="location" />.</returns>
        public static Bug357 InterlockedExchange(this ref Bug357 location, Bug357 value)
        {
            ref int locationRaw = ref Unsafe.As<Bug357, int>(ref location);
            int resultRaw = Interlocked.Exchange(ref locationRaw, Unsafe.As<Bug357, int>(ref value));
            return Unsafe.As<int, Bug357>(ref resultRaw);
        }

        /// <summary>
        /// Provides pattern matching functionality for the <see cref="Bug357"/> enum by returning the corresponding value based on the enum value.
        /// </summary>
        /// <typeparam name="TResult">The type of the result to return for each member match.</typeparam>
        /// <param name="value">The <see cref="Bug357"/> enum value to match against.</param>
        /// <param name="Py1">The value to return when the enum value is Py1.</param>
        /// <param name="pay">The value to return when the enum value is pay.</param>
        /// <param name="PAY">The value to return when the enum value is PAY.</param>
        /// <param name="John">The value to return when the enum value is John.</param>
        /// <param name="john">The value to return when the enum value is john.</param>
        /// <param name="JOHN">The value to return when the enum value is JOHN.</param>
        /// <returns>The corresponding result value based on the enum value.</returns>
        /// <exception cref="ArgumentOutOfRangeException">Thrown when the enum value does not match any of the expected member values.</exception>
        public static TResult Match<TResult>(
            this Bug357 value,
            TResult Py1,
            TResult pay,
            TResult PAY,
            TResult John,
            TResult john,
            TResult JOHN)
        {
            return (int)value switch
            {
                0 => Py1,
                1 => pay,
                2 => PAY,
                3 => John,
                4 => john,
                5 => JOHN,
                _ => throw new ArgumentOutOfRangeException(nameof(value), value, null)
            };
        }

        /// <summary>
        /// Provides pattern matching functionality for the <see cref="Bug357"/> enum by executing the corresponding function based on the enum value.
        /// </summary>
        /// <typeparam name="TResult">The type of the result to return from the executed function.</typeparam>
        /// <param name="value">The <see cref="Bug357"/> enum value to match against.</param>
        /// <param name="Py1">The function to execute when the enum value is Py1.</param>
        /// <param name="pay">The function to execute when the enum value is pay.</param>
        /// <param name="PAY">The function to execute when the enum value is PAY.</param>
        /// <param name="John">The function to execute when the enum value is John.</param>
        /// <param name="john">The function to execute when the enum value is john.</param>
        /// <param name="JOHN">The function to execute when the enum value is JOHN.</param>
        /// <returns>The result of executing the corresponding function based on the enum value.</returns>
        /// <exception cref="ArgumentOutOfRangeException">Thrown when the enum value does not match any of the expected <see cref="Bug357"/> values.</exception>
        public static TResult Match<TResult>(
            this Bug357 value,
            Func<Bug357, TResult> Py1,
            Func<Bug357, TResult> pay,
            Func<Bug357, TResult> PAY,
            Func<Bug357, TResult> John,
            Func<Bug357, TResult> john,
            Func<Bug357, TResult> JOHN)
        {
            return (int)value switch
            {
                0 => Py1((Bug357)value),
                1 => pay((Bug357)value),
                2 => PAY((Bug357)value),
                3 => John((Bug357)value),
                4 => john((Bug357)value),
                5 => JOHN((Bug357)value),
                _ => throw new ArgumentOutOfRangeException(nameof(value), value, null)
            };
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static string? ToJsonString(this Bug357 value)
        {
            return GetJsonStringInlined((int)value);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static int? GetJsonStringLength(this Bug357 value)
        {
            return GetJsonStringLengthInlined((int)value);
        }

        private static int? GetJsonStringLengthInlined(int value)
        {
            return value switch
            {
                0 => 3,
                1 => 3,
                2 => 3,
                3 => 4,
                4 => 4,
                5 => 4,
                _ => null
            };
        }

        private static string? GetJsonStringInlined(int value)
        {
            return value switch
            {
                0 => "Py1",
                1 => "pay",
                2 => "PAY",
                3 => "John",
                4 => "john",
                5 => "JOHN",
                _ => null
            };
        }
    }
}
