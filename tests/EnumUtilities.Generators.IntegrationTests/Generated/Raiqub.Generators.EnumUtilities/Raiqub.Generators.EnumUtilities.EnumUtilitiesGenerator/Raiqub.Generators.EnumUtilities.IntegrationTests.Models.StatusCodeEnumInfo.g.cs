// <auto-generated />
#nullable enable

using System;
using System.Runtime.CompilerServices;
using Raiqub.Generators.EnumUtilities.Formatters;
using Raiqub.Generators.EnumUtilities.Parsers;

#pragma warning disable CS1591 // publicly visible type or member must be documented

namespace Raiqub.Generators.EnumUtilities.IntegrationTests.Models
{
    /// <summary>Provides metadata for <see cref="StatusCode" /> enumeration.</summary>
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Raiqub.Generators.EnumUtilities", "1.10.0.0")]
    public static partial class StatusCodeMetadata
    {
        /// <summary>Provides constant values for <see cref="StatusCode" /> members names.</summary>
        public static partial class Name
        {
            /// <summary>Represents the largest possible number of characters produced by converting a <see cref="StatusCode" /> value to string, based on defined members.</summary>
            public const int MaxCharsLength = 14;

            /// <summary>The string representation of <see cref="StatusCode.Unknown" /> name.</summary>
            public const string Unknown = "Unknown";

            /// <summary>The string representation of <see cref="StatusCode.Success" /> name.</summary>
            public const string Success = "Success";

            /// <summary>The string representation of <see cref="StatusCode.Error" /> name.</summary>
            public const string Error = "Error";

            /// <summary>The string representation of <see cref="StatusCode.NotFound" /> name.</summary>
            public const string NotFound = "NotFound";

            /// <summary>The string representation of <see cref="StatusCode.Timeout" /> name.</summary>
            public const string Timeout = "Timeout";

            /// <summary>The string representation of <see cref="StatusCode.Unauthorized" /> name.</summary>
            public const string Unauthorized = "Unauthorized";

            /// <summary>The string representation of <see cref="StatusCode.Forbidden" /> name.</summary>
            public const string Forbidden = "Forbidden";

            /// <summary>The string representation of <see cref="StatusCode.Conflict" /> name.</summary>
            public const string Conflict = "Conflict";

            /// <summary>The string representation of <see cref="StatusCode.Gone" /> name.</summary>
            public const string Gone = "Gone";

            /// <summary>The string representation of <see cref="StatusCode.InvalidRequest" /> name.</summary>
            public const string InvalidRequest = "InvalidRequest";

            /// <summary>The string representation of <see cref="StatusCode.ServerError" /> name.</summary>
            public const string ServerError = "ServerError";
        }

        /// <summary>Provides static values for <see cref="StatusCode" /> UTF-8 encoded members names.</summary>
        public static partial class Utf8Name
        {
            /// <summary>Represents the largest possible number of bytes produced by converting a <see cref="StatusCode" /> value to UTF-8 string, based on defined members.</summary>
            public const int MaxBytesLength = 14;

            /// <summary>The UTF-8 representation of <see cref="StatusCode.Unknown" /> name.</summary>
            public static ReadOnlySpan<byte> Unknown => new byte[7] { 85, 110, 107, 110, 111, 119, 110 };

            /// <summary>The UTF-8 representation of <see cref="StatusCode.Success" /> name.</summary>
            public static ReadOnlySpan<byte> Success => new byte[7] { 83, 117, 99, 99, 101, 115, 115 };

            /// <summary>The UTF-8 representation of <see cref="StatusCode.Error" /> name.</summary>
            public static ReadOnlySpan<byte> Error => new byte[5] { 69, 114, 114, 111, 114 };

            /// <summary>The UTF-8 representation of <see cref="StatusCode.NotFound" /> name.</summary>
            public static ReadOnlySpan<byte> NotFound => new byte[8] { 78, 111, 116, 70, 111, 117, 110, 100 };

            /// <summary>The UTF-8 representation of <see cref="StatusCode.Timeout" /> name.</summary>
            public static ReadOnlySpan<byte> Timeout => new byte[7] { 84, 105, 109, 101, 111, 117, 116 };

            /// <summary>The UTF-8 representation of <see cref="StatusCode.Unauthorized" /> name.</summary>
            public static ReadOnlySpan<byte> Unauthorized => new byte[12] { 85, 110, 97, 117, 116, 104, 111, 114, 105, 122, 101, 100 };

            /// <summary>The UTF-8 representation of <see cref="StatusCode.Forbidden" /> name.</summary>
            public static ReadOnlySpan<byte> Forbidden => new byte[9] { 70, 111, 114, 98, 105, 100, 100, 101, 110 };

            /// <summary>The UTF-8 representation of <see cref="StatusCode.Conflict" /> name.</summary>
            public static ReadOnlySpan<byte> Conflict => new byte[8] { 67, 111, 110, 102, 108, 105, 99, 116 };

            /// <summary>The UTF-8 representation of <see cref="StatusCode.Gone" /> name.</summary>
            public static ReadOnlySpan<byte> Gone => new byte[4] { 71, 111, 110, 101 };

            /// <summary>The UTF-8 representation of <see cref="StatusCode.InvalidRequest" /> name.</summary>
            public static ReadOnlySpan<byte> InvalidRequest => new byte[14] { 73, 110, 118, 97, 108, 105, 100, 82, 101, 113, 117, 101, 115, 116 };

            /// <summary>The UTF-8 representation of <see cref="StatusCode.ServerError" /> name.</summary>
            public static ReadOnlySpan<byte> ServerError => new byte[11] { 83, 101, 114, 118, 101, 114, 69, 114, 114, 111, 114 };
        }

        /// <summary>Provides constant values for <see cref="StatusCode" /> serialized members values.</summary>
        public static partial class SerializedValue
        {
            /// <summary>Represents the largest possible number of characters produced by serializing a <see cref="StatusCode" /> value to string, based on defined members.</summary>
            public const int MaxCharsLength = 14;

            /// <summary>The string representation of <see cref="StatusCode.Unknown" /> serialized value.</summary>
            public const string Unknown = "Unknown";

            /// <summary>The string representation of <see cref="StatusCode.Success" /> serialized value.</summary>
            public const string Success = "Success";

            /// <summary>The string representation of <see cref="StatusCode.Error" /> serialized value.</summary>
            public const string Error = "Error";

            /// <summary>The string representation of <see cref="StatusCode.NotFound" /> serialized value.</summary>
            public const string NotFound = "Not Found";

            /// <summary>The string representation of <see cref="StatusCode.Timeout" /> serialized value.</summary>
            public const string Timeout = "Timeout";

            /// <summary>The string representation of <see cref="StatusCode.Unauthorized" /> serialized value.</summary>
            public const string Unauthorized = "Unauthorized";

            /// <summary>The string representation of <see cref="StatusCode.Forbidden" /> serialized value.</summary>
            public const string Forbidden = "Forbidden";

            /// <summary>The string representation of <see cref="StatusCode.Conflict" /> serialized value.</summary>
            public const string Conflict = "Conflict";

            /// <summary>The string representation of <see cref="StatusCode.Gone" /> serialized value.</summary>
            public const string Gone = "Gone";

            /// <summary>The string representation of <see cref="StatusCode.InvalidRequest" /> serialized value.</summary>
            public const string InvalidRequest = "InvalidRequest";

            /// <summary>The string representation of <see cref="StatusCode.ServerError" /> serialized value.</summary>
            public const string ServerError = "ServerError";
        }

        /// <summary>Provides static values for <see cref="StatusCode" /> UTF-8 encoded serialized members values.</summary>
        public static partial class Utf8SerializedValue
        {
            /// <summary>Represents the largest possible number of bytes produced by serializing a <see cref="StatusCode" /> value to UTF-8 string, based on defined members.</summary>
            public const int MaxBytesLength = 14;

            /// <summary>The UTF-8 representation of <see cref="StatusCode.Unknown" /> serialized value.</summary>
            public static ReadOnlySpan<byte> Unknown => new byte[7] { 85, 110, 107, 110, 111, 119, 110 };

            /// <summary>The UTF-8 representation of <see cref="StatusCode.Success" /> serialized value.</summary>
            public static ReadOnlySpan<byte> Success => new byte[7] { 83, 117, 99, 99, 101, 115, 115 };

            /// <summary>The UTF-8 representation of <see cref="StatusCode.Error" /> serialized value.</summary>
            public static ReadOnlySpan<byte> Error => new byte[5] { 69, 114, 114, 111, 114 };

            /// <summary>The UTF-8 representation of <see cref="StatusCode.NotFound" /> serialized value.</summary>
            public static ReadOnlySpan<byte> NotFound => new byte[9] { 78, 111, 116, 32, 70, 111, 117, 110, 100 };

            /// <summary>The UTF-8 representation of <see cref="StatusCode.Timeout" /> serialized value.</summary>
            public static ReadOnlySpan<byte> Timeout => new byte[7] { 84, 105, 109, 101, 111, 117, 116 };

            /// <summary>The UTF-8 representation of <see cref="StatusCode.Unauthorized" /> serialized value.</summary>
            public static ReadOnlySpan<byte> Unauthorized => new byte[12] { 85, 110, 97, 117, 116, 104, 111, 114, 105, 122, 101, 100 };

            /// <summary>The UTF-8 representation of <see cref="StatusCode.Forbidden" /> serialized value.</summary>
            public static ReadOnlySpan<byte> Forbidden => new byte[9] { 70, 111, 114, 98, 105, 100, 100, 101, 110 };

            /// <summary>The UTF-8 representation of <see cref="StatusCode.Conflict" /> serialized value.</summary>
            public static ReadOnlySpan<byte> Conflict => new byte[8] { 67, 111, 110, 102, 108, 105, 99, 116 };

            /// <summary>The UTF-8 representation of <see cref="StatusCode.Gone" /> serialized value.</summary>
            public static ReadOnlySpan<byte> Gone => new byte[4] { 71, 111, 110, 101 };

            /// <summary>The UTF-8 representation of <see cref="StatusCode.InvalidRequest" /> serialized value.</summary>
            public static ReadOnlySpan<byte> InvalidRequest => new byte[14] { 73, 110, 118, 97, 108, 105, 100, 82, 101, 113, 117, 101, 115, 116 };

            /// <summary>The UTF-8 representation of <see cref="StatusCode.ServerError" /> serialized value.</summary>
            public static ReadOnlySpan<byte> ServerError => new byte[11] { 83, 101, 114, 118, 101, 114, 69, 114, 114, 111, 114 };
        }
    }
}
