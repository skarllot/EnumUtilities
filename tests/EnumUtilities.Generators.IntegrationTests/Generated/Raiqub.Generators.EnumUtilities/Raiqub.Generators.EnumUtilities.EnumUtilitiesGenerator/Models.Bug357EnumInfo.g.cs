// <auto-generated />
#nullable enable

using System;
using System.Runtime.CompilerServices;
using Raiqub.Generators.EnumUtilities.Formatters;
using Raiqub.Generators.EnumUtilities.Parsers;

#pragma warning disable CS1591 // publicly visible type or member must be documented

namespace Raiqub.Generators.EnumUtilities.IntegrationTests.Models
{
    /// <summary>Provides metadata for <see cref="Bug357" /> enumeration.</summary>
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Raiqub.Generators.EnumUtilities", "1.11.0.0")]
    public static partial class Bug357Metadata
    {
        /// <summary>Provides constant values for <see cref="Bug357" /> members names.</summary>
        public static partial class Name
        {
            /// <summary>Represents the largest possible number of characters produced by converting a <see cref="Bug357" /> value to string, based on defined members.</summary>
            public const int MaxCharsLength = 4;

            /// <summary>The string representation of <see cref="Bug357.Py1" /> name.</summary>
            public const string Py1 = "Py1";

            /// <summary>The string representation of <see cref="Bug357.pay" /> name.</summary>
            public const string pay = "pay";

            /// <summary>The string representation of <see cref="Bug357.PAY" /> name.</summary>
            public const string PAY = "PAY";

            /// <summary>The string representation of <see cref="Bug357.John" /> name.</summary>
            public const string John = "John";

            /// <summary>The string representation of <see cref="Bug357.john" /> name.</summary>
            public const string john = "john";

            /// <summary>The string representation of <see cref="Bug357.JOHN" /> name.</summary>
            public const string JOHN = "JOHN";
        }

        /// <summary>Provides static values for <see cref="Bug357" /> UTF-8 encoded members names.</summary>
        public static partial class Utf8Name
        {
            /// <summary>Represents the largest possible number of bytes produced by converting a <see cref="Bug357" /> value to UTF-8 string, based on defined members.</summary>
            public const int MaxBytesLength = 4;

            /// <summary>The UTF-8 representation of <see cref="Bug357.Py1" /> name.</summary>
            public static ReadOnlySpan<byte> Py1 => new byte[3] { 80, 121, 49 };

            /// <summary>The UTF-8 representation of <see cref="Bug357.pay" /> name.</summary>
            public static ReadOnlySpan<byte> pay => new byte[3] { 112, 97, 121 };

            /// <summary>The UTF-8 representation of <see cref="Bug357.PAY" /> name.</summary>
            public static ReadOnlySpan<byte> PAY => new byte[3] { 80, 65, 89 };

            /// <summary>The UTF-8 representation of <see cref="Bug357.John" /> name.</summary>
            public static ReadOnlySpan<byte> John => new byte[4] { 74, 111, 104, 110 };

            /// <summary>The UTF-8 representation of <see cref="Bug357.john" /> name.</summary>
            public static ReadOnlySpan<byte> john => new byte[4] { 106, 111, 104, 110 };

            /// <summary>The UTF-8 representation of <see cref="Bug357.JOHN" /> name.</summary>
            public static ReadOnlySpan<byte> JOHN => new byte[4] { 74, 79, 72, 78 };
        }
    }
}
