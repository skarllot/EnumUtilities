// <auto-generated />
#nullable enable

using System;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Runtime.CompilerServices;
using Raiqub.Generators.EnumUtilities.Parsers;

#pragma warning disable CS1591 // publicly visible type or member must be documented

namespace Raiqub.Generators.EnumUtilities.IntegrationTests.Models
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Raiqub.Generators.EnumUtilities", "1.10.0.0")]
    public static partial class SeasonFactory
    {

        /// <summary>
        /// Converts the string representation of the serialized JSON value to an equivalent enumerated object.
        /// </summary>
        /// <param name="value">The string representation of the enumeration serialized JSON value to convert.</param>
        /// <param name="ignoreCase"><see langword="true"/> to ignore case; <see langword="false"/> to regard case.</param>
        /// <returns>The value represented by the specified serialized value. Note that this value need not be a member of the Season enumeration.</returns>
        /// <exception cref="ArgumentNullException"><paramref name="value"/> is <see langword="null"/>.</exception>
        /// <exception cref="ArgumentException"><paramref name="value"/> is empty or does not represent a valid value.</exception>
        public static Season ParseJsonString(string value, bool ignoreCase = false)
        {
            if (value is null) ThrowHelper.ThrowArgumentNullException(nameof(value));
            TryParseJsonString(value.AsSpan(), ignoreCase ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal, throwOnFailure: true, out var result);
            return (Season)result;
        }

        /// <summary>
        /// Converts the string representation of the serialized JSON value to an equivalent enumerated object.
        /// </summary>
        /// <param name="value">The string representation of the enumeration serialized JSON value to convert.</param>
        /// <param name="ignoreCase"><see langword="true"/> to ignore case; <see langword="false"/> to regard case.</param>
        /// <returns>The value represented by the specified serialized value. Note that this value need not be a member of the Season enumeration.</returns>
        /// <exception cref="ArgumentException"><paramref name="value"/> is empty or does not represent a valid value.</exception>
        public static Season ParseJsonString(ReadOnlySpan<char> value, bool ignoreCase = false)
        {
            TryParseJsonString(value, ignoreCase ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal, throwOnFailure: true, out var result);
            return (Season)result;
        }

        /// <summary>
        /// Converts the string representation of the serialized JSON value to an equivalent enumerated object.
        /// </summary>
        /// <param name="value">The string representation of the enumeration serialized JSON value to convert.</param>
        /// <param name="ignoreCase"><see langword="true"/> to ignore case; <see langword="false"/> to regard case.</param>
        /// <returns>The value represented by the specified serialized value or null. Note that this value need not be a member of the Season enumeration.</returns>
        /// <exception cref="ArgumentException"><paramref name="value"/> is empty or does not represent a valid value.</exception>
        [return: NotNullIfNotNull("value")]
        public static Season? ParseJsonStringOrNull(string? value, bool ignoreCase = false)
        {
            if (value is null) return null;
            TryParseJsonString(value.AsSpan(), ignoreCase ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal, throwOnFailure: true, out var result);
            return (Season)result;
        }

        /// <summary>
        /// Converts the string representation of the serialized JSON value to an equivalent enumerated object.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="value">The string representation of the enumeration serialized JSON value to convert.</param>
        /// <param name="ignoreCase"><see langword="true"/> to ignore case; <see langword="false"/> to regard case.</param>
        /// <param name="result">
        /// When this method returns, result contains an object of type Season whose value is represented by a
        /// serialized JSON value if the parse operation succeeds. If the parse operation fails, result contains the default
        /// value of the underlying type of Season. Note that this value need not be a member of the Season enumeration.
        /// </param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParseJsonString([NotNullWhen(true)] string? value, bool ignoreCase, out Season result)
        {
            Unsafe.SkipInit(out result);
            return TryParseJsonString(value.AsSpan(), ignoreCase ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal, throwOnFailure: false, out Unsafe.As<Season, int>(ref result));
        }

        /// <summary>
        /// Converts the string representation of the serialized JSON value to an equivalent enumerated object.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="value">The string representation of the enumeration serialized JSON value to convert.</param>
        /// <param name="result">
        /// When this method returns, result contains an object of type Season whose value is represented by a
        /// serialized JSON value if the parse operation succeeds. If the parse operation fails, result contains the default
        /// value of the underlying type of Season. Note that this value need not be a member of the Season enumeration.
        /// </param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParseJsonString([NotNullWhen(true)] string? value, out Season result)
        {
            Unsafe.SkipInit(out result);
            return TryParseJsonString(value.AsSpan(), StringComparison.Ordinal, throwOnFailure: false, out Unsafe.As<Season, int>(ref result));
        }

        /// <summary>
        /// Converts the string representation of the serialized JSON value to an equivalent enumerated object.
        /// </summary>
        /// <param name="value">The string representation of the enumeration serialized JSON value to convert.</param>
        /// <param name="ignoreCase"><see langword="true"/> to ignore case; <see langword="false"/> to regard case.</param>
        /// <returns>
        /// Contains an object of type Season whose value is represented by value if the parse operation succeeds.
        /// If the parse operation fails, result contains a null value.
        /// </returns>
        public static Season? TryParseJsonString(string? value, bool ignoreCase = false)
        {
            return TryParseJsonString(value.AsSpan(), ignoreCase ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal, throwOnFailure: false, out var result) ? (Season?)result : null;
        }

        /// <summary>
        /// Converts the string representation of the serialized JSON value to an equivalent enumerated object.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="value">The string representation of the enumeration serialized JSON value to convert.</param>
        /// <param name="ignoreCase"><see langword="true"/> to ignore case; <see langword="false"/> to regard case.</param>
        /// <param name="result">
        /// When this method returns, result contains an object of type Season whose value is represented by a
        /// serialized JSON value if the parse operation succeeds. If the parse operation fails, result contains the default
        /// value of the underlying type of Season. Note that this value need not be a member of the Season enumeration.
        /// </param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParseJsonString(ReadOnlySpan<char> value, bool ignoreCase, out Season result)
        {
            Unsafe.SkipInit(out result);
            return TryParseJsonString(value, ignoreCase ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal, throwOnFailure: false, out Unsafe.As<Season, int>(ref result));
        }

        /// <summary>
        /// Converts the string representation of the serialized JSON value to an equivalent enumerated object.
        /// The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="value">The string representation of the enumeration serialized JSON value to convert.</param>
        /// <param name="result">
        /// When this method returns, result contains an object of type Season whose value is represented by a
        /// serialized JSON value if the parse operation succeeds. If the parse operation fails, result contains the default
        /// value of the underlying type of Season. Note that this value need not be a member of the Season enumeration.
        /// </param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParseJsonString(ReadOnlySpan<char> value, out Season result)
        {
            Unsafe.SkipInit(out result);
            return TryParseJsonString(value, StringComparison.Ordinal, throwOnFailure: false, out Unsafe.As<Season, int>(ref result));
        }

        /// <summary>
        /// Converts the string representation of the serialized JSON value to an equivalent enumerated object.
        /// </summary>
        /// <param name="value">The string representation of the enumeration serialized JSON value to convert.</param>
        /// <param name="ignoreCase"><see langword="true"/> to ignore case; <see langword="false"/> to regard case.</param>
        /// <returns>
        /// Contains an object of type Season whose value is represented by value if the parse operation succeeds.
        /// If the parse operation fails, result contains a null value.
        /// </returns>
        public static Season? TryParseJsonString(ReadOnlySpan<char> value, bool ignoreCase = false)
        {
            return TryParseJsonString(value, ignoreCase ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal, throwOnFailure: false, out var result) ? (Season?)result : null;
        }

        private static bool TryParseJsonString(ReadOnlySpan<char> value, StringComparison comparisonType, bool throwOnFailure, out int result)
        {
            if (!value.IsEmpty)
            {
                return TryParseNonNumericJsonString(value, comparisonType, throwOnFailure, out result);
            }

            if (throwOnFailure)
            {
                ThrowHelper.ThrowInvalidEmptyParseArgument(nameof(value));
            }

            result = 0;
            return false;
        }

        private static bool TryParseNonNumericJsonString(ReadOnlySpan<char> value, StringComparison comparisonType, bool throwOnFailure, out int result)
        {
            bool success = TryParseSingleJsonString(value, comparisonType, out result);
            if (success)
            {
                return true;
            }

            if (throwOnFailure)
            {
                ThrowHelper.ThrowValueNotFound(value, nameof(value));
            }

            return false;
        }

        private static bool TryParseSingleJsonString(ReadOnlySpan<char> value, StringComparison comparisonType, out int result)
        {
            if (value.IsEmpty)
            {
                result = 0;
                return false;
            }

            switch (value[0])
            {
                case '☀':
                    switch (value)
                    {
                        case { } when value.Equals("☀️", comparisonType):
                            result = 2;
                            return true;
                    }
                    break;
                case '⛄':
                    switch (value)
                    {
                        case { } when value.Equals("⛄", comparisonType):
                            result = 4;
                            return true;
                    }
                    break;
                case '\ud83c':
                    switch (value)
                    {
                        case { } when value.Equals("🌱", comparisonType):
                            result = 1;
                            return true;
                        case { } when value.Equals("🍂", comparisonType):
                            result = 3;
                            return true;
                    }
                    break;
            }

            result = 0;
            return false;
        }
    }
}
