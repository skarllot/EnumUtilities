// <auto-generated />
#nullable enable

using System;
using System.Runtime.CompilerServices;
using Raiqub.Generators.EnumUtilities.Formatters;
using Raiqub.Generators.EnumUtilities.Parsers;

#pragma warning disable CS1591 // publicly visible type or member must be documented

namespace Raiqub.Generators.EnumUtilities.IntegrationTests.Models
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Raiqub.Generators.EnumUtilities", "1.8.0.0")]
    public static partial class UserRoleMetadata
    {
        /// <summary>Provides constant values for <see cref="UserRole" /> members names.</summary>
        public static partial class Name
        {
            /// <summary>Represents the largest possible number of characters produced by converting an <see cref="UserRole" /> value to string, based on defined members. This field is constant.</summary>
            public const int MaxCharsLength = 10;

            /// <summary>The string representation of <see cref="UserRole.None" /> name.</summary>
            public const string None = "None";

            /// <summary>The string representation of <see cref="UserRole.NormalUser" /> name.</summary>
            public const string NormalUser = "NormalUser";

            /// <summary>The string representation of <see cref="UserRole.Custodian" /> name.</summary>
            public const string Custodian = "Custodian";

            /// <summary>The string representation of <see cref="UserRole.Finance" /> name.</summary>
            public const string Finance = "Finance";

            /// <summary>The string representation of <see cref="UserRole.SuperUser" /> name.</summary>
            public const string SuperUser = "SuperUser";

            /// <summary>The string representation of <see cref="UserRole.All" /> name.</summary>
            public const string All = "All";
        }

        /// <summary>Provides static values for <see cref="UserRole" /> UTF-8 encoded members names.</summary>
        public static partial class Utf8Name
        {
            /// <summary>Represents the largest possible number of bytes produced by converting an <see cref="UserRole" /> value to UTF-8 string, based on defined members. This field is constant.</summary>
            public const int MaxBytesLength = 10;

            /// <summary>The UTF-8 representation of <see cref="UserRole.None" /> name.</summary>
            public static ReadOnlySpan<byte> None => new byte[4] { 78, 111, 110, 101 };

            /// <summary>The UTF-8 representation of <see cref="UserRole.NormalUser" /> name.</summary>
            public static ReadOnlySpan<byte> NormalUser => new byte[10] { 78, 111, 114, 109, 97, 108, 85, 115, 101, 114 };

            /// <summary>The UTF-8 representation of <see cref="UserRole.Custodian" /> name.</summary>
            public static ReadOnlySpan<byte> Custodian => new byte[9] { 67, 117, 115, 116, 111, 100, 105, 97, 110 };

            /// <summary>The UTF-8 representation of <see cref="UserRole.Finance" /> name.</summary>
            public static ReadOnlySpan<byte> Finance => new byte[7] { 70, 105, 110, 97, 110, 99, 101 };

            /// <summary>The UTF-8 representation of <see cref="UserRole.SuperUser" /> name.</summary>
            public static ReadOnlySpan<byte> SuperUser => new byte[9] { 83, 117, 112, 101, 114, 85, 115, 101, 114 };

            /// <summary>The UTF-8 representation of <see cref="UserRole.All" /> name.</summary>
            public static ReadOnlySpan<byte> All => new byte[3] { 65, 108, 108 };
        }

        /// <summary>Provides constant values for <see cref="UserRole" /> serialized members values.</summary>
        public static partial class SerializedValue
        {
            /// <summary>Represents the largest possible number of characters produced by converting an <see cref="UserRole" /> value to string, based on defined members. This field is constant.</summary>
            public const int MaxCharsLength = 11;

            /// <summary>The string representation of serialized <see cref="UserRole.None" /> value.</summary>
            public const string None = "None";

            /// <summary>The string representation of serialized <see cref="UserRole.NormalUser" /> value.</summary>
            public const string NormalUser = "Normal User";

            /// <summary>The string representation of serialized <see cref="UserRole.Custodian" /> value.</summary>
            public const string Custodian = "Custodian";

            /// <summary>The string representation of serialized <see cref="UserRole.Finance" /> value.</summary>
            public const string Finance = "Finance";

            /// <summary>The string representation of serialized <see cref="UserRole.SuperUser" /> value.</summary>
            public const string SuperUser = "Super User";

            /// <summary>The string representation of serialized <see cref="UserRole.All" /> value.</summary>
            public const string All = "All";
        }

        /// <summary>Provides static values for <see cref="UserRole" /> UTF-8 encoded members serialized values.</summary>
        public static partial class Utf8SerializedValue
        {
            /// <summary>Represents the largest possible number of bytes produced by converting an <see cref="UserRole" /> value to UTF-8 string, based on defined members. This field is constant.</summary>
            public const int MaxBytesLength = 11;

            /// <summary>The UTF-8 representation of serialized <see cref="UserRole.None" /> value.</summary>
            public static ReadOnlySpan<byte> None => new byte[4] { 78, 111, 110, 101 };

            /// <summary>The UTF-8 representation of serialized <see cref="UserRole.NormalUser" /> value.</summary>
            public static ReadOnlySpan<byte> NormalUser => new byte[11] { 78, 111, 114, 109, 97, 108, 32, 85, 115, 101, 114 };

            /// <summary>The UTF-8 representation of serialized <see cref="UserRole.Custodian" /> value.</summary>
            public static ReadOnlySpan<byte> Custodian => new byte[9] { 67, 117, 115, 116, 111, 100, 105, 97, 110 };

            /// <summary>The UTF-8 representation of serialized <see cref="UserRole.Finance" /> value.</summary>
            public static ReadOnlySpan<byte> Finance => new byte[7] { 70, 105, 110, 97, 110, 99, 101 };

            /// <summary>The UTF-8 representation of serialized <see cref="UserRole.SuperUser" /> value.</summary>
            public static ReadOnlySpan<byte> SuperUser => new byte[10] { 83, 117, 112, 101, 114, 32, 85, 115, 101, 114 };

            /// <summary>The UTF-8 representation of serialized <see cref="UserRole.All" /> value.</summary>
            public static ReadOnlySpan<byte> All => new byte[3] { 65, 108, 108 };
        }


        /// <summary>Provides support for formatting <see cref="UserRole"/> serialized values.</summary>
        internal sealed partial class SerializationStringFormatter : IEnumFlagsFormatter<ulong>
        {
            /// <summary>Gets the singleton instance of the <see cref="SerializationStringFormatter"/> class.</summary>
            public static SerializationStringFormatter Instance = new SerializationStringFormatter();

            /// <inheritdoc />
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public int GetStringLengthForNumber(ulong value) => EnumNumericFormatter.GetStringLength(value);

            /// <inheritdoc />
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public string GetStringForNumber(ulong value) => value.ToString();

            /// <inheritdoc />
            public int? TryGetStringLengthForMember(ulong value)
            {
                if (value == 0)
                {
                    return 4;
                }

                int count = 0, foundItemsCount = 0;
                if ((value & 7) == 7)
                {
                    value -= 7;
                    count = checked(count + 3);
                    foundItemsCount++;
                }
                if ((value & 6) == 6)
                {
                    value -= 6;
                    count = checked(count + 10);
                    foundItemsCount++;
                }
                if ((value & 4) == 4)
                {
                    value -= 4;
                    count = checked(count + 7);
                    foundItemsCount++;
                }
                if ((value & 2) == 2)
                {
                    value -= 2;
                    count = checked(count + 9);
                    foundItemsCount++;
                }
                if ((value & 1) == 1)
                {
                    value -= 1;
                    count = checked(count + 11);
                    foundItemsCount++;
                }

                if (value != 0)
                {
                    return null;
                }

                const int separatorStringLength = 2;
                return checked(count + (separatorStringLength * (foundItemsCount - 1)));
            }

            /// <inheritdoc />
            public string? TryGetStringForMember(ulong value)
            {
                if (value == 0)
                {
                    return "None";
                }

                Span<ulong> foundItems = stackalloc ulong[3];
                int count = 0, foundItemsCount = 0;
                if ((value & 7) == 7)
                {
                    value -= 7;
                    count = checked(count + 3);
                    foundItems[foundItemsCount++] = 7;
                }
                if ((value & 6) == 6)
                {
                    value -= 6;
                    count = checked(count + 10);
                    foundItems[foundItemsCount++] = 6;
                }
                if ((value & 4) == 4)
                {
                    value -= 4;
                    count = checked(count + 7);
                    foundItems[foundItemsCount++] = 4;
                }
                if ((value & 2) == 2)
                {
                    value -= 2;
                    count = checked(count + 9);
                    foundItems[foundItemsCount++] = 2;
                }
                if ((value & 1) == 1)
                {
                    value -= 1;
                    count = checked(count + 11);
                    foundItems[foundItemsCount++] = 1;
                }

                if (value != 0)
                {
                    return null;
                }

                if (foundItemsCount == 1)
                {
                    return GetStringForSingleMember(foundItems[0]);
                }

                return EnumStringFormatter.WriteMultipleFoundFlagsNames(this, count, foundItemsCount, foundItems);
            }

            public string GetStringForSingleMember(ulong value)
            {
                return value switch
                {
                    0 => "None",
                    1 => "Normal User",
                    2 => "Custodian",
                    4 => "Finance",
                    6 => "Super User",
                    7 => "All",
                    _ => throw new ArgumentOutOfRangeException()
                };
            }
        }
    }
}
