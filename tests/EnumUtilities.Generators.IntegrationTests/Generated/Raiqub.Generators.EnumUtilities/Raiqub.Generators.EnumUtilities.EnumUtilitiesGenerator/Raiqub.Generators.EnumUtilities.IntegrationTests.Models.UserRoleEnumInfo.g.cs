// <auto-generated />
#nullable enable

using System;
using System.Runtime.CompilerServices;
using Raiqub.Generators.EnumUtilities.Formatters;
using Raiqub.Generators.EnumUtilities.Parsers;

#pragma warning disable CS1591 // publicly visible type or member must be documented

namespace Raiqub.Generators.EnumUtilities.IntegrationTests.Models
{
    /// <summary>Provides metadata for <see cref="UserRole" /> enumeration.</summary>
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Raiqub.Generators.EnumUtilities", "1.8.0.0")]
    public static partial class UserRoleMetadata
    {
        /// <summary>Provides constant values for <see cref="UserRole" /> members names.</summary>
        public static partial class Name
        {
            /// <summary>Represents the largest possible number of characters produced by converting a <see cref="UserRole" /> value to string, based on defined members.</summary>
            public const int MaxCharsLength = 10;

            /// <summary>The string representation of <see cref="UserRole.None" /> name.</summary>
            public const string None = "None";

            /// <summary>The string representation of <see cref="UserRole.NormalUser" /> name.</summary>
            public const string NormalUser = "NormalUser";

            /// <summary>The string representation of <see cref="UserRole.Custodian" /> name.</summary>
            public const string Custodian = "Custodian";

            /// <summary>The string representation of <see cref="UserRole.Finance" /> name.</summary>
            public const string Finance = "Finance";

            /// <summary>The string representation of <see cref="UserRole.SuperUser" /> name.</summary>
            public const string SuperUser = "SuperUser";

            /// <summary>The string representation of <see cref="UserRole.All" /> name.</summary>
            public const string All = "All";
        }

        /// <summary>Provides static values for <see cref="UserRole" /> UTF-8 encoded members names.</summary>
        public static partial class Utf8Name
        {
            /// <summary>Represents the largest possible number of bytes produced by converting a <see cref="UserRole" /> value to UTF-8 string, based on defined members.</summary>
            public const int MaxBytesLength = 10;

            /// <summary>The UTF-8 representation of <see cref="UserRole.None" /> name.</summary>
            public static ReadOnlySpan<byte> None => new byte[4] { 78, 111, 110, 101 };

            /// <summary>The UTF-8 representation of <see cref="UserRole.NormalUser" /> name.</summary>
            public static ReadOnlySpan<byte> NormalUser => new byte[10] { 78, 111, 114, 109, 97, 108, 85, 115, 101, 114 };

            /// <summary>The UTF-8 representation of <see cref="UserRole.Custodian" /> name.</summary>
            public static ReadOnlySpan<byte> Custodian => new byte[9] { 67, 117, 115, 116, 111, 100, 105, 97, 110 };

            /// <summary>The UTF-8 representation of <see cref="UserRole.Finance" /> name.</summary>
            public static ReadOnlySpan<byte> Finance => new byte[7] { 70, 105, 110, 97, 110, 99, 101 };

            /// <summary>The UTF-8 representation of <see cref="UserRole.SuperUser" /> name.</summary>
            public static ReadOnlySpan<byte> SuperUser => new byte[9] { 83, 117, 112, 101, 114, 85, 115, 101, 114 };

            /// <summary>The UTF-8 representation of <see cref="UserRole.All" /> name.</summary>
            public static ReadOnlySpan<byte> All => new byte[3] { 65, 108, 108 };
        }
        /// <summary>Provides constant values for <see cref="UserRole" /> serialized members values.</summary>
        public static partial class SerializedValue
        {
            /// <summary>Represents the largest possible number of characters produced by serializing a <see cref="UserRole" /> value to string, based on defined members.</summary>
            public const int MaxCharsLength = 11;

            /// <summary>The string representation of <see cref="UserRole.None" /> serialized value.</summary>
            public const string None = "None";

            /// <summary>The string representation of <see cref="UserRole.NormalUser" /> serialized value.</summary>
            public const string NormalUser = "Normal User";

            /// <summary>The string representation of <see cref="UserRole.Custodian" /> serialized value.</summary>
            public const string Custodian = "Custodian";

            /// <summary>The string representation of <see cref="UserRole.Finance" /> serialized value.</summary>
            public const string Finance = "Finance";

            /// <summary>The string representation of <see cref="UserRole.SuperUser" /> serialized value.</summary>
            public const string SuperUser = "Super User";

            /// <summary>The string representation of <see cref="UserRole.All" /> serialized value.</summary>
            public const string All = "All";
        }

        /// <summary>Provides static values for <see cref="UserRole" /> UTF-8 encoded serialized members values.</summary>
        public static partial class Utf8SerializedValue
        {
            /// <summary>Represents the largest possible number of bytes produced by serializing a <see cref="UserRole" /> value to UTF-8 string, based on defined members.</summary>
            public const int MaxBytesLength = 11;

            /// <summary>The UTF-8 representation of <see cref="UserRole.None" /> serialized value.</summary>
            public static ReadOnlySpan<byte> None => new byte[4] { 78, 111, 110, 101 };

            /// <summary>The UTF-8 representation of <see cref="UserRole.NormalUser" /> serialized value.</summary>
            public static ReadOnlySpan<byte> NormalUser => new byte[11] { 78, 111, 114, 109, 97, 108, 32, 85, 115, 101, 114 };

            /// <summary>The UTF-8 representation of <see cref="UserRole.Custodian" /> serialized value.</summary>
            public static ReadOnlySpan<byte> Custodian => new byte[9] { 67, 117, 115, 116, 111, 100, 105, 97, 110 };

            /// <summary>The UTF-8 representation of <see cref="UserRole.Finance" /> serialized value.</summary>
            public static ReadOnlySpan<byte> Finance => new byte[7] { 70, 105, 110, 97, 110, 99, 101 };

            /// <summary>The UTF-8 representation of <see cref="UserRole.SuperUser" /> serialized value.</summary>
            public static ReadOnlySpan<byte> SuperUser => new byte[10] { 83, 117, 112, 101, 114, 32, 85, 115, 101, 114 };

            /// <summary>The UTF-8 representation of <see cref="UserRole.All" /> serialized value.</summary>
            public static ReadOnlySpan<byte> All => new byte[3] { 65, 108, 108 };
        }
    }
}
