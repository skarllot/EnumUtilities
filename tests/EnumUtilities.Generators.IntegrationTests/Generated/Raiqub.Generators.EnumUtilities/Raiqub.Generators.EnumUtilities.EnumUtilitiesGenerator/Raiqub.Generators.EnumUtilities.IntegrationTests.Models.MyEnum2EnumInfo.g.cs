// <auto-generated />
#nullable enable

using System;
using System.Runtime.CompilerServices;
using Raiqub.Generators.EnumUtilities.Formatters;
using Raiqub.Generators.EnumUtilities.Parsers;

#pragma warning disable CS1591 // publicly visible type or member must be documented

namespace Raiqub.Generators.EnumUtilities.IntegrationTests.Models
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Raiqub.Generators.EnumUtilities", "1.8.0.0")]
    internal static partial class MyEnum2Metadata
    {
        /// <summary>Provides constant values for <see cref="MyEnum2" /> members names.</summary>
        public static partial class Name
        {
            /// <summary>Represents the largest possible number of characters produced by converting an <see cref="MyEnum2" /> value to string, based on defined members. This field is constant.</summary>
            public const int MaxCharsLength = 6;

            /// <summary>The string representation of <see cref="MyEnum2.Credit" /> name.</summary>
            public const string Credit = "Credit";

            /// <summary>The string representation of <see cref="MyEnum2.Debit" /> name.</summary>
            public const string Debit = "Debit";

            /// <summary>The string representation of <see cref="MyEnum2.Cash" /> name.</summary>
            public const string Cash = "Cash";

            /// <summary>The string representation of <see cref="MyEnum2.Cheque" /> name.</summary>
            public const string Cheque = "Cheque";
        }

        /// <summary>Provides static values for <see cref="MyEnum2" /> UTF-8 encoded members names.</summary>
        public static partial class Utf8Name
        {
            /// <summary>Represents the largest possible number of bytes produced by converting an <see cref="MyEnum2" /> value to UTF-8 string, based on defined members. This field is constant.</summary>
            public const int MaxBytesLength = 6;

            /// <summary>The UTF-8 representation of <see cref="MyEnum2.Credit" /> name.</summary>
            public static ReadOnlySpan<byte> Credit => new byte[6] { 67, 114, 101, 100, 105, 116 };

            /// <summary>The UTF-8 representation of <see cref="MyEnum2.Debit" /> name.</summary>
            public static ReadOnlySpan<byte> Debit => new byte[5] { 68, 101, 98, 105, 116 };

            /// <summary>The UTF-8 representation of <see cref="MyEnum2.Cash" /> name.</summary>
            public static ReadOnlySpan<byte> Cash => new byte[4] { 67, 97, 115, 104 };

            /// <summary>The UTF-8 representation of <see cref="MyEnum2.Cheque" /> name.</summary>
            public static ReadOnlySpan<byte> Cheque => new byte[6] { 67, 104, 101, 113, 117, 101 };
        }

        /// <summary>Provides constant values for <see cref="MyEnum2" /> serialized members values.</summary>
        public static partial class SerializedValue
        {
            /// <summary>Represents the largest possible number of characters produced by converting an <see cref="MyEnum2" /> value to string, based on defined members. This field is constant.</summary>
            public const int MaxCharsLength = 11;

            /// <summary>The string representation of serialized <see cref="MyEnum2.Credit" /> value.</summary>
            public const string Credit = "Credit card";

            /// <summary>The string representation of serialized <see cref="MyEnum2.Debit" /> value.</summary>
            public const string Debit = "Debit card";

            /// <summary>The string representation of serialized <see cref="MyEnum2.Cash" /> value.</summary>
            public const string Cash = "Cash";

            /// <summary>The string representation of serialized <see cref="MyEnum2.Cheque" /> value.</summary>
            public const string Cheque = "Cheque";
        }

        /// <summary>Provides static values for <see cref="MyEnum2" /> UTF-8 encoded members serialized values.</summary>
        public static partial class Utf8SerializedValue
        {
            /// <summary>Represents the largest possible number of bytes produced by converting an <see cref="MyEnum2" /> value to UTF-8 string, based on defined members. This field is constant.</summary>
            public const int MaxBytesLength = 11;

            /// <summary>The UTF-8 representation of serialized <see cref="MyEnum2.Credit" /> value.</summary>
            public static ReadOnlySpan<byte> Credit => new byte[11] { 67, 114, 101, 100, 105, 116, 32, 99, 97, 114, 100 };

            /// <summary>The UTF-8 representation of serialized <see cref="MyEnum2.Debit" /> value.</summary>
            public static ReadOnlySpan<byte> Debit => new byte[10] { 68, 101, 98, 105, 116, 32, 99, 97, 114, 100 };

            /// <summary>The UTF-8 representation of serialized <see cref="MyEnum2.Cash" /> value.</summary>
            public static ReadOnlySpan<byte> Cash => new byte[4] { 67, 97, 115, 104 };

            /// <summary>The UTF-8 representation of serialized <see cref="MyEnum2.Cheque" /> value.</summary>
            public static ReadOnlySpan<byte> Cheque => new byte[6] { 67, 104, 101, 113, 117, 101 };
        }


        /// <summary>Provides support for formatting <see cref="MyEnum2"/> serialized values.</summary>
        internal sealed partial class SerializationStringFormatter : IEnumFormatter<int>
        {
            /// <summary>Gets the singleton instance of the <see cref="SerializationStringFormatter"/> class.</summary>
            public static SerializationStringFormatter Instance = new SerializationStringFormatter();

            /// <inheritdoc />
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public int GetStringLengthForNumber(int value) => EnumNumericFormatter.GetStringLength(value);

            /// <inheritdoc />
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public string GetStringForNumber(int value) => value.ToString();

            /// <inheritdoc />
            public int? TryGetStringLengthForMember(int value)
            {
                return value switch
                {
                    0 => 11,
                    1 => 10,
                    2 => 4,
                    3 => 6,
                    _ => null
                };
            }

            /// <inheritdoc />
            public string? TryGetStringForMember(int value)
            {
                return value switch
                {
                    0 => "Credit card",
                    1 => "Debit card",
                    2 => "Cash",
                    3 => "Cheque",
                    _ => null
                };
            }
        }
    }
}
