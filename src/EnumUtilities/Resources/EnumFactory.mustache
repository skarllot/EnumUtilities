// <auto-generated />
#nullable enable

using System;
using System.Diagnostics.CodeAnalysis;

#pragma warning disable CS1591 // publicly visible type or member must be documented

{{#Namespace}}
namespace {{.}}
{
{{/Namespace}}
    public static partial class {{Name}}Factory
    {
        public static bool TryParse(
            [NotNullWhen(true)] string? name,
            StringComparison comparisonType,
            out {{Name}} result)
        {
            switch (name)
            {
{{#Values}}
                case { } s when s.Equals(nameof({{Name}}.{{MemberName}}), comparisonType):
                    result = {{Name}}.{{MemberName}};
                    return true;
{{/Values}}
                case { } s when {{UnderlyingType}}.TryParse(s, out var val):
                    result = ({{Name}})val;
                    return true;
                default:
                    result = default;
                    return false;
            }
        }

        public static bool TryParseIgnoreCase(
            [NotNullWhen(true)] string? name,
            out {{Name}} result)
        {
            return TryParse(name, StringComparison.OrdinalIgnoreCase, out result);
        }

        public static bool TryParse(
            [NotNullWhen(true)] string? name,
            out {{Name}} result)
        {
            switch (name)
            {
{{#Values}}
                case nameof({{Name}}.{{MemberName}}):
                    result = {{Name}}.{{MemberName}};
                    return true;
{{/Values}}
                case { } s when {{UnderlyingType}}.TryParse(s, out var val):
                    result = ({{Name}})val;
                    return true;
                default:
                    result = default;
                    return false;
            }
        }

        public static {{Name}}[] GetValues()
        {
            return new[]
            {
{{#UniqueValues}}
                {{Name}}.{{MemberName}},
{{/UniqueValues}}
            };
        }

        public static string[] GetNames()
        {
            return new[]
            {
{{#Values}}
                nameof({{Name}}.{{MemberName}}),
{{/Values}}
            };
        }
    }
{{#Namespace}}
}
{{/Namespace}}