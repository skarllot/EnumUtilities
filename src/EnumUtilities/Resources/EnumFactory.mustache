// <auto-generated />
#nullable enable

using System;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;

#pragma warning disable CS1591 // publicly visible type or member must be documented

{{#Namespace}}
namespace {{.}}
{
{{/Namespace}}
    public static partial class {{Name}}Factory
    {
        public static bool TryParse(
            [NotNullWhen(true)] string? name,
            StringComparison comparisonType,
            out {{Name}} result)
        {
            switch (name)
            {
{{#Values}}
                case { } s when s.Equals(nameof({{Name}}.{{MemberName}}), comparisonType):
                    result = {{Name}}.{{MemberName}};
                    return true;
{{/Values}}
                case { } s when TryParseNumeric(s, comparisonType, out var val):
                    result = ({{Name}})val;
                    return true;
                default:
                    return Enum.TryParse(name, out result);
            }
        }

        public static bool TryParseIgnoreCase(
            [NotNullWhen(true)] string? name,
            out {{Name}} result)
        {
            return TryParse(name, StringComparison.OrdinalIgnoreCase, out result);
        }

        public static bool TryParse(
            [NotNullWhen(true)] string? name,
            out {{Name}} result)
        {
            switch (name)
            {
{{#Values}}
                case nameof({{Name}}.{{MemberName}}):
                    result = {{Name}}.{{MemberName}};
                    return true;
{{/Values}}
                case { } s when TryParseNumeric(s, StringComparison.Ordinal, out var val):
                    result = ({{Name}})val;
                    return true;
                default:
                    return Enum.TryParse(name, out result);
            }
        }
{{#HasSerializationValue}}

        public static bool TryParseFromEnumMemberValue(
            [NotNullWhen(true)] string? enumMemberValue,
            StringComparison comparisonType,
            out {{Name}} result)
        {
            switch (enumMemberValue)
            {
{{#Values}}
                case { } s when s.Equals({{#SerializationValue}}"{{.}}"{{/SerializationValue}}{{^SerializationValue}}nameof({{Name}}.{{MemberName}}){{/SerializationValue}}, comparisonType):
                    result = {{Name}}.{{MemberName}};
                    return true;
{{/Values}}
                default:
                    result = default;
                    return false;
            }
        }
{{/HasSerializationValue}}
{{#HasDescription}}

        public static bool TryCreateFromDescription(
            [NotNullWhen(true)] string? description,
            StringComparison comparisonType,
            out {{Name}} result)
        {
            switch (description)
            {
{{#Values}}{{#Description}}
                case { } s when s.Equals("{{.}}", comparisonType):
                    result = {{Name}}.{{MemberName}};
                    return true;
{{/Description}}{{/Values}}
                default:
                    result = default;
                    return false;
            }
        }
{{/HasDescription}}
{{#HasDisplayName}}

        public static bool TryCreateFromDisplayShortName(
            [NotNullWhen(true)] string? displayShortName,
            StringComparison comparisonType,
            out {{Name}} result)
        {
            switch (displayShortName)
            {
{{#Values}}{{#Display.ShortName}}
                case { } s when s.Equals({{#Display.ResourceShortName}}{{.}}{{/Display.ResourceShortName}}{{^Display.ResourceShortName}}"{{Display.ShortName}}"{{/Display.ResourceShortName}}, comparisonType):
                    result = {{Name}}.{{MemberName}};
                    return true;
{{/Display.ShortName}}{{/Values}}
                default:
                    return TryCreateFromDisplayName(displayShortName, comparisonType, out result);
            }
        }

        public static bool TryCreateFromDisplayName(
            [NotNullWhen(true)] string? displayName,
            StringComparison comparisonType,
            out {{Name}} result)
        {
            switch (displayName)
            {
{{#Values}}
                case { } s when s.Equals({{#Display.ResourceName}}{{.}}{{/Display.ResourceName}}{{^Display.ResourceName}}{{#Display.Name}}"{{.}}"{{/Display.Name}}{{^Display.Name}}nameof({{Name}}.{{MemberName}}){{/Display.Name}}{{/Display.ResourceName}}, comparisonType):
                    result = {{Name}}.{{MemberName}};
                    return true;
{{/Values}}
                default:
                    result = default;
                    return false;
            }
        }
{{/HasDisplayName}}
{{#HasDisplayDescription}}

        public static bool TryCreateFromDescription(
            [NotNullWhen(true)] string? description,
            StringComparison comparisonType,
            out {{Name}} result)
        {
            switch (description)
            {
{{#Values}}{{#Display.Description}}
                case { } s when s.Equals({{#Display.ResourceDescription}}{{.}}{{/Display.ResourceDescription}}{{^Display.ResourceDescription}}"{{Display.Description}}"{{/Display.ResourceDescription}}, comparisonType):
                    result = {{Name}}.{{MemberName}};
                    return true;
{{/Display.Description}}{{/Values}}
                default:
                    result = default;
                    return false;
            }
        }
{{/HasDisplayDescription}}

        public static {{Name}}[] GetValues()
        {
            return new[]
            {
{{#UniqueValues}}
                {{Name}}.{{MemberName}},
{{/UniqueValues}}
            };
        }

        public static string[] GetNames()
        {
            return new[]
            {
{{#Values}}
                nameof({{Name}}.{{MemberName}}),
{{/Values}}
            };
        }

        private static bool TryParseNumeric(
            string name,
            StringComparison comparisonType,
            out {{UnderlyingType}} result)
        {
            switch (comparisonType)
            {
                case StringComparison.CurrentCulture:
                case StringComparison.CurrentCultureIgnoreCase:
                    return {{UnderlyingType}}.TryParse(name, NumberStyles.Integer, NumberFormatInfo.CurrentInfo, out result);
                case StringComparison.InvariantCulture:
                case StringComparison.InvariantCultureIgnoreCase:
                case StringComparison.Ordinal:
                case StringComparison.OrdinalIgnoreCase:
                    return {{UnderlyingType}}.TryParse(name, NumberStyles.Integer, NumberFormatInfo.InvariantInfo, out result);
                default:
                    return {{UnderlyingType}}.TryParse(name, out result);
            }
        }
    }
{{#Namespace}}
}
{{/Namespace}}