// <auto-generated />
#nullable enable

using System;
using System.Diagnostics.CodeAnalysis;

#pragma warning disable CS1591 // publicly visible type or member must be documented

{{#Namespace}}
namespace {{.}}
{
{{/Namespace}}
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public static partial class {{Name}}Validation
    {
        /// <summary>Returns a boolean telling whether the value of <see cref="{{Name}}"/> instance exists in the enumeration.</summary>
        /// <returns><c>true</c> if the value of <see cref="{{Name}}"/> instance exists in the enumeration; <c>false</c> otherwise.</returns>
        public static bool IsDefined({{Name}} value)
        {
            return value switch
            {
{{#UniqueValues}}
                {{Name}}.{{MemberName}} => true,
{{/UniqueValues}}
                _ => false
            };
        }

        public static bool IsDefined(
            [NotNullWhen(true)] string? name,
            StringComparison comparisonType)
        {
            return name switch
            {
{{#Values}}
                { } s when s.Equals(nameof({{Name}}.{{MemberName}}), comparisonType) => true,
{{/Values}}
                _ => false
            };
        }

        public static bool IsDefinedIgnoreCase([NotNullWhen(true)] string? name)
        {
            return IsDefined(name, StringComparison.OrdinalIgnoreCase);
        }

        public static bool IsDefined([NotNullWhen(true)] string? name)
        {
            return name switch
            {
{{#Values}}
                nameof({{Name}}.{{MemberName}}) => true,
{{/Values}}
                _ => false
            };
        }
    }
{{#Namespace}}
}
{{/Namespace}}