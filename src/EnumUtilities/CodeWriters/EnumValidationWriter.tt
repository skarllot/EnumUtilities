<#@ template debug="false" hostspecific="false" language="C#" inherits="CodeWriterBase<EnumToGenerate>" #>
<#@ import namespace="Common" #>
<#@ import namespace="Models" #>
<#@ import namespace="System.Text" #>
// <auto-generated />
#nullable enable

using System;
using System.Diagnostics.CodeAnalysis;

#pragma warning disable CS1591 // publicly visible type or member must be documented

<#
    if (!string.IsNullOrEmpty(Model.Namespace))
    {
#>
namespace <#= Model.Namespace #>
{
<#
    }
#>
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("<#= CurrentAssemblyName.Name #>", "<#= Append($"{CurrentAssemblyName.Version}") #>")]
    public static partial class <#= Model.Name #>Validation
    {
        /// <summary>Returns a boolean telling whether the value of <see cref="<#= Model.Name #>"/> instance exists in the enumeration.</summary>
        /// <returns><c>true</c> if the value of <see cref="<#= Model.Name #>"/> instance exists in the enumeration; <c>false</c> otherwise.</returns>
        public static bool IsDefined(<#= Model.Name #> value)
        {
            return value switch
            {
<#
    foreach (var curr in Model.UniqueValues)
    {
#>
                <#= Model.Name #>.<#= curr.MemberName #> => true,
<#
    }
#>
                _ => false
            };
        }

        public static bool IsDefined(
            [NotNullWhen(true)] string? name,
            StringComparison comparisonType)
        {
            return name switch
            {
<#
    foreach (var curr in Model.Values)
    {
#>
                { } s when s.Equals(nameof(<#= Model.Name #>.<#= curr.MemberName #>), comparisonType) => true,
<#
    }
#>
                _ => false
            };
        }

        public static bool IsDefinedIgnoreCase([NotNullWhen(true)] string? name)
        {
            return IsDefined(name, StringComparison.OrdinalIgnoreCase);
        }

        public static bool IsDefined([NotNullWhen(true)] string? name)
        {
            return name switch
            {
<#
    foreach (var curr in Model.Values)
    {
#>
                nameof(<#= Model.Name #>.<#= curr.MemberName #>) => true,
<#
    }
#>
                _ => false
            };
        }
    }
<#
    if (!string.IsNullOrEmpty(Model.Namespace))
    {
#>
}
<#
    }
#>
<#+
    public EnumValidationWriter(StringBuilder builder) : base(builder)
    {
    }

    public override string GetFileName() => $"{Model.Namespace}.{Model.Name}Validation.g.cs";
#>
