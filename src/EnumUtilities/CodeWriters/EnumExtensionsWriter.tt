<#@ template debug="false" hostspecific="false" language="C#" inherits="CodeWriterBase<EnumToGenerate>" #>
<#@ import namespace="Common" #>
<#@ import namespace="Models" #>
<#@ import namespace="System.Text" #>
// <auto-generated />
#nullable enable

using System;

#pragma warning disable CS1591 // publicly visible type or member must be documented

<#
    if (!string.IsNullOrEmpty(Model.Namespace))
    {
        WriteLine($"namespace {Model.Namespace}");
        WriteLine("{");
        PushIndent();
    }
#>
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("<#= CurrentAssemblyName.Name #>", "<#= Append($"{CurrentAssemblyName.Version}") #>")]
<#= Model.IsPublic ? "public" : "internal" #> static partial class <#= Model.Name #>Extensions
{
<#
    /* -----------------------------------------------------------------------------------------------------------------
     * DEFAULT
     * -------------------------------------------------------------------------------------------------------------- */
#>
    /// <summary>Converts the value of this instance to its equivalent string representation.</summary>
    /// <returns>The string representation of the value of this instance.</returns>
    public static string ToStringFast(this <#= Model.RefName #> value)
    {
        return value switch
        {
<#
    foreach (var curr in Model.UniqueValues)
    {
#>
            <#= Model.RefName #>.<#= curr.MemberName #> => nameof(<#= Model.RefName #>.<#= curr.MemberName #>),
<#
    }
#>
            _ => value.ToString()
        };
    }

    /// <summary>Returns a boolean telling whether the value of this instance exists in the enumeration.</summary>
    /// <returns><c>true</c> if the value of this instance exists in the enumeration; <c>false</c> otherwise.</returns>
    public static bool IsDefined(this <#= Model.RefName #> value)
    {
        return <#= Model.Name #>Validation.IsDefined(value);
    }
<#
    /* -----------------------------------------------------------------------------------------------------------------
     * ENUM MEMBER ATTRIBUTE
     * -------------------------------------------------------------------------------------------------------------- */
    if (Model.HasSerializationValue)
    {
#>

    public static string ToEnumMemberValue(this <#= Model.RefName #> value)
    {
        return value switch
        {
<#
        foreach (var curr in Model.UniqueValues)
        {
#>
            <#= Model.RefName #>.<#= curr.MemberName #> => <#=
                    curr.SerializationValue != null
                        ? Append($"\"{curr.SerializationValue}\"")
                        : Append($"nameof({Model.RefName}.{curr.MemberName})") #>,
<#
        }
#>
            _ => value.ToString()
        };
    }
<#
    }
#>
<#
    /* -----------------------------------------------------------------------------------------------------------------
     * DESCRIPTION ATTRIBUTE
     * -------------------------------------------------------------------------------------------------------------- */
    if (Model.HasDescription)
    {
#>

    public static string? GetDescription(this <#= Model.RefName #> value)
    {
        return value switch
        {
<#
        foreach (var curr in Model.UniqueValues.Where(x => x.Description != null))
        {
#>
            <#= Model.RefName #>.<#= curr.MemberName #> => "<#= curr.Description #>",
<#
        }
#>
            _ => null
        };
    }
<#
    }
#>
<#
    /* -----------------------------------------------------------------------------------------------------------------
     * DISPLAY ATTRIBUTE
     * -------------------------------------------------------------------------------------------------------------- */
    if (Model.HasDisplayName)
    {
#>

    public static string GetDisplayShortName(this <#= Model.RefName #> value)
    {
        return value switch
        {
<#
        foreach (var curr in Model.UniqueValues.Where(x => x.Display?.ShortName != null))
        {
#>
            <#= Model.RefName #>.<#= curr.MemberName #> => <#= curr.Display!.ResourceShortName != null
                                                                   ? Append(curr.Display.ResourceShortName)
                                                                   : Append($"\"{curr.Display.ShortName}\"") #>,
<#
        }
#>
            _ => GetDisplayName(value)
        };
    }

    public static string GetDisplayName(this <#= Model.RefName #> value)
    {
        return value switch
        {
<#
        foreach (var curr in Model.UniqueValues)
        {
#>
            <#= Model.RefName #>.<#= curr.MemberName #> => <#=
                    curr.Display?.ResourceName != null
                        ? Append(curr.Display.ResourceName)
                        : curr.Display?.Name != null
                            ? Append($"\"{curr.Display.Name}\"")
                            : Append($"nameof({Model.RefName}.{curr.MemberName})") #>,
<#
        }
#>
            _ => value.ToString()
        };
    }
<#
    }
#>
<#
    if (Model.HasDisplayDescription)
    {
#>

    public static string? GetDescription(this <#= Model.RefName #> value)
    {
        return value switch
        {
<#
        foreach (var curr in Model.UniqueValues.Where(x => x.Display?.Description != null))
        {
#>
            <#= Model.RefName #>.<#= curr.MemberName #> => <#=
                    curr.Display!.ResourceDescription != null
                        ? Append(curr.Display.ResourceDescription)
                        : Append($"\"{curr.Display.Description}\"") #>,
<#
        }
#>
            _ => null
        };
    }
<#
    }
#>
}
<#
    if (!string.IsNullOrEmpty(Model.Namespace))
    {
        PopIndent();
        WriteLine("}");
    }
#>
<#+
    public EnumExtensionsWriter(StringBuilder builder) : base(builder)
    {
    }

    public override string GetFileName() => $"{Model.Namespace ?? "_"}.{Model.Name}Extensions.g.cs";
#>
