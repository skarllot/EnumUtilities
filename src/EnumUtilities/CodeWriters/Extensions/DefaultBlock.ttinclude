<#+
    private void WriteDefaultBlock()
    {
#>
    /// <summary>Represents the largest possible number of bytes produced by encoding an <see cref="<#= Model.Name #>" /> value to UTF-8, based on defined members. This field is constant.</summary>
    public const int NameMaxBytesLength = <#= Model.Values.Max(x => Encoding.UTF8.GetByteCount(x.MemberName)) #>;

    /// <summary>Represents the largest possible number of characters produced by converting an <see cref="<#= Model.Name #>" /> value to string, based on defined members. This field is constant.</summary>
    public const int NameMaxCharsLength = <#= Model.Values.Max(x => x.MemberName.Length) #>;

    /// <summary>Converts the value of this instance to its equivalent string representation.</summary>
    /// <returns>The string representation of the value of this instance.</returns>
    public static string ToStringFast(this <#= Model.RefName #> value)
    {
        return value switch
        {
<#+
        foreach (var curr in Model.UniqueValues)
        {
#>
            <#= Model.RefName #>.<#= curr.MemberName #> => nameof(<#= Model.RefName #>.<#= curr.MemberName #>),
<#+
        }
#>
            _ => value.ToString()
        };
    }

    /// <summary>Returns a boolean telling whether the value of this instance exists in the enumeration.</summary>
    /// <returns><c>true</c> if the value of this instance exists in the enumeration; <c>false</c> otherwise.</returns>
    public static bool IsDefined(this <#= Model.RefName #> value)
    {
        return <#= Model.Name #>Validation.IsDefined(value);
    }

    /// <summary>Determines whether one or more bit fields are set in the current instance.</summary>
    /// <param name="flag">An enumeration value.</param>
    /// <returns><see langword="true"/> if the bit field or bit fields that are set in flag are also set in the current instance; otherwise, <see langword="false"/>.</returns>
    public static bool HasFlagFast(this <#= Model.RefName #> value, <#= Model.RefName #> flag)
    {
        return (value & flag) == flag;
    }

    /// <summary>Calculates the number of characters produced by converting the specified value to string.</summary>
    /// <param name="value">The value to calculate the number of characters.</param>
    /// <returns>The number of characters produced by converting the specified value to string.</returns>
    public static int GetStringCount(this <#= Model.RefName #> value)
    {
        return value switch
        {
<#+
        foreach (var curr in Model.UniqueValues)
        {
#>
            <#= Model.RefName #>.<#= curr.MemberName #> => <#= curr.MemberName.Length #>,
<#+
        }
        if (Model.Values.All(x => x.MemberValue != "0"))
        {
#>
            0 => 1,
<#+
        }
#>
            _ => value.ToString().Length
        };
    }

    /// <summary>Calculates the number of bytes produced by encoding the specified value to UTF-8.</summary>
    /// <param name="value">The value to calculate the number of bytes.</param>
    /// <returns>The number of bytes produced by encoding the specified value to UTF-8.</returns>
    public static int GetUtf8ByteCount(this <#= Model.RefName #> value)
    {
        return value switch
        {
<#+
        foreach (var curr in Model.UniqueValues)
        {
#>
            <#= Model.RefName #>.<#= curr.MemberName #> => <#= Encoding.UTF8.GetByteCount(curr.MemberName) #>,
<#+
        }
        if (Model.Values.All(x => x.MemberValue != "0"))
        {
#>
            0 => 1,
<#+
        }
#>
            _ => value.ToString().Length
        };
    }

    /// <summary>Tries to write the current value as string into the provided span of characters.</summary>
    /// <param name="value">The value to write to the provided span of characters.</param>
    /// <param name="destination">The span in which to write current value as a span of characters.</param>
    /// <param name="charsWritten">When this method returns, contains the number of characters that were written in <paramref name="destination"/>.</param>
    /// <returns><see langword="true"/> if the writing was successful; otherwise, <see langword="false"/>.</returns>
    public static bool TryWriteString(this <#= Model.RefName #> value, Span<char> destination, out int charsWritten)
    {
        string result = value switch
        {
<#+
        foreach (var curr in Model.UniqueValues)
        {
#>
            <#= Model.RefName #>.<#= curr.MemberName #> => "<#= curr.MemberName #>",
<#+
        }
        if (Model.Values.All(x => x.MemberValue != "0"))
        {
#>
            0 => "0",
<#+
        }
#>
            _ => value.ToString()
        };

        if (result.Length > destination.Length)
        {
            charsWritten = 0;
            return false;
        }

        result.AsSpan().CopyTo(destination);
        charsWritten = result.Length;
        return true;
    }

    /// <summary>Tries to write the current value as UTF-8 into the provided span of bytes.</summary>
    /// <param name="value">The value to write to the provided span of bytes.</param>
    /// <param name="destination">The span in which to write current value as a span of bytes.</param>
    /// <param name="bytesWritten">When this method returns, contains the number of bytes that were written in <paramref name="destination"/>.</param>
    /// <returns><see langword="true"/> if the writing was successful; otherwise, <see langword="false"/>.</returns>
    public static bool TryWriteUtf8Bytes(this <#= Model.RefName #> value, Span<byte> destination, out int bytesWritten)
    {
        var bytes = value switch
        {
<#+
        foreach (var curr in Model.UniqueValues)
        {
#>
            <#= Model.RefName #>.<#= curr.MemberName #> => "<#= curr.MemberName #>"u8,
<#+
        }
        if (Model.Values.All(x => x.MemberValue != "0"))
        {
#>
            0 => "0"u8,
<#+
        }
#>
            _ => ReadOnlySpan<byte>.Empty
        };

        if (bytes.IsEmpty)
        {
            string str = value.ToString();
            if (System.Text.Encoding.UTF8.GetByteCount(str) > destination.Length)
            {
                bytesWritten = 0;
                return false;
            }

            bytesWritten = System.Text.Encoding.UTF8.GetBytes(str.AsSpan(), destination);
            return true;
        }

        if (bytes.Length > destination.Length)
        {
            bytesWritten = 0;
            return false;
        }

        bytes.CopyTo(destination);
        bytesWritten = bytes.Length;
        return true;
    }
<#+
    }
#>
