<#@ template debug="false" hostspecific="false" language="C#" inherits="CodeWriterBase<EnumToGenerate>" #>
<#@ import namespace="Common" #>
<#@ import namespace="Models" #>
<#@ import namespace="System.Text" #>
// <auto-generated />
#nullable enable

using System;
using System.Text.Json;
using System.Text.Json.Serialization;

#pragma warning disable CS1591 // publicly visible type or member must be documented

<#
    if (!string.IsNullOrEmpty(Model.Namespace))
    {
        WriteLine($"namespace {Model.Namespace}");
        WriteLine("{");
        PushIndent();
    }
#>
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("<#= CurrentAssemblyName.Name #>", "<#= Append($"{CurrentAssemblyName.Version}") #>")]
<#= Model.IsPublic ? "public" : "internal" #> sealed class <#= Model.Name #>JsonConverter : JsonConverter<<#= Model.Name #>>
{
    private const int MaxValueLength = <#= Model.Values.Max(x => x.MemberName.Length) #>;

    public override <#= Model.Name #> Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
#if NET7_0_OR_GREATER
        int length = reader.HasValueSequence ? checked((int)reader.ValueSequence.Length) : reader.ValueSpan.Length;
        if (length != MaxValueLength)
            return 0;

        Span<char> name = stackalloc char[MaxValueLength];
        reader.CopyString(name);
#else
        string? name = reader.GetString();
#endif

        return name switch
        {
<#
    foreach (var curr in Model.Values)
    {
#>
            <#=
                curr.SerializationValue is not null
                    ? Append($"\"{curr.SerializationValue}\"")
                    : Append($"nameof({Model.RefName}.{curr.MemberName})") #> => <#= Model.RefName #>.<#= curr.MemberName #>,
<#
    }
#>
            _ => 0
        };
    }

    public override void Write(Utf8JsonWriter writer, <#= Model.Name #> value, JsonSerializerOptions options)
    {
        switch (value)
        {
<#
    foreach (var curr in Model.Values)
    {
#>
            case <#= Model.RefName #>.<#= curr.MemberName #>:
                writer.WriteStringValue("<#= curr.SerializationValue ?? curr.MemberName #>"u8);
                break;
<#
    }
#>
            default:
                writer.WriteNullValue();
                break;
        }
    }
}
<#
    if (!string.IsNullOrEmpty(Model.Namespace))
    {
        PopIndent();
        WriteLine("}");
    }
#>
<#+
    public EnumJsonConverterWriter(StringBuilder builder) : base(builder)
    {
    }

    public override string GetFileName() => $"{Model.Namespace ?? "_"}.{Model.Name}JsonConverter.g.cs";
    protected override bool CanGenerateFor(EnumToGenerate model) => model.GenerateJsonConverter;
#>
