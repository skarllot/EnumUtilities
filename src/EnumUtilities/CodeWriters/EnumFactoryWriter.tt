<#@ template debug="false" hostspecific="false" language="C#" inherits="CodeWriterBase<EnumToGenerate>" #>
<#@ import namespace="Common" #>
<#@ import namespace="Models" #>
<#@ import namespace="System.Text" #>
// <auto-generated />
#nullable enable

using System;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;

#pragma warning disable CS1591 // publicly visible type or member must be documented

<#
    if (!string.IsNullOrEmpty(Model.Namespace))
    {
#>
namespace <#= Model.Namespace #>
{
<#
    }
#>
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("<#= CurrentAssemblyName.Name #>", "<#= Append($"{CurrentAssemblyName.Version}") #>")]
    public static partial class <#= Model.Name #>Factory
    {
<#
    /* -----------------------------------------------------------------------------------------------------------------
     * DEFAULT
     * -------------------------------------------------------------------------------------------------------------- */
#>
        /// <summary>
        /// Converts the string representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
        /// <param name="comparisonType">One of the enumeration values that specifies how the strings will be compared.</param>
        /// <param name="result">
        /// When this method returns, result contains an object of type <#= Model.Name #> whose value is represented by value
        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
        /// underlying type of <#= Model.Name #>. Note that this value need not be a member of the <#= Model.Name #> enumeration.
        /// </param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        /// <exception cref="ArgumentException"><paramref name="comparisonType"/> is not a <see cref="StringComparison"/> value.</exception>
        public static bool TryParse(
            [NotNullWhen(true)] string? name,
            StringComparison comparisonType,
            out <#= Model.Name #> result)
        {
            switch (name)
            {
<#
    foreach (var curr in Model.Values)
    {
#>
                case { } s when s.Equals(nameof(<#= Model.Name #>.<#= curr.MemberName #>), comparisonType):
                    result = <#= Model.Name #>.<#= curr.MemberName #>;
                    return true;
<#
    }
#>
                case { } s when TryParseNumeric(s, comparisonType, out <#= Model.UnderlyingType #> val):
                    result = (<#= Model.Name #>)val;
                    return true;
                default:
                    return Enum.TryParse(name, out result);
            }
        }

        /// <summary>
        /// Converts the string representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
        /// <param name="result">
        /// When this method returns, result contains an object of type <#= Model.Name #> whose value is represented by value
        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
        /// underlying type of <#= Model.Name #>. Note that this value need not be a member of the <#= Model.Name #> enumeration.
        /// </param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParse(
            [NotNullWhen(true)] string? name,
            out <#= Model.Name #> result)
        {
            switch (name)
            {
<#
    foreach (var curr in Model.Values)
    {
#>
                case nameof(<#= Model.Name #>.<#= curr.MemberName #>):
                    result = <#= Model.Name #>.<#= curr.MemberName #>;
                    return true;
<#
    }
#>
                case { } s when TryParseNumeric(s, StringComparison.Ordinal, out <#= Model.UnderlyingType #> val):
                    result = (<#= Model.Name #>)val;
                    return true;
                default:
                    return Enum.TryParse(name, out result);
            }
        }

        /// <summary>
        /// Converts the string representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
        /// <param name="result">
        /// When this method returns, result contains an object of type <#= Model.Name #> whose value is represented by value
        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
        /// underlying type of <#= Model.Name #>. Note that this value need not be a member of the <#= Model.Name #> enumeration.
        /// </param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParseIgnoreCase(
            [NotNullWhen(true)] string? name,
            out <#= Model.Name #> result)
        {
            return TryParse(name, StringComparison.OrdinalIgnoreCase, out result);
        }

        /// <summary>
        /// Converts the string representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
        /// <returns>
        /// Contains an object of type <#= Model.Name #> whose value is represented by value if the parse operation succeeds.
        /// If the parse operation fails, result contains <c>null</c> value.
        /// </returns>
        public static <#= Model.Name #>? TryParse(string? name)
        {
            return TryParse(name, out <#= Model.Name #> result) ? result : null;
        }

        /// <summary>
        /// Converts the string representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
        /// <returns>
        /// Contains an object of type <#= Model.Name #> whose value is represented by value if the parse operation succeeds.
        /// If the parse operation fails, result contains <c>null</c> value.
        /// </returns>
        public static <#= Model.Name #>? TryParseIgnoreCase(string? name)
        {
            return TryParse(name, StringComparison.OrdinalIgnoreCase, out <#= Model.Name #> result) ? result : null;
        }

        /// <summary>
        /// Converts the string representation of the name or numeric value of one or more enumerated constants to
        /// an equivalent enumerated object.
        /// </summary>
        /// <param name="name">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
        /// <param name="comparisonType">One of the enumeration values that specifies how the strings will be compared.</param>
        /// <returns>
        /// Contains an object of type <#= Model.Name #> whose value is represented by value if the parse operation succeeds.
        /// If the parse operation fails, result contains <c>null</c> value.
        /// </returns>
        /// <exception cref="ArgumentException"><paramref name="comparisonType"/> is not a <see cref="StringComparison"/> value.</exception>
        public static <#= Model.Name #>? TryParse(string? name, StringComparison comparisonType)
        {
            return TryParse(name, comparisonType, out <#= Model.Name #> result) ? result : null;
        }
<#
    /* -----------------------------------------------------------------------------------------------------------------
     * ENUM MEMBER ATTRIBUTE
     * -------------------------------------------------------------------------------------------------------------- */
    if (Model.HasSerializationValue)
    {
#>

        /// <summary>
        /// Converts the string representation of the value associated with one enumerated constant to
        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="enumMemberValue">The value as defined with <see cref="System.Runtime.Serialization.EnumMemberAttribute"/>.</param>
        /// <param name="comparisonType">One of the enumeration values that specifies how the strings will be compared.</param>
        /// <param name="result">
        /// When this method returns, result contains an object of type <#= Model.Name #> whose value is represented by value
        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
        /// underlying type of <#= Model.Name #>. Note that this value need not be a member of the <#= Model.Name #> enumeration.
        /// </param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        /// <exception cref="ArgumentException"><paramref name="comparisonType"/> is not a <see cref="StringComparison"/> value.</exception>
        public static bool TryParseFromEnumMemberValue(
            [NotNullWhen(true)] string? enumMemberValue,
            StringComparison comparisonType,
            out <#= Model.Name #> result)
        {
            switch (enumMemberValue)
            {
<#
        foreach (var curr in Model.Values)
        {
#>
                case { } s when s.Equals(<#=
                    curr.SerializationValue != null
                        ? Append($"\"{curr.SerializationValue}\"")
                        : Append($"nameof({Model.Name}.{curr.MemberName})") #>, comparisonType):
                    result = <#= Model.Name #>.<#= curr.MemberName #>;
                    return true;
<#
        }
#>
                default:
                    result = default;
                    return false;
            }
        }

        /// <summary>
        /// Converts the string representation of the value associated with one enumerated constant to
        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.
        /// </summary>
        /// <param name="enumMemberValue">The value as defined with <see cref="System.Runtime.Serialization.EnumMemberAttribute"/>.</param>
        /// <param name="result">
        /// When this method returns, result contains an object of type <#= Model.Name #> whose value is represented by value
        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
        /// underlying type of <#= Model.Name #>. Note that this value need not be a member of the <#= Model.Name #> enumeration.
        /// </param>
        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
        public static bool TryParseFromEnumMemberValue([NotNullWhen(true)] string? enumMemberValue, out <#= Model.Name #> result)
        {
            return TryParseFromEnumMemberValue(enumMemberValue, StringComparison.Ordinal, out result);
        }

        /// <summary>
        /// Converts the string representation of the value associated with one enumerated constant to
        /// an equivalent enumerated object.
        /// </summary>
        /// <param name="enumMemberValue">The value as defined with <see cref="System.Runtime.Serialization.EnumMemberAttribute"/>.</param>
        /// <param name="comparisonType">One of the enumeration values that specifies how the strings will be compared.</param>
        /// <returns>
        /// Contains an object of type <#= Model.Name #> whose value is represented by value if the parse operation succeeds.
        /// If the parse operation fails, result contains a null value.
        /// </returns>
        /// <exception cref="ArgumentException"><paramref name="comparisonType"/> is not a <see cref="StringComparison"/> value.</exception>
        public static <#= Model.Name #>? TryParseFromEnumMemberValue(string? enumMemberValue, StringComparison comparisonType)
        {
            return TryParseFromEnumMemberValue(enumMemberValue, comparisonType, out <#= Model.Name #> result) ? result : null;
        }

        /// <summary>
        /// Converts the string representation of the value associated with one enumerated constant to
        /// an equivalent enumerated object.
        /// </summary>
        /// <param name="enumMemberValue">The value as defined with <see cref="System.Runtime.Serialization.EnumMemberAttribute"/>.</param>
        /// <returns>
        /// Contains an object of type <#= Model.Name #> whose value is represented by value if the parse operation succeeds.
        /// If the parse operation fails, result contains a null value.
        /// </returns>
        public static <#= Model.Name #>? TryParseFromEnumMemberValue(string? enumMemberValue)
        {
            return TryParseFromEnumMemberValue(enumMemberValue, StringComparison.Ordinal, out <#= Model.Name #> result) ? result : null;
        }
<#
    }
#>
<#
    /* -----------------------------------------------------------------------------------------------------------------
     * DESCRIPTION ATTRIBUTE
     * -------------------------------------------------------------------------------------------------------------- */
    if (Model.HasDescription)
    {
#>

        public static bool TryCreateFromDescription(
            [NotNullWhen(true)] string? description,
            StringComparison comparisonType,
            out <#= Model.Name #> result)
        {
            switch (description)
            {
<#
        foreach (var curr in Model.Values.Where(x => x.Description != null))
        {
#>
                case { } s when s.Equals("<#= curr.Description #>", comparisonType):
                    result = <#= Model.Name #>.<#= curr.MemberName #>;
                    return true;
<#
        }
#>
                default:
                    result = default;
                    return false;
            }
        }

        public static bool TryCreateFromDescription([NotNullWhen(true)] string? description, out <#= Model.Name #> result)
        {
            return TryCreateFromDescription(description, StringComparison.Ordinal, out result);
        }

        public static <#= Model.Name #>? TryCreateFromDescription(string? description, StringComparison comparisonType)
        {
            return TryCreateFromDescription(description, comparisonType, out <#= Model.Name #> result) ? result : null;
        }

        public static <#= Model.Name #>? TryCreateFromDescription(string? description)
        {
            return TryCreateFromDescription(description, StringComparison.Ordinal, out <#= Model.Name #> result) ? result : null;
        }
<#
    }
#>
<#
    /* -----------------------------------------------------------------------------------------------------------------
     * DISPLAY ATTRIBUTE
     * -------------------------------------------------------------------------------------------------------------- */
    if (Model.HasDisplayName)
    {
#>

        public static bool TryCreateFromDisplayShortName(
            [NotNullWhen(true)] string? displayShortName,
            StringComparison comparisonType,
            out <#= Model.Name #> result)
        {
            switch (displayShortName)
            {
<#
        foreach (var curr in Model.Values.Where(x => x.Display?.ShortName != null))
        {
#>
                case { } s when s.Equals(<#=
                    curr.Display!.ResourceShortName != null
                        ? Append(curr.Display.ResourceShortName)
                        : Append($"\"{curr.Display.ShortName}\"") #>, comparisonType):
                    result = <#= Model.Name #>.<#= curr.MemberName #>;
                    return true;
<#
        }
#>
                default:
                    return TryCreateFromDisplayName(displayShortName, comparisonType, out result);
            }
        }

        public static bool TryCreateFromDisplayShortName([NotNullWhen(true)] string? displayShortName, out <#= Model.Name #> result)
        {
            return TryCreateFromDisplayShortName(displayShortName, StringComparison.Ordinal, out result);
        }

        public static <#= Model.Name #>? TryCreateFromDisplayShortName(string? displayShortName, StringComparison comparisonType)
        {
            return TryCreateFromDisplayShortName(displayShortName, comparisonType, out <#= Model.Name #> result) ? result : null;
        }

        public static <#= Model.Name #>? TryCreateFromDisplayShortName(string? displayShortName)
        {
            return TryCreateFromDisplayShortName(displayShortName, StringComparison.Ordinal, out <#= Model.Name #> result) ? result : null;
        }

        public static bool TryCreateFromDisplayName(
            [NotNullWhen(true)] string? displayName,
            StringComparison comparisonType,
            out <#= Model.Name #> result)
        {
            switch (displayName)
            {
<#
        foreach (var curr in Model.Values)
        {
#>
                case { } s when s.Equals(<#=
                    curr.Display?.ResourceName != null
                        ? Append(curr.Display.ResourceName)
                        : curr.Display?.Name != null
                            ? Append($"\"{curr.Display.Name}\"")
                            : Append($"nameof({Model.Name}.{curr.MemberName})") #>, comparisonType):
                    result = <#= Model.Name #>.<#= curr.MemberName #>;
                    return true;
<#
        }
#>
                default:
                    result = default;
                    return false;
            }
        }

        public static bool TryCreateFromDisplayName([NotNullWhen(true)] string? displayName, out <#= Model.Name #> result)
        {
            return TryCreateFromDisplayName(displayName, StringComparison.Ordinal, out result);
        }

        public static <#= Model.Name #>? TryCreateFromDisplayName(string? displayName, StringComparison comparisonType)
        {
            return TryCreateFromDisplayName(displayName, comparisonType, out <#= Model.Name #> result) ? result : null;
        }

        public static <#= Model.Name #>? TryCreateFromDisplayName(string? displayName)
        {
            return TryCreateFromDisplayName(displayName, StringComparison.Ordinal, out <#= Model.Name #> result) ? result : null;
        }
<#
    }
#>
<#
    if (Model.HasDisplayDescription)
    {
#>

        public static bool TryCreateFromDescription(
            [NotNullWhen(true)] string? description,
            StringComparison comparisonType,
            out <#= Model.Name #> result)
        {
            switch (description)
            {
<#
        foreach (var curr in Model.Values.Where(x => x.Display?.Description != null))
        {
#>
                case { } s when s.Equals(<#=
                    curr.Display!.ResourceDescription != null
                        ? Append(curr.Display.ResourceDescription)
                        : Append($"\"{curr.Display.Description}\"") #>, comparisonType):
                    result = <#= Model.Name #>.<#= curr.MemberName #>;
                    return true;
<#
        }
#>
                default:
                    result = default;
                    return false;
            }
        }

        public static bool TryCreateFromDescription([NotNullWhen(true)] string? description, out <#= Model.Name #> result)
        {
            return TryCreateFromDescription(description, StringComparison.Ordinal, out result);
        }

        public static <#= Model.Name #>? TryCreateFromDescription(string? description, StringComparison comparisonType)
        {
            return TryCreateFromDescription(description, comparisonType, out <#= Model.Name #> result) ? result : null;
        }

        public static <#= Model.Name #>? TryCreateFromDescription(string? description)
        {
            return TryCreateFromDescription(description, StringComparison.Ordinal, out <#= Model.Name #> result) ? result : null;
        }
<#
    }
#>
<#
    /* -----------------------------------------------------------------------------------------------------------------
     * MISCELLANEOUS
     * -------------------------------------------------------------------------------------------------------------- */
#>

        /// <summary>Retrieves an array of the values of the constants in the <#= Model.Name #> enumeration.</summary>
        /// <returns>An array that contains the values of the constants in <#= Model.Name #>.</returns>
        public static <#= Model.Name #>[] GetValues()
        {
            return new[]
            {
<#
    foreach (var curr in Model.UniqueValues)
    {
#>
                <#= Model.Name #>.<#= curr.MemberName #>,
<#
    }
#>
            };
        }

        /// <summary>Retrieves an array of the names of the constants in <#= Model.Name #> enumeration.</summary>
        /// <returns>A string array of the names of the constants in <#= Model.Name #>.</returns>
        public static string[] GetNames()
        {
            return new[]
            {
<#
    foreach (var curr in Model.Values)
    {
#>
                nameof(<#= Model.Name #>.<#= curr.MemberName #>),
<#
    }
#>
            };
        }

        private static bool TryParseNumeric(
            string name,
            StringComparison comparisonType,
            out <#= Model.UnderlyingType #> result)
        {
            switch (comparisonType)
            {
                case StringComparison.CurrentCulture:
                case StringComparison.CurrentCultureIgnoreCase:
                    return <#= Model.UnderlyingType #>.TryParse(name, NumberStyles.Integer, NumberFormatInfo.CurrentInfo, out result);
                case StringComparison.InvariantCulture:
                case StringComparison.InvariantCultureIgnoreCase:
                case StringComparison.Ordinal:
                case StringComparison.OrdinalIgnoreCase:
                    return <#= Model.UnderlyingType #>.TryParse(name, NumberStyles.Integer, NumberFormatInfo.InvariantInfo, out result);
                default:
                    return <#= Model.UnderlyingType #>.TryParse(name, out result);
            }
        }
    }
<#
    if (!string.IsNullOrEmpty(Model.Namespace))
    {
#>
}
<#
    }
#>
<#+
    public EnumFactoryWriter(StringBuilder builder) : base(builder)
    {
    }

    public override string GetFileName() => $"{Model.Namespace}.{Model.Name}Factory.g.cs";
#>
