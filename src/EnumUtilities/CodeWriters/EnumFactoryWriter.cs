// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Raiqub.Generators.EnumUtilities.CodeWriters
{
    using Common;
    using Models;
    using System.Text;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class EnumFactoryWriter : CodeWriterBase<EnumToGenerate>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("// <auto-generated />\r\n#nullable enable\r\n\r\nusing System;\r\nusing System.Diagnostics.CodeAnalysis;\r\nusing System.Globalization;\r\n\r\n#pragma warning disable CS1591 // publicly visible type or member must be documented\r\n\r\n");
            
            #line 14 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"

    if (!string.IsNullOrEmpty(Model.Namespace))
    {

            
            #line default
            #line hidden
            this.Write("namespace ");
            
            #line 18 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n");
            
            #line 20 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"

    }

            
            #line default
            #line hidden
            this.Write("    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\r\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"");
            
            #line 24 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CurrentAssemblyName.Name));
            
            #line default
            #line hidden
            this.Write("\", \"");
            
            #line 24 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Append($"{CurrentAssemblyName.Version}")));
            
            #line default
            #line hidden
            this.Write("\")]\r\n    public static partial class ");
            
            #line 25 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write("Factory\r\n    {\r\n");
            
            #line 27 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"

    /* -----------------------------------------------------------------------------------------------------------------
     * DEFAULT
     * -------------------------------------------------------------------------------------------------------------- */

            
            #line default
            #line hidden
            this.Write("        /// <summary>\r\n        /// Converts the string representation of the name or numeric value of one or more enumerated constants to\r\n        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.\r\n        /// </summary>\r\n        /// <param name=\"name\">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>\r\n        /// <param name=\"comparisonType\">One of the enumeration values that specifies how the strings will be compared.</param>\r\n        /// <param name=\"result\">\r\n        /// When this method returns, result contains an object of type ");
            
            #line 39 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" whose value is represented by value\r\n        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the\r\n        /// underlying type of ");
            
            #line 41 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(". Note that this value need not be a member of the ");
            
            #line 41 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" enumeration.\r\n        /// </param>\r\n        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>\r\n        /// <exception cref=\"ArgumentException\"><paramref name=\"comparisonType\"/> is not a <see cref=\"StringComparison\"/> value.</exception>\r\n        public static bool TryParse(\r\n            [NotNullWhen(true)] string? name,\r\n            StringComparison comparisonType,\r\n            out ");
            
            #line 48 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" result)\r\n        {\r\n            switch (name)\r\n            {\r\n");
            
            #line 52 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"

    foreach (var curr in Model.Values)
    {

            
            #line default
            #line hidden
            this.Write("                case { } s when s.Equals(nameof(");
            
            #line 56 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 56 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberName));
            
            #line default
            #line hidden
            this.Write("), comparisonType):\r\n                    result = ");
            
            #line 57 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 57 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberName));
            
            #line default
            #line hidden
            this.Write(";\r\n                    return true;\r\n");
            
            #line 59 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"

    }

            
            #line default
            #line hidden
            this.Write("                case { } s when TryParseNumeric(s, comparisonType, out ");
            
            #line 62 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));
            
            #line default
            #line hidden
            this.Write(" val):\r\n                    result = (");
            
            #line 63 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(")val;\r\n                    return true;\r\n                default:\r\n                    return Enum.TryParse(name, out result);\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Converts the string representation of the name or numeric value of one or more enumerated constants to\r\n        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.\r\n        /// </summary>\r\n        /// <param name=\"name\">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>\r\n        /// <param name=\"result\">\r\n        /// When this method returns, result contains an object of type ");
            
            #line 76 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" whose value is represented by value\r\n        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the\r\n        /// underlying type of ");
            
            #line 78 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(". Note that this value need not be a member of the ");
            
            #line 78 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" enumeration.\r\n        /// </param>\r\n        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>\r\n        public static bool TryParse(\r\n            [NotNullWhen(true)] string? name,\r\n            out ");
            
            #line 83 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" result)\r\n        {\r\n            switch (name)\r\n            {\r\n");
            
            #line 87 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"

    foreach (var curr in Model.Values)
    {

            
            #line default
            #line hidden
            this.Write("                case nameof(");
            
            #line 91 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 91 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberName));
            
            #line default
            #line hidden
            this.Write("):\r\n                    result = ");
            
            #line 92 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 92 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberName));
            
            #line default
            #line hidden
            this.Write(";\r\n                    return true;\r\n");
            
            #line 94 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"

    }

            
            #line default
            #line hidden
            this.Write("                case { } s when TryParseNumeric(s, StringComparison.Ordinal, out ");
            
            #line 97 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));
            
            #line default
            #line hidden
            this.Write(" val):\r\n                    result = (");
            
            #line 98 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(")val;\r\n                    return true;\r\n                default:\r\n                    return Enum.TryParse(name, out result);\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Converts the string representation of the name or numeric value of one or more enumerated constants to\r\n        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.\r\n        /// </summary>\r\n        /// <param name=\"name\">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>\r\n        /// <param name=\"result\">\r\n        /// When this method returns, result contains an object of type ");
            
            #line 111 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" whose value is represented by value\r\n        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the\r\n        /// underlying type of ");
            
            #line 113 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(". Note that this value need not be a member of the ");
            
            #line 113 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" enumeration.\r\n        /// </param>\r\n        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>\r\n        public static bool TryParseIgnoreCase(\r\n            [NotNullWhen(true)] string? name,\r\n            out ");
            
            #line 118 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" result)\r\n        {\r\n            return TryParse(name, StringComparison.OrdinalIgnoreCase, out result);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Converts the string representation of the name or numeric value of one or more enumerated constants to\r\n        /// an equivalent enumerated object.\r\n        /// </summary>\r\n        /// <param name=\"name\">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>\r\n        /// <returns>\r\n        /// Contains an object of type ");
            
            #line 129 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" whose value is represented by value if the parse operation succeeds.\r\n        /// If the parse operation fails, result contains <c>null</c> value.\r\n        /// </returns>\r\n        public static ");
            
            #line 132 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write("? TryParse(string? name)\r\n        {\r\n            return TryParse(name, out ");
            
            #line 134 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" result) ? result : null;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Converts the string representation of the name or numeric value of one or more enumerated constants to\r\n        /// an equivalent enumerated object.\r\n        /// </summary>\r\n        /// <param name=\"name\">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>\r\n        /// <returns>\r\n        /// Contains an object of type ");
            
            #line 143 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" whose value is represented by value if the parse operation succeeds.\r\n        /// If the parse operation fails, result contains <c>null</c> value.\r\n        /// </returns>\r\n        public static ");
            
            #line 146 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write("? TryParseIgnoreCase(string? name)\r\n        {\r\n            return TryParse(name, StringComparison.OrdinalIgnoreCase, out ");
            
            #line 148 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" result) ? result : null;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Converts the string representation of the name or numeric value of one or more enumerated constants to\r\n        /// an equivalent enumerated object.\r\n        /// </summary>\r\n        /// <param name=\"name\">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>\r\n        /// <param name=\"comparisonType\">One of the enumeration values that specifies how the strings will be compared.</param>\r\n        /// <returns>\r\n        /// Contains an object of type ");
            
            #line 158 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" whose value is represented by value if the parse operation succeeds.\r\n        /// If the parse operation fails, result contains <c>null</c> value.\r\n        /// </returns>\r\n        /// <exception cref=\"ArgumentException\"><paramref name=\"comparisonType\"/> is not a <see cref=\"StringComparison\"/> value.</exception>\r\n        public static ");
            
            #line 162 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write("? TryParse(string? name, StringComparison comparisonType)\r\n        {\r\n            return TryParse(name, comparisonType, out ");
            
            #line 164 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" result) ? result : null;\r\n        }\r\n");
            
            #line 166 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"

    /* -----------------------------------------------------------------------------------------------------------------
     * ENUM MEMBER ATTRIBUTE
     * -------------------------------------------------------------------------------------------------------------- */
    if (Model.HasSerializationValue)
    {

            
            #line default
            #line hidden
            this.Write("\r\n        /// <summary>\r\n        /// Converts the string representation of the value associated with one enumerated constant to\r\n        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.\r\n        /// </summary>\r\n        /// <param name=\"enumMemberValue\">The value as defined with <see cref=\"System.Runtime.Serialization.EnumMemberAttribute\"/>.</param>\r\n        /// <param name=\"comparisonType\">One of the enumeration values that specifies how the strings will be compared.</param>\r\n        /// <param name=\"result\">\r\n        /// When this method returns, result contains an object of type ");
            
            #line 181 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" whose value is represented by value\r\n        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the\r\n        /// underlying type of ");
            
            #line 183 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(". Note that this value need not be a member of the ");
            
            #line 183 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" enumeration.\r\n        /// </param>\r\n        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>\r\n        /// <exception cref=\"ArgumentException\"><paramref name=\"comparisonType\"/> is not a <see cref=\"StringComparison\"/> value.</exception>\r\n        public static bool TryParseFromEnumMemberValue(\r\n            [NotNullWhen(true)] string? enumMemberValue,\r\n            StringComparison comparisonType,\r\n            out ");
            
            #line 190 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" result)\r\n        {\r\n            switch (enumMemberValue)\r\n            {\r\n");
            
            #line 194 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"

        foreach (var curr in Model.Values)
        {

            
            #line default
            #line hidden
            this.Write("                case { } s when s.Equals(");
            
            #line 198 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(curr.SerializationValue != null
                        ? Append($"\"{curr.SerializationValue}\"")
                        : Append($"nameof({Model.Name}.{curr.MemberName})")));
            
            #line default
            #line hidden
            this.Write(", comparisonType):\r\n                    result = ");
            
            #line 202 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 202 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberName));
            
            #line default
            #line hidden
            this.Write(";\r\n                    return true;\r\n");
            
            #line 204 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"

        }

            
            #line default
            #line hidden
            this.Write("                default:\r\n                    result = default;\r\n                    return false;\r\n            }\r\n        }\r\n\r\n        /// <summary>\r\n        /// Converts the string representation of the value associated with one enumerated constant to\r\n        /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.\r\n        /// </summary>\r\n        /// <param name=\"enumMemberValue\">The value as defined with <see cref=\"System.Runtime.Serialization.EnumMemberAttribute\"/>.</param>\r\n        /// <param name=\"result\">\r\n        /// When this method returns, result contains an object of type ");
            
            #line 219 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" whose value is represented by value\r\n        /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the\r\n        /// underlying type of ");
            
            #line 221 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(". Note that this value need not be a member of the ");
            
            #line 221 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" enumeration.\r\n        /// </param>\r\n        /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>\r\n        public static bool TryParseFromEnumMemberValue([NotNullWhen(true)] string? enumMemberValue, out ");
            
            #line 224 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" result)\r\n        {\r\n            return TryParseFromEnumMemberValue(enumMemberValue, StringComparison.Ordinal, out result);\r\n        }\r\n\r\n        /// <summary>\r\n        /// Converts the string representation of the value associated with one enumerated constant to\r\n        /// an equivalent enumerated object.\r\n        /// </summary>\r\n        /// <param name=\"enumMemberValue\">The value as defined with <see cref=\"System.Runtime.Serialization.EnumMemberAttribute\"/>.</param>\r\n        /// <param name=\"comparisonType\">One of the enumeration values that specifies how the strings will be compared.</param>\r\n        /// <returns>\r\n        /// Contains an object of type ");
            
            #line 236 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" whose value is represented by value if the parse operation succeeds.\r\n        /// If the parse operation fails, result contains a null value.\r\n        /// </returns>\r\n        /// <exception cref=\"ArgumentException\"><paramref name=\"comparisonType\"/> is not a <see cref=\"StringComparison\"/> value.</exception>\r\n        public static ");
            
            #line 240 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write("? TryParseFromEnumMemberValue(string? enumMemberValue, StringComparison comparisonType)\r\n        {\r\n            return TryParseFromEnumMemberValue(enumMemberValue, comparisonType, out ");
            
            #line 242 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" result) ? result : null;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Converts the string representation of the value associated with one enumerated constant to\r\n        /// an equivalent enumerated object.\r\n        /// </summary>\r\n        /// <param name=\"enumMemberValue\">The value as defined with <see cref=\"System.Runtime.Serialization.EnumMemberAttribute\"/>.</param>\r\n        /// <returns>\r\n        /// Contains an object of type ");
            
            #line 251 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" whose value is represented by value if the parse operation succeeds.\r\n        /// If the parse operation fails, result contains a null value.\r\n        /// </returns>\r\n        public static ");
            
            #line 254 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write("? TryParseFromEnumMemberValue(string? enumMemberValue)\r\n        {\r\n            return TryParseFromEnumMemberValue(enumMemberValue, StringComparison.Ordinal, out ");
            
            #line 256 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" result) ? result : null;\r\n        }\r\n");
            
            #line 258 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"

    }

            
            #line default
            #line hidden
            
            #line 261 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"

    /* -----------------------------------------------------------------------------------------------------------------
     * DESCRIPTION ATTRIBUTE
     * -------------------------------------------------------------------------------------------------------------- */
    if (Model.HasDescription)
    {

            
            #line default
            #line hidden
            this.Write("\r\n        public static bool TryCreateFromDescription(\r\n            [NotNullWhen(true)] string? description,\r\n            StringComparison comparisonType,\r\n            out ");
            
            #line 272 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" result)\r\n        {\r\n            switch (description)\r\n            {\r\n");
            
            #line 276 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"

        foreach (var curr in Model.Values.Where(x => x.Description != null))
        {

            
            #line default
            #line hidden
            this.Write("                case { } s when s.Equals(\"");
            
            #line 280 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(curr.Description));
            
            #line default
            #line hidden
            this.Write("\", comparisonType):\r\n                    result = ");
            
            #line 281 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 281 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberName));
            
            #line default
            #line hidden
            this.Write(";\r\n                    return true;\r\n");
            
            #line 283 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"

        }

            
            #line default
            #line hidden
            this.Write("                default:\r\n                    result = default;\r\n                    return false;\r\n            }\r\n        }\r\n\r\n        public static bool TryCreateFromDescription([NotNullWhen(true)] string? description, out ");
            
            #line 292 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" result)\r\n        {\r\n            return TryCreateFromDescription(description, StringComparison.Ordinal, out result);\r\n        }\r\n\r\n        public static ");
            
            #line 297 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write("? TryCreateFromDescription(string? description, StringComparison comparisonType)\r\n        {\r\n            return TryCreateFromDescription(description, comparisonType, out ");
            
            #line 299 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" result) ? result : null;\r\n        }\r\n\r\n        public static ");
            
            #line 302 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write("? TryCreateFromDescription(string? description)\r\n        {\r\n            return TryCreateFromDescription(description, StringComparison.Ordinal, out ");
            
            #line 304 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" result) ? result : null;\r\n        }\r\n");
            
            #line 306 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"

    }

            
            #line default
            #line hidden
            
            #line 309 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"

    /* -----------------------------------------------------------------------------------------------------------------
     * DISPLAY ATTRIBUTE
     * -------------------------------------------------------------------------------------------------------------- */
    if (Model.HasDisplayName)
    {

            
            #line default
            #line hidden
            this.Write("\r\n        public static bool TryCreateFromDisplayShortName(\r\n            [NotNullWhen(true)] string? displayShortName,\r\n            StringComparison comparisonType,\r\n            out ");
            
            #line 320 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" result)\r\n        {\r\n            switch (displayShortName)\r\n            {\r\n");
            
            #line 324 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"

        foreach (var curr in Model.Values.Where(x => x.Display?.ShortName != null))
        {

            
            #line default
            #line hidden
            this.Write("                case { } s when s.Equals(");
            
            #line 328 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(curr.Display!.ResourceShortName != null
                        ? Append(curr.Display.ResourceShortName)
                        : Append($"\"{curr.Display.ShortName}\"")));
            
            #line default
            #line hidden
            this.Write(", comparisonType):\r\n                    result = ");
            
            #line 332 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 332 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberName));
            
            #line default
            #line hidden
            this.Write(";\r\n                    return true;\r\n");
            
            #line 334 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"

        }

            
            #line default
            #line hidden
            this.Write("                default:\r\n                    return TryCreateFromDisplayName(displayShortName, comparisonType, out result);\r\n            }\r\n        }\r\n\r\n        public static bool TryCreateFromDisplayShortName([NotNullWhen(true)] string? displayShortName, out ");
            
            #line 342 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" result)\r\n        {\r\n            return TryCreateFromDisplayShortName(displayShortName, StringComparison.Ordinal, out result);\r\n        }\r\n\r\n        public static ");
            
            #line 347 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write("? TryCreateFromDisplayShortName(string? displayShortName, StringComparison comparisonType)\r\n        {\r\n            return TryCreateFromDisplayShortName(displayShortName, comparisonType, out ");
            
            #line 349 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" result) ? result : null;\r\n        }\r\n\r\n        public static ");
            
            #line 352 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write("? TryCreateFromDisplayShortName(string? displayShortName)\r\n        {\r\n            return TryCreateFromDisplayShortName(displayShortName, StringComparison.Ordinal, out ");
            
            #line 354 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" result) ? result : null;\r\n        }\r\n\r\n        public static bool TryCreateFromDisplayName(\r\n            [NotNullWhen(true)] string? displayName,\r\n            StringComparison comparisonType,\r\n            out ");
            
            #line 360 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" result)\r\n        {\r\n            switch (displayName)\r\n            {\r\n");
            
            #line 364 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"

        foreach (var curr in Model.Values)
        {

            
            #line default
            #line hidden
            this.Write("                case { } s when s.Equals(");
            
            #line 368 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(curr.Display?.ResourceName != null
                        ? Append(curr.Display.ResourceName)
                        : curr.Display?.Name != null
                            ? Append($"\"{curr.Display.Name}\"")
                            : Append($"nameof({Model.Name}.{curr.MemberName})")));
            
            #line default
            #line hidden
            this.Write(", comparisonType):\r\n                    result = ");
            
            #line 374 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 374 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberName));
            
            #line default
            #line hidden
            this.Write(";\r\n                    return true;\r\n");
            
            #line 376 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"

        }

            
            #line default
            #line hidden
            this.Write("                default:\r\n                    result = default;\r\n                    return false;\r\n            }\r\n        }\r\n\r\n        public static bool TryCreateFromDisplayName([NotNullWhen(true)] string? displayName, out ");
            
            #line 385 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" result)\r\n        {\r\n            return TryCreateFromDisplayName(displayName, StringComparison.Ordinal, out result);\r\n        }\r\n\r\n        public static ");
            
            #line 390 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write("? TryCreateFromDisplayName(string? displayName, StringComparison comparisonType)\r\n        {\r\n            return TryCreateFromDisplayName(displayName, comparisonType, out ");
            
            #line 392 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" result) ? result : null;\r\n        }\r\n\r\n        public static ");
            
            #line 395 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write("? TryCreateFromDisplayName(string? displayName)\r\n        {\r\n            return TryCreateFromDisplayName(displayName, StringComparison.Ordinal, out ");
            
            #line 397 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" result) ? result : null;\r\n        }\r\n");
            
            #line 399 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"

    }

            
            #line default
            #line hidden
            
            #line 402 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"

    if (Model.HasDisplayDescription)
    {

            
            #line default
            #line hidden
            this.Write("\r\n        public static bool TryCreateFromDescription(\r\n            [NotNullWhen(true)] string? description,\r\n            StringComparison comparisonType,\r\n            out ");
            
            #line 410 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" result)\r\n        {\r\n            switch (description)\r\n            {\r\n");
            
            #line 414 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"

        foreach (var curr in Model.Values.Where(x => x.Display?.Description != null))
        {

            
            #line default
            #line hidden
            this.Write("                case { } s when s.Equals(");
            
            #line 418 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(curr.Display!.ResourceDescription != null
                        ? Append(curr.Display.ResourceDescription)
                        : Append($"\"{curr.Display.Description}\"")));
            
            #line default
            #line hidden
            this.Write(", comparisonType):\r\n                    result = ");
            
            #line 422 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 422 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberName));
            
            #line default
            #line hidden
            this.Write(";\r\n                    return true;\r\n");
            
            #line 424 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"

        }

            
            #line default
            #line hidden
            this.Write("                default:\r\n                    result = default;\r\n                    return false;\r\n            }\r\n        }\r\n\r\n        public static bool TryCreateFromDescription([NotNullWhen(true)] string? description, out ");
            
            #line 433 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" result)\r\n        {\r\n            return TryCreateFromDescription(description, StringComparison.Ordinal, out result);\r\n        }\r\n\r\n        public static ");
            
            #line 438 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write("? TryCreateFromDescription(string? description, StringComparison comparisonType)\r\n        {\r\n            return TryCreateFromDescription(description, comparisonType, out ");
            
            #line 440 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" result) ? result : null;\r\n        }\r\n\r\n        public static ");
            
            #line 443 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write("? TryCreateFromDescription(string? description)\r\n        {\r\n            return TryCreateFromDescription(description, StringComparison.Ordinal, out ");
            
            #line 445 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" result) ? result : null;\r\n        }\r\n");
            
            #line 447 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"

    }

            
            #line default
            #line hidden
            
            #line 450 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"

    /* -----------------------------------------------------------------------------------------------------------------
     * MISCELLANEOUS
     * -------------------------------------------------------------------------------------------------------------- */

            
            #line default
            #line hidden
            this.Write("\r\n        /// <summary>Retrieves an array of the values of the constants in the ");
            
            #line 456 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" enumeration.</summary>\r\n        /// <returns>An array that contains the values of the constants in ");
            
            #line 457 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(".</returns>\r\n        public static ");
            
            #line 458 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write("[] GetValues()\r\n        {\r\n            return new[]\r\n            {\r\n");
            
            #line 462 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"

    foreach (var curr in Model.UniqueValues)
    {

            
            #line default
            #line hidden
            this.Write("                ");
            
            #line 466 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 466 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberName));
            
            #line default
            #line hidden
            this.Write(",\r\n");
            
            #line 467 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"

    }

            
            #line default
            #line hidden
            this.Write("            };\r\n        }\r\n\r\n        /// <summary>Retrieves an array of the names of the constants in ");
            
            #line 473 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(" enumeration.</summary>\r\n        /// <returns>A string array of the names of the constants in ");
            
            #line 474 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(".</returns>\r\n        public static string[] GetNames()\r\n        {\r\n            return new[]\r\n            {\r\n");
            
            #line 479 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"

    foreach (var curr in Model.Values)
    {

            
            #line default
            #line hidden
            this.Write("                nameof(");
            
            #line 483 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 483 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberName));
            
            #line default
            #line hidden
            this.Write("),\r\n");
            
            #line 484 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"

    }

            
            #line default
            #line hidden
            this.Write("            };\r\n        }\r\n\r\n        private static bool TryParseNumeric(\r\n            string name,\r\n            StringComparison comparisonType,\r\n            out ");
            
            #line 493 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));
            
            #line default
            #line hidden
            this.Write(" result)\r\n        {\r\n            switch (comparisonType)\r\n            {\r\n                case StringComparison.CurrentCulture:\r\n                case StringComparison.CurrentCultureIgnoreCase:\r\n                    return ");
            
            #line 499 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));
            
            #line default
            #line hidden
            this.Write(".TryParse(name, NumberStyles.Integer, NumberFormatInfo.CurrentInfo, out result);\r\n                case StringComparison.InvariantCulture:\r\n                case StringComparison.InvariantCultureIgnoreCase:\r\n                case StringComparison.Ordinal:\r\n                case StringComparison.OrdinalIgnoreCase:\r\n                    return ");
            
            #line 504 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));
            
            #line default
            #line hidden
            this.Write(".TryParse(name, NumberStyles.Integer, NumberFormatInfo.InvariantInfo, out result);\r\n                default:\r\n                    return ");
            
            #line 506 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));
            
            #line default
            #line hidden
            this.Write(".TryParse(name, out result);\r\n            }\r\n        }\r\n    }\r\n");
            
            #line 510 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"

    if (!string.IsNullOrEmpty(Model.Namespace))
    {

            
            #line default
            #line hidden
            this.Write("}\r\n");
            
            #line 515 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"

    }

            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        #line 518 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\src\EnumUtilities\CodeWriters\EnumFactoryWriter.tt"

    public EnumFactoryWriter(StringBuilder builder) : base(builder)
    {
    }

    public override string GetFileName() => $"{Model.Namespace}.{Model.Name}Factory.g.cs";

        
        #line default
        #line hidden
    }
    
}
