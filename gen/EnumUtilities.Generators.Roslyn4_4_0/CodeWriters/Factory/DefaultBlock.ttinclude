<#+
    private void WriteDefaultBlock()
    {
#>
    /// <summary>
    /// Converts the string representation of the name or numeric value of one or more enumerated constants to
    /// an equivalent enumerated object.
    /// </summary>
    /// <param name="value">The string representation of the enumeration name or underlying value to convert.</param>
    /// <param name="ignoreCase"><see langword="true"/> to ignore case; <see langword="false"/> to regard case.</param>
    /// <returns>The value represented by the specified name or numeric value. Note that this value need not be a member of the <#= Model.Name #> enumeration.</returns>
    /// <exception cref="ArgumentNullException"><paramref name="value"/> is <see langword="null"/>.</exception>
    /// <exception cref="ArgumentException"><paramref name="value"/> is empty or does not represent a valid value.</exception>
    public static <#= Model.RefName #> Parse(string value, bool ignoreCase = false)
    {
        if (value is null) ThrowHelper.ThrowArgumentNullException(nameof(value));
        TryParseName(value.AsSpan(), <#= GetIgnoreCaseToComparisonExpression() #>, throwOnFailure: true, out var result);
        return (<#= Model.RefName #>)result;
    }

    /// <summary>
    /// Converts the string representation of the name or numeric value of one or more enumerated constants to
    /// an equivalent enumerated object.
    /// </summary>
    /// <param name="value">The string representation of the enumeration name or underlying value to convert.</param>
    /// <param name="ignoreCase"><see langword="true"/> to ignore case; <see langword="false"/> to regard case.</param>
    /// <returns>The value represented by the specified name or numeric value. Note that this value need not be a member of the <#= Model.Name #> enumeration.</returns>
    /// <exception cref="ArgumentException"><paramref name="value"/> is empty or does not represent a valid value.</exception>
    public static <#= Model.RefName #> Parse(ReadOnlySpan<char> value, bool ignoreCase = false)
    {
        TryParseName(value, <#= GetIgnoreCaseToComparisonExpression() #>, throwOnFailure: true, out var result);
        return (<#= Model.RefName #>)result;
    }

    /// <summary>
    /// Converts the string representation of the name or numeric value of one or more enumerated constants to
    /// an equivalent enumerated object.
    /// </summary>
    /// <param name="value">The string representation of the enumeration name or underlying value to convert.</param>
    /// <param name="ignoreCase"><see langword="true"/> to ignore case; <see langword="false"/> to regard case.</param>
    /// <returns>The value represented by the specified name or numeric value or null. Note that this value need not be a member of the <#= Model.Name #> enumeration.</returns>
    /// <exception cref="ArgumentException"><paramref name="value"/> is empty or does not represent a valid value.</exception>
    [return: NotNullIfNotNull("value")]
    public static <#= Model.RefName #>? ParseOrNull(string? value, bool ignoreCase = false)
    {
        if (value is null) return null;
        TryParseName(value.AsSpan(), <#= GetIgnoreCaseToComparisonExpression() #>, throwOnFailure: true, out var result);
        return (<#= Model.RefName #>)result;
    }

    /// <summary>
    /// Converts the string representation of the name or numeric value of one or more enumerated constants to
    /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.
    /// </summary>
    /// <param name="value">The string representation of the enumeration name or underlying value to convert.</param>
    /// <param name="ignoreCase"><see langword="true"/> to ignore case; <see langword="false"/> to regard case.</param>
    /// <param name="result">
    /// When this method returns, result contains an object of type <#= Model.Name #> whose value is represented by value
    /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
    /// underlying type of <#= Model.Name #>. Note that this value need not be a member of the <#= Model.Name #> enumeration.
    /// </param>
    /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
    public static bool TryParse([NotNullWhen(true)] string? value, bool ignoreCase, out <#= Model.RefName #> result)
    {
        Unsafe.SkipInit(out result);
        return TryParseName(value.AsSpan(), <#= GetIgnoreCaseToComparisonExpression() #>, throwOnFailure: false, out Unsafe.As<<#= Model.RefName #>, <#= Model.UnderlyingType #>>(ref result));
    }

    /// <summary>
    /// Converts the string representation of the name or numeric value of one or more enumerated constants to
    /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.
    /// </summary>
    /// <param name="value">The string representation of the enumeration name or underlying value to convert.</param>
    /// <param name="result">
    /// When this method returns, result contains an object of type <#= Model.Name #> whose value is represented by value
    /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
    /// underlying type of <#= Model.Name #>. Note that this value need not be a member of the <#= Model.Name #> enumeration.
    /// </param>
    /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
    public static bool TryParse([NotNullWhen(true)] string? value, out <#= Model.RefName #> result)
    {
        Unsafe.SkipInit(out result);
        return TryParseName(value.AsSpan(), <#= GetComparisonExpression(false) #>, throwOnFailure: false, out Unsafe.As<<#= Model.RefName #>, <#= Model.UnderlyingType #>>(ref result));
    }

    /// <summary>
    /// Converts the string representation of the name or numeric value of one or more enumerated constants to
    /// an equivalent enumerated object.
    /// </summary>
    /// <param name="value">The string representation of the enumeration name or underlying value to convert.</param>
    /// <param name="ignoreCase"><see langword="true"/> to ignore case; <see langword="false"/> to regard case.</param>
    /// <returns>
    /// Contains an object of type <#= Model.Name #> whose value is represented by value if the parse operation succeeds.
    /// If the parse operation fails, result contains <c>null</c> value.
    /// </returns>
    public static <#= Model.RefName #>? TryParse(string? value, bool ignoreCase = false)
    {
        return TryParseName(value.AsSpan(), <#= GetIgnoreCaseToComparisonExpression() #>, throwOnFailure: false, out var result) ? (<#= Model.RefName #>?)result : null;
    }

    /// <summary>
    /// Converts the string representation of the name or numeric value of one or more enumerated constants to
    /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.
    /// </summary>
    /// <param name="value">The string representation of the enumeration name or underlying value to convert.</param>
    /// <param name="ignoreCase"><see langword="true"/> to ignore case; <see langword="false"/> to regard case.</param>
    /// <param name="result">
    /// When this method returns, result contains an object of type <#= Model.Name #> whose value is represented by value
    /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
    /// underlying type of <#= Model.Name #>. Note that this value need not be a member of the <#= Model.Name #> enumeration.
    /// </param>
    /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
    public static bool TryParse(ReadOnlySpan<char> value, bool ignoreCase, out <#= Model.RefName #> result)
    {
        Unsafe.SkipInit(out result);
        return TryParseName(value, <#= GetIgnoreCaseToComparisonExpression() #>, throwOnFailure: false, out Unsafe.As<<#= Model.RefName #>, <#= Model.UnderlyingType #>>(ref result));
    }

    /// <summary>
    /// Converts the string representation of the name or numeric value of one or more enumerated constants to
    /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.
    /// </summary>
    /// <param name="value">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>
    /// <param name="result">
    /// When this method returns, result contains an object of type <#= Model.Name #> whose value is represented by value
    /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
    /// underlying type of <#= Model.Name #>. Note that this value need not be a member of the <#= Model.Name #> enumeration.
    /// </param>
    /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
    public static bool TryParse(ReadOnlySpan<char> value, out <#= Model.RefName #> result)
    {
        Unsafe.SkipInit(out result);
        return TryParseName(value, <#= GetComparisonExpression(false) #>, throwOnFailure: false, out Unsafe.As<<#= Model.RefName #>, <#= Model.UnderlyingType #>>(ref result));
    }

    /// <summary>
    /// Converts the string representation of the name or numeric value of one or more enumerated constants to
    /// an equivalent enumerated object.
    /// </summary>
    /// <param name="value">The string representation of the enumeration name or underlying value to convert.</param>
    /// <param name="ignoreCase"><see langword="true"/> to ignore case; <see langword="false"/> to regard case.</param>
    /// <returns>
    /// Contains an object of type <#= Model.Name #> whose value is represented by value if the parse operation succeeds.
    /// If the parse operation fails, result contains <c>null</c> value.
    /// </returns>
    public static <#= Model.RefName #>? TryParse(ReadOnlySpan<char> value, bool ignoreCase = false)
    {
        return TryParseName(value, <#= GetIgnoreCaseToComparisonExpression() #>, throwOnFailure: false, out var result) ? (<#= Model.RefName #>?)result : null;
    }

<#+
        WriteTryParse(x => x.MemberName, "Name");
#>

    /// <summary>
    /// Converts the string representation of the name or numeric value of one or more enumerated constants to
    /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.
    /// </summary>
    /// <param name="name">The string representation of the enumeration name or underlying value to convert.</param>
    /// <param name="comparisonType">One of the enumeration values that specifies how the strings will be compared.</param>
    /// <param name="result">
    /// When this method returns, result contains an object of type <#= Model.Name #> whose value is represented by value
    /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
    /// underlying type of <#= Model.Name #>. Note that this value need not be a member of the <#= Model.Name #> enumeration.
    /// </param>
    /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
    /// <exception cref="ArgumentException"><paramref name="comparisonType"/> is not a <see cref="StringComparison"/> value.</exception>
    [Obsolete("Use TryParse overload with 'ignoreCase' parameter")]
    public static bool TryParse(
        [NotNullWhen(true)] string? name,
        StringComparison comparisonType,
        out <#= Model.RefName #> result)
    {
        Unsafe.SkipInit(out result);
        return TryParseName(name.AsSpan(), comparisonType, throwOnFailure: false, out Unsafe.As<<#= Model.RefName #>, <#= Model.UnderlyingType #>>(ref result));
    }

    /// <summary>
    /// Converts the string representation of the name or numeric value of one or more enumerated constants to
    /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.
    /// </summary>
    /// <param name="name">The case-insensitive string representation of the enumeration name or underlying value to convert.</param>
    /// <param name="result">
    /// When this method returns, result contains an object of type <#= Model.Name #> whose value is represented by value
    /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
    /// underlying type of <#= Model.Name #>. Note that this value need not be a member of the <#= Model.Name #> enumeration.
    /// </param>
    /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
    [Obsolete("Use TryParse overload with 'ignoreCase' parameter")]
    public static bool TryParseIgnoreCase(
        [NotNullWhen(true)] string? name,
        out <#= Model.RefName #> result)
    {
        Unsafe.SkipInit(out result);
        return TryParseName(name.AsSpan(), <#= GetComparisonExpression(true) #>, throwOnFailure: false, out Unsafe.As<<#= Model.RefName #>, <#= Model.UnderlyingType #>>(ref result));
    }

    /// <summary>
    /// Converts the string representation of the name or numeric value of one or more enumerated constants to
    /// an equivalent enumerated object.
    /// </summary>
    /// <param name="name">The case-insensitive string representation of the enumeration name or underlying value to convert.</param>
    /// <returns>
    /// Contains an object of type <#= Model.Name #> whose value is represented by value if the parse operation succeeds.
    /// If the parse operation fails, result contains <c>null</c> value.
    /// </returns>
    [Obsolete("Use TryParse overload with 'ignoreCase' parameter")]
    public static <#= Model.RefName #>? TryParseIgnoreCase(string? name)
    {
        return TryParseName(name.AsSpan(), <#= GetComparisonExpression(true) #>, throwOnFailure: false, out var result) ? (<#= Model.RefName #>?)result : null;
    }

    /// <summary>
    /// Converts the string representation of the name or numeric value of one or more enumerated constants to
    /// an equivalent enumerated object.
    /// </summary>
    /// <param name="name">The string representation of the enumeration name or underlying value to convert.</param>
    /// <param name="comparisonType">One of the enumeration values that specifies how the strings will be compared.</param>
    /// <returns>
    /// Contains an object of type <#= Model.Name #> whose value is represented by value if the parse operation succeeds.
    /// If the parse operation fails, result contains <c>null</c> value.
    /// </returns>
    /// <exception cref="ArgumentException"><paramref name="comparisonType"/> is not a <see cref="StringComparison"/> value.</exception>
    [Obsolete("Use TryParse overload with 'ignoreCase' parameter")]
    public static <#= Model.RefName #>? TryParse(string? name, StringComparison comparisonType)
    {
        return TryParseName(name.AsSpan(), comparisonType, throwOnFailure: false, out var result) ? (<#= Model.RefName #>?)result : null;
    }
<#+
    }
#>
