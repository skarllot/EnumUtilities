<#+
    public void WriteJsonBlock()
    {
        if (!Model.HasJsonProperty && (Model.SelectedGenerators & SelectedGenerators.JsonConverter) == 0)
            return;
#>

    /// <summary>
    /// Converts the string representation of the serialized JSON value to an equivalent enumerated object.
    /// </summary>
    /// <param name="value">The string representation of the enumeration serialized JSON value to convert.</param>
    /// <param name="ignoreCase"><see langword="true"/> to ignore case; <see langword="false"/> to regard case.</param>
    /// <returns>The value represented by the specified serialized value. Note that this value need not be a member of the <#= Model.Name #> enumeration.</returns>
    /// <exception cref="ArgumentNullException"><paramref name="value"/> is <see langword="null"/>.</exception>
    /// <exception cref="ArgumentException"><paramref name="value"/> is empty or does not represent a valid value.</exception>
    public static <#= Model.RefName #> ParseJsonString(string value, bool ignoreCase = false)
    {
        if (value is null) ThrowHelper.ThrowArgumentNullException(nameof(value));
        TryParseJsonString(value.AsSpan(), <#= GetIgnoreCaseToComparisonExpression() #>, throwOnFailure: true, out var result);
        return (<#= Model.RefName #>)result;
    }

    /// <summary>
    /// Converts the string representation of the serialized JSON value to an equivalent enumerated object.
    /// </summary>
    /// <param name="value">The string representation of the enumeration serialized JSON value to convert.</param>
    /// <param name="ignoreCase"><see langword="true"/> to ignore case; <see langword="false"/> to regard case.</param>
    /// <returns>The value represented by the specified serialized value. Note that this value need not be a member of the <#= Model.Name #> enumeration.</returns>
    /// <exception cref="ArgumentException"><paramref name="value"/> is empty or does not represent a valid value.</exception>
    public static <#= Model.RefName #> ParseJsonString(ReadOnlySpan<char> value, bool ignoreCase = false)
    {
        TryParseJsonString(value, <#= GetIgnoreCaseToComparisonExpression() #>, throwOnFailure: true, out var result);
        return (<#= Model.RefName #>)result;
    }

    /// <summary>
    /// Converts the string representation of the serialized JSON value to an equivalent enumerated object.
    /// </summary>
    /// <param name="value">The string representation of the enumeration serialized JSON value to convert.</param>
    /// <param name="ignoreCase"><see langword="true"/> to ignore case; <see langword="false"/> to regard case.</param>
    /// <returns>The value represented by the specified serialized value or null. Note that this value need not be a member of the <#= Model.Name #> enumeration.</returns>
    /// <exception cref="ArgumentException"><paramref name="value"/> is empty or does not represent a valid value.</exception>
    [return: NotNullIfNotNull("value")]
    public static <#= Model.RefName #>? ParseJsonStringOrNull(string? value, bool ignoreCase = false)
    {
        if (value is null) return null;
        TryParseJsonString(value.AsSpan(), <#= GetIgnoreCaseToComparisonExpression() #>, throwOnFailure: true, out var result);
        return (<#= Model.RefName #>)result;
    }

    /// <summary>
    /// Converts the string representation of the serialized JSON value to an equivalent enumerated object.
    /// The return value indicates whether the conversion succeeded.
    /// </summary>
    /// <param name="value">The string representation of the enumeration serialized JSON value to convert.</param>
    /// <param name="ignoreCase"><see langword="true"/> to ignore case; <see langword="false"/> to regard case.</param>
    /// <param name="result">
    /// When this method returns, result contains an object of type <#= Model.Name #> whose value is represented by a
    /// serialized JSON value if the parse operation succeeds. If the parse operation fails, result contains the default
    /// value of the underlying type of <#= Model.Name #>. Note that this value need not be a member of the <#= Model.Name #> enumeration.
    /// </param>
    /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
    public static bool TryParseJsonString([NotNullWhen(true)] string? value, bool ignoreCase, out <#= Model.RefName #> result)
    {
        Unsafe.SkipInit(out result);
        return TryParseJsonString(value.AsSpan(), <#= GetIgnoreCaseToComparisonExpression() #>, throwOnFailure: false, out Unsafe.As<<#= Model.RefName #>, <#= Model.UnderlyingType #>>(ref result));
    }

    /// <summary>
    /// Converts the string representation of the serialized JSON value to an equivalent enumerated object.
    /// The return value indicates whether the conversion succeeded.
    /// </summary>
    /// <param name="value">The string representation of the enumeration serialized JSON value to convert.</param>
    /// <param name="result">
    /// When this method returns, result contains an object of type <#= Model.Name #> whose value is represented by a
    /// serialized JSON value if the parse operation succeeds. If the parse operation fails, result contains the default
    /// value of the underlying type of <#= Model.Name #>. Note that this value need not be a member of the <#= Model.Name #> enumeration.
    /// </param>
    /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
    public static bool TryParseJsonString([NotNullWhen(true)] string? value, out <#= Model.RefName #> result)
    {
        Unsafe.SkipInit(out result);
        return TryParseJsonString(value.AsSpan(), <#= GetComparisonExpression(false) #>, throwOnFailure: false, out Unsafe.As<<#= Model.RefName #>, <#= Model.UnderlyingType #>>(ref result));
    }

    /// <summary>
    /// Converts the string representation of the serialized JSON value to an equivalent enumerated object.
    /// </summary>
    /// <param name="value">The string representation of the enumeration serialized JSON value to convert.</param>
    /// <param name="ignoreCase"><see langword="true"/> to ignore case; <see langword="false"/> to regard case.</param>
    /// <returns>
    /// Contains an object of type <#= Model.Name #> whose value is represented by value if the parse operation succeeds.
    /// If the parse operation fails, result contains a null value.
    /// </returns>
    public static <#= Model.RefName #>? TryParseJsonString(string? value, bool ignoreCase = false)
    {
        return TryParseJsonString(value.AsSpan(), <#= GetIgnoreCaseToComparisonExpression() #>, throwOnFailure: false, out var result) ? (<#= Model.RefName #>?)result : null;
    }

    /// <summary>
    /// Converts the string representation of the serialized JSON value to an equivalent enumerated object.
    /// The return value indicates whether the conversion succeeded.
    /// </summary>
    /// <param name="value">The string representation of the enumeration serialized JSON value to convert.</param>
    /// <param name="ignoreCase"><see langword="true"/> to ignore case; <see langword="false"/> to regard case.</param>
    /// <param name="result">
    /// When this method returns, result contains an object of type <#= Model.Name #> whose value is represented by a
    /// serialized JSON value if the parse operation succeeds. If the parse operation fails, result contains the default
    /// value of the underlying type of <#= Model.Name #>. Note that this value need not be a member of the <#= Model.Name #> enumeration.
    /// </param>
    /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
    public static bool TryParseJsonString(ReadOnlySpan<char> value, bool ignoreCase, out <#= Model.RefName #> result)
    {
        Unsafe.SkipInit(out result);
        return TryParseJsonString(value, <#= GetIgnoreCaseToComparisonExpression() #>, throwOnFailure: false, out Unsafe.As<<#= Model.RefName #>, <#= Model.UnderlyingType #>>(ref result));
    }

    /// <summary>
    /// Converts the string representation of the serialized JSON value to an equivalent enumerated object.
    /// The return value indicates whether the conversion succeeded.
    /// </summary>
    /// <param name="value">The string representation of the enumeration serialized JSON value to convert.</param>
    /// <param name="result">
    /// When this method returns, result contains an object of type <#= Model.Name #> whose value is represented by a
    /// serialized JSON value if the parse operation succeeds. If the parse operation fails, result contains the default
    /// value of the underlying type of <#= Model.Name #>. Note that this value need not be a member of the <#= Model.Name #> enumeration.
    /// </param>
    /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
    public static bool TryParseJsonString(ReadOnlySpan<char> value, out <#= Model.RefName #> result)
    {
        Unsafe.SkipInit(out result);
        return TryParseJsonString(value, <#= GetComparisonExpression(false) #>, throwOnFailure: false, out Unsafe.As<<#= Model.RefName #>, <#= Model.UnderlyingType #>>(ref result));
    }

    /// <summary>
    /// Converts the string representation of the serialized JSON value to an equivalent enumerated object.
    /// </summary>
    /// <param name="value">The string representation of the enumeration serialized JSON value to convert.</param>
    /// <param name="ignoreCase"><see langword="true"/> to ignore case; <see langword="false"/> to regard case.</param>
    /// <returns>
    /// Contains an object of type <#= Model.Name #> whose value is represented by value if the parse operation succeeds.
    /// If the parse operation fails, result contains a null value.
    /// </returns>
    public static <#= Model.RefName #>? TryParseJsonString(ReadOnlySpan<char> value, bool ignoreCase = false)
    {
        return TryParseJsonString(value, <#= GetIgnoreCaseToComparisonExpression() #>, throwOnFailure: false, out var result) ? (<#= Model.RefName #>?)result : null;
    }

<#+
        WriteTryParse(x => x.ResolvedJsonValue, "JsonString", allowNumbers: false);
    }
#>
