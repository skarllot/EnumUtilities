// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Raiqub.Generators.EnumUtilities.CodeWriters
{
    using Common;
    using Models;
    using System.Text;
    using T4CodeWriter;
    using System;

    /// <summary>
    /// Class to produce the template output
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class EnumExtensionsWriter : CodeWriterBase<EnumToGenerate>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("\r\n");
            this.Write("\r\n");
            this.Write("\r\n");
            this.Write("\r\n");
            this.Write("\r\n");
            this.Write("\r\n");
            this.Write("\r\n");

#nullable enable

            this.Write("// <auto-generated />\r\n#nullable enable\r\n\r\nusing System;\r\nusing System.Runtime.CompilerServices;\r\n");

            if (Model.IsInterlockedSupported())
            {

            this.Write("using System.Threading;\r\n");

            }

            this.Write("using Raiqub.Generators.EnumUtilities.Formatters;\r\n\r\n#pragma warning disable CS1591 // publicly visible type or member must be documented\r\n\r\n");

            if (!string.IsNullOrEmpty(Model.Namespace))
            {
                WriteLine($"namespace {Model.Namespace}");
                WriteLine("{");
                PushIndent();
            }

            this.Write("[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\r\n[global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"");

            this.Write(this.ToStringHelper.ToStringWithCulture(CurrentAssemblyName.Name));

            this.Write("\", \"");

            this.Write(this.ToStringHelper.ToStringWithCulture(Append($"{CurrentAssemblyName.Version}")));

            this.Write("\")]\r\n");

            this.Write(this.ToStringHelper.ToStringWithCulture(Model.IsPublic ? "public" : "internal"));

            this.Write(" static partial class ");

            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

            this.Write("Extensions\r\n{\r\n");

            if ((Model.SelectedGenerators & SelectedGenerators.MainGenerator) != 0)
            {
                WriteDefaultBlock();
                WriteInterlockedBlock();
                WriteEnumMemberBlock();
                WriteDescriptionBlock();
                WriteDisplayBlock();
            }
            WriteJsonBlock();

            this.Write("}\r\n");

            if (!string.IsNullOrEmpty(Model.Namespace))
            {
                PopIndent();
                WriteLine("}");
            }

            return this.GenerationEnvironment.ToString();
        }

    private void WriteFormatString(Func<EnumValue, string?> keySelector, string type)
    {
        if (Model.IsFlags)
        {
            WriteFormatStringLookup(keySelector, type);
            WriteLine();
        }

        WriteInlineFormatString(keySelector, type);
    }

    private void WriteFormatStringLookup(Func<EnumValue, string?> keySelector, string type)
    {
        var valuesRanges = Model.GetEnumValueRangesByBitRange();

this.Write("    private static int? FormatFlag");

this.Write(this.ToStringHelper.ToStringWithCulture(type));

this.Write("sLength(");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));

this.Write(" value)\r\n    {\r\n        int? fastResult = Get");

this.Write(this.ToStringHelper.ToStringWithCulture(type));

this.Write("LengthInlined(value);\r\n        if (fastResult is not null)\r\n        {\r\n            return fastResult.Value;\r\n        }\r\n");

        if (Model.Values.All(x => keySelector(x) != "0"))
        {

this.Write("\r\n        if (value == 0)\r\n        {\r\n            return 1;\r\n        }\r\n");

        }

this.Write("\r\n        int count = 0, foundItemsCount = 0;\r\n");

        foreach (var (i, vRange) in valuesRanges.Index())
        {
            if (vRange.Count == 0)
                continue;

this.Write("        if (");

this.Write(this.ToStringHelper.ToStringWithCulture(EnumToGenerate.BitRangeConditionStrings[i]));

this.Write(")\r\n        {\r\n");

            foreach (var curr in vRange)
            {

this.Write("            if ((value & ");

this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberValue));

this.Write(") == ");

this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberValue));

this.Write(")\r\n            {\r\n                value -= ");

this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberValue));

this.Write(";\r\n                count = checked(count + ");

this.Write(this.ToStringHelper.ToStringWithCulture(keySelector(curr)!.Length));

this.Write(");\r\n                foundItemsCount++;\r\n                if (value == 0) goto CountLength;\r\n            }\r\n");

            }

this.Write("        }\r\n");

        }

this.Write("\r\n        if (value != 0)\r\n        {\r\n            return null;\r\n        }\r\n\r\nCountLength:\r\n        const int separatorStringLength = 2;\r\n        return checked(count + (separatorStringLength * (foundItemsCount - 1)));\r\n    }\r\n\r\n    private static readonly string[] s_format");

this.Write(this.ToStringHelper.ToStringWithCulture(type));

this.Write("s = new string[");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.InvertedValues.Count));

this.Write("] { ");

        foreach (var (index, curr) in Model.InvertedValues.Index())
        {
            if (index > 0)
                Write(", ");
            Write($"\"{keySelector(curr)}\"");
        }

this.Write(" };\r\n\r\n    private static string? FormatFlag");

this.Write(this.ToStringHelper.ToStringWithCulture(type));

this.Write("s(");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));

this.Write(" value)\r\n    {\r\n        string? result = Get");

this.Write(this.ToStringHelper.ToStringWithCulture(type));

this.Write("Inlined(value);\r\n        if (result is null)\r\n        {\r\n            Span<int> foundItems = stackalloc int[");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.GetMappedBitCount()));

this.Write("];\r\n            if (TryFindFlags");

this.Write(this.ToStringHelper.ToStringWithCulture(type));

this.Write("s(value, foundItems, out int foundItemsCount, out int resultLength))\r\n            {\r\n                result = EnumStringFormatter.WriteMultipleFoundFlagsNames(s_format");

this.Write(this.ToStringHelper.ToStringWithCulture(type));

this.Write("s, foundItems, foundItemsCount, resultLength);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private static bool TryFindFlags");

this.Write(this.ToStringHelper.ToStringWithCulture(type));

this.Write("s(");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));

this.Write(" value, Span<int> foundItems, out int foundItemsCount, out int resultLength)\r\n    {\r\n        resultLength = 0;\r\n        foundItemsCount = 0;\r\n");

        foreach (var (i, vRange) in valuesRanges.Index())
        {
            if (vRange.Count == 0)
                continue;

this.Write("        if (");

this.Write(this.ToStringHelper.ToStringWithCulture(EnumToGenerate.BitRangeConditionStrings[i]));

this.Write(")\r\n        {\r\n");

            foreach (var curr in vRange)
            {

this.Write("            if ((value & ");

this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberValue));

this.Write(") == ");

this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberValue));

this.Write(")\r\n            {\r\n                value -= ");

this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberValue));

this.Write(";\r\n                resultLength = checked(resultLength + ");

this.Write(this.ToStringHelper.ToStringWithCulture(keySelector(curr)!.Length));

this.Write(");\r\n                foundItems[foundItemsCount++] = ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.InvertedValues.IndexOf(curr)));

this.Write(";\r\n                if (value == 0) return true;\r\n            }\r\n");

            }

this.Write("        }\r\n");

        }

this.Write("\r\n        return value == 0;\r\n    }\r\n");

    }

    private void WriteInlineFormatString(Func<EnumValue, string?> keySelector, string type)
    {

this.Write("    private static int? Get");

this.Write(this.ToStringHelper.ToStringWithCulture(type));

this.Write("LengthInlined(");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));

this.Write(" value)\r\n    {\r\n        return value switch\r\n        {\r\n");

        if (!Model.HasZeroMember)
        {

this.Write("            0 => 1,\r\n");

        }
        foreach (var curr in Model.UniqueValues)
        {

this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberValue));

this.Write(" => ");

this.Write(this.ToStringHelper.ToStringWithCulture(keySelector(curr)!.Length));

this.Write(",\r\n");

        }

this.Write("            _ => null\r\n        };\r\n    }\r\n\r\n    private static string? Get");

this.Write(this.ToStringHelper.ToStringWithCulture(type));

this.Write("Inlined(");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));

this.Write(" value)\r\n    {\r\n        return value switch\r\n        {\r\n");

        if (!Model.HasZeroMember)
        {

this.Write("            0 => \"0\",\r\n");

        }
        foreach (var curr in Model.UniqueValues)
        {

this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberValue));

this.Write(" => \"");

this.Write(this.ToStringHelper.ToStringWithCulture(keySelector(curr)));

this.Write("\",\r\n");

        }

this.Write("            _ => null\r\n        };\r\n    }\r\n");

    }

    private void WriteDefaultBlock()
    {

this.Write("    /// <summary>Converts the value of this instance to its equivalent string representation.</summary>\r\n    /// <returns>The string representation of the value of this instance.</returns>\r\n    public static string ToStringFast(this ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" value)\r\n    {\r\n        return ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.IsFlags ? "FormatFlagNames" : "GetNameInlined"));

this.Write("((");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));

this.Write(")value)\r\n            ?? ((");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));

this.Write(")value).ToString();\r\n    }\r\n");

        if (Model.IsFlags)
        {

this.Write("\r\n    /// <summary>Determines whether one or more bit fields are set in the current instance.</summary>\r\n    /// <param name=\"flag\">An enumeration value.</param>\r\n    /// <returns><see langword=\"true\"/> if the bit field or bit fields that are set in flag are also set in the current instance; otherwise, <see langword=\"false\"/>.</returns>\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static bool HasFlagFast(this ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" value, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" flag)\r\n    {\r\n        return (value & flag) == flag;\r\n    }\r\n");

        }

this.Write("\r\n    /// <summary>Calculates the number of characters produced by converting the specified value to string.</summary>\r\n    /// <param name=\"value\">The value to calculate the number of characters.</param>\r\n    /// <returns>The number of characters produced by converting the specified value to string.</returns>\r\n    public static int GetStringLength(this ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" value)\r\n    {\r\n        return ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.IsFlags ? "FormatFlagNamesLength" : "GetNameLengthInlined"));

this.Write("((");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));

this.Write(")value)\r\n            ?? EnumNumericFormatter.GetStringLength((");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));

this.Write(")value);\r\n    }\r\n\r\n    /// <summary>Returns a boolean telling whether the value of this instance exists in the enumeration.</summary>\r\n    /// <returns><c>true</c> if the value of this instance exists in the enumeration; <c>false</c> otherwise.</returns>\r\n    public static bool IsDefined(this ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" value)\r\n    {\r\n        return (");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));

this.Write(")value switch\r\n        {\r\n");

        foreach (var curr in Model.UniqueValues)
        {

this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberValue));

this.Write(" => true,\r\n");

        }

this.Write("            _ => false\r\n        };\r\n    }\r\n\r\n");

        WriteFormatString(x => x.MemberName, "Name");
    }

    private void WriteInterlockedBlock()
    {
        string? underlyingType = Model.InterlockedUnderlyingType;
        if (underlyingType is null)
            return;

        if (Model.IsFlags)
        {

this.Write("\r\n#if NET5_0_OR_GREATER\r\n    /// <summary>Bitwise \"ands\" two enumerations and replaces the first value with the result, as an atomic operation.</summary>\r\n    /// <param name=\"location\">A variable containing the first value to be combined.</param>\r\n    /// <param name=\"value\">The value to be combined with the value at <paramref name=\"location\" />.</param>\r\n    /// <returns>The original value in <paramref name=\"location\" />.</returns>\r\n    public static ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" InterlockedAnd(this ref ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" location, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" value)\r\n    {\r\n        ref ");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(" locationRaw = ref Unsafe.As<");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(">(ref location);\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(" resultRaw = Interlocked.And(ref locationRaw, Unsafe.As<");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(">(ref value));\r\n        return Unsafe.As<");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(">(ref resultRaw);\r\n    }\r\n\r\n    /// <summary>Bitwise \"ors\" two enumerations and replaces the first value with the result, as an atomic operation.</summary>\r\n    /// <param name=\"location\">A variable containing the first value to be combined.</param>\r\n    /// <param name=\"value\">The value to be combined with the value at <paramref name=\"location\" />.</param>\r\n    /// <returns>The original value in <paramref name=\"location\" />.</returns>\r\n    public static ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" InterlockedOr(this ref ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" location, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" value)\r\n    {\r\n        ref ");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(" locationRaw = ref Unsafe.As<");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(">(ref location);\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(" resultRaw = Interlocked.Or(ref locationRaw, Unsafe.As<");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(">(ref value));\r\n        return Unsafe.As<");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(">(ref resultRaw);\r\n    }\r\n#endif\r\n");

        }

        if (!Model.IsFlags)
        {

this.Write("\r\n    /// <summary>Adds two enumerations and replaces the first integer with the sum, as an atomic operation.</summary>\r\n    /// <param name=\"location\">A variable containing the first value to be added.</param>\r\n    /// <param name=\"value\">The value to be added to the enumeration at <paramref name=\"location\" />.</param>\r\n    /// <returns>The new value that was stored at <paramref name=\"location\" /> by this operation.</returns>\r\n    public static ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" InterlockedAdd(this ref ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" location, ");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(" value)\r\n    {\r\n        ref ");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(" locationRaw = ref Unsafe.As<");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(">(ref location);\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(" resultRaw = Interlocked.Add(ref locationRaw, value);\r\n        return Unsafe.As<");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(">(ref resultRaw);\r\n    }\r\n\r\n    /// <summary>Decrements enumeration and stores the result, as an atomic operation.</summary>\r\n    /// <param name=\"location\">The variable whose value is to be decremented.</param>\r\n    /// <returns>The value of the variable immediately after the decrement operation finished.</returns>\r\n    public static ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" InterlockedDecrement(this ref ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" location)\r\n    {\r\n        ref ");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(" locationRaw = ref Unsafe.As<");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(">(ref location);\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(" resultRaw = Interlocked.Decrement(ref locationRaw);\r\n        return Unsafe.As<");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(">(ref resultRaw);\r\n    }\r\n\r\n    /// <summary>Increments enumeration and stores the result, as an atomic operation.</summary>\r\n    /// <param name=\"location\">The variable whose value is to be incremented.</param>\r\n    /// <returns>The value of the variable immediately after the increment operation finished.</returns>\r\n    public static ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" InterlockedIncrement(this ref ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" location)\r\n    {\r\n        ref ");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(" locationRaw = ref Unsafe.As<");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(">(ref location);\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(" resultRaw = Interlocked.Increment(ref locationRaw);\r\n        return Unsafe.As<");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(">(ref resultRaw);\r\n    }\r\n");

        }

this.Write("\r\n    /// <summary>Compares two enumerations for equality and, if they are equal, replaces the first value.</summary>\r\n    /// <param name=\"location\">The destination, whose value is compared with <paramref name=\"comparand\" /> and possibly replaced.</param>\r\n    /// <param name=\"value\">The value that replaces the destination value if the comparison results in equality.</param>\r\n    /// <param name=\"comparand\">The value that is compared to the value at <paramref name=\"location\" />.</param>\r\n    /// <returns>The original value in <paramref name=\"location\" />.</returns>\r\n    public static ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" InterlockedCompareExchange(this ref ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" location, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" value, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" comparand)\r\n    {\r\n        ref ");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(" locationRaw = ref Unsafe.As<");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(">(ref location);\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(" resultRaw = Interlocked.CompareExchange(ref locationRaw, Unsafe.As<");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(">(ref value), Unsafe.As<");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(">(ref comparand));\r\n        return Unsafe.As<");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(">(ref resultRaw);\r\n    }\r\n\r\n    /// <summary>Sets an enumeration value to a specified value and returns the original value, as an atomic operation.</summary>\r\n    /// <param name=\"location\">The variable to set to the specified value.</param>\r\n    /// <param name=\"value\">The value to which the <paramref name=\"location\" /> parameter is set.</param>\r\n    /// <returns>The original value of <paramref name=\"location\" />.</returns>\r\n    public static ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" InterlockedExchange(this ref ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" location, ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" value)\r\n    {\r\n        ref ");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(" locationRaw = ref Unsafe.As<");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(">(ref location);\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(" resultRaw = Interlocked.Exchange(ref locationRaw, Unsafe.As<");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(">(ref value));\r\n        return Unsafe.As<");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(">(ref resultRaw);\r\n    }\r\n");

        if (underlyingType == "long")
        {

this.Write("\r\n    /// <summary>Returns a 64-bit enumeration value, loaded as an atomic operation.</summary>\r\n    /// <param name=\"location\">The 64-bit enumeration value to be loaded.</param>\r\n    /// <returns>The loaded value.</returns>\r\n    public static ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" InterlockedRead(this ref ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" location)\r\n    {\r\n        ref ");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(" locationRaw = ref Unsafe.As<");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(">(ref location);\r\n        ");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(" resultRaw = Interlocked.Read(ref locationRaw);\r\n        return Unsafe.As<");

this.Write(this.ToStringHelper.ToStringWithCulture(underlyingType));

this.Write(", ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(">(ref resultRaw);\r\n    }\r\n");

        }
    }

    private void WriteEnumMemberBlock()
    {
        if (!Model.HasSerializationValue)
            return;

this.Write("\r\n    public static string ToEnumMemberValue(this ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" value)\r\n    {\r\n        return ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.IsFlags ? "FormatFlagEnumMemberValues" : "GetEnumMemberValueInlined"));

this.Write("((");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));

this.Write(")value)\r\n            ?? ((");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));

this.Write(")value).ToString();\r\n    }\r\n\r\n    public static int GetEnumMemberValueStringLength(this ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" value)\r\n    {\r\n        return ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.IsFlags ? "FormatFlagEnumMemberValuesLength" : "GetEnumMemberValueLengthInlined"));

this.Write("((");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));

this.Write(")value)\r\n            ?? EnumNumericFormatter.GetStringLength((");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));

this.Write(")value);\r\n    }\r\n\r\n");

        WriteFormatString(x => x.ResolvedSerializedValue, "EnumMemberValue");
    }

    private void WriteDescriptionBlock()
    {
        if (!Model.HasDescription)
            return;

this.Write("\r\n    public static string? GetDescription(this ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" value)\r\n    {\r\n        return (");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));

this.Write(")value switch\r\n        {\r\n");

        foreach (var curr in Model.UniqueValues.Where(x => x.Description != null))
        {

this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberValue));

this.Write(" => \"");

this.Write(this.ToStringHelper.ToStringWithCulture(curr.Description));

this.Write("\",\r\n");

        }

this.Write("            _ => null\r\n        };\r\n    }\r\n");

    }

    private void WriteDisplayBlock()
    {
        if (Model.HasDisplayName)
        {

this.Write("\r\n    public static string GetDisplayShortName(this ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" value)\r\n    {\r\n        return (");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));

this.Write(")value switch\r\n        {\r\n");

            foreach (var curr in Model.UniqueValues.Where(x => x.Display?.ShortName != null))
            {

this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberValue));

this.Write(" => ");

this.Write(this.ToStringHelper.ToStringWithCulture(curr.Display!.ResourceShortName != null
                                                                   ? Append(curr.Display.ResourceShortName)
                                                                   : Append($"\"{curr.Display.ShortName}\"")));

this.Write(",\r\n");

            }

this.Write("            _ => GetDisplayName(value)\r\n        };\r\n    }\r\n\r\n    public static string GetDisplayName(this ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" value)\r\n    {\r\n        return (");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));

this.Write(")value switch\r\n        {\r\n");

            foreach (var curr in Model.UniqueValues)
            {

this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberValue));

this.Write(" => ");

this.Write(this.ToStringHelper.ToStringWithCulture(curr.Display?.ResourceName != null
                            ? Append(curr.Display.ResourceName)
                            : curr.Display?.Name != null
                                ? Append($"\"{curr.Display.Name}\"")
                                : Append($"\"{curr.MemberName}\"")));

this.Write(",\r\n");

            }

this.Write("            _ => ToStringFast(value)\r\n        };\r\n    }\r\n");

        }

        if (Model.HasDisplayDescription)
        {

this.Write("\r\n    public static string? GetDescription(this ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" value)\r\n    {\r\n        return (");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));

this.Write(")value switch\r\n        {\r\n");

            foreach (var curr in Model.UniqueValues.Where(x => x.Display?.Description != null))
            {

this.Write("            ");

this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberValue));

this.Write(" => ");

this.Write(this.ToStringHelper.ToStringWithCulture(curr.Display!.ResourceDescription != null
                            ? Append(curr.Display.ResourceDescription)
                            : Append($"\"{curr.Display.Description}\"")));

this.Write(",\r\n");

            }

this.Write("            _ => null\r\n        };\r\n    }\r\n");

        }
    }

    private void WriteJsonBlock()
    {
        if (!Model.HasJsonProperty && (Model.SelectedGenerators & SelectedGenerators.JsonConverter) == 0)
            return;

this.Write("\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static string? ToJsonString(this ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" value)\r\n    {\r\n        return ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.IsFlags ? "FormatFlagJsonStrings" : "GetJsonStringInlined"));

this.Write("((");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));

this.Write(")value);\r\n    }\r\n\r\n    [MethodImpl(MethodImplOptions.AggressiveInlining)]\r\n    public static int? GetJsonStringLength(this ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

this.Write(" value)\r\n    {\r\n        return ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.IsFlags ? "FormatFlagJsonStringsLength" : "GetJsonStringLengthInlined"));

this.Write("((");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));

this.Write(")value);\r\n    }\r\n\r\n");

        WriteFormatString(x => x.ResolvedJsonValue, "JsonString");
    }

    public EnumExtensionsWriter(StringBuilder builder) : base(builder)
    {
    }

    public override string GetFileName() => CodeWriterHelper.GetFileName(Model, "Extensions");

    protected override bool CanGenerateFor(EnumToGenerate model) =>
        (model.SelectedGenerators & (SelectedGenerators.MainGenerator | SelectedGenerators.JsonConverter)) != 0;

    }

}
