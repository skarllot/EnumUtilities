<#@ template debug="false" linePragmas="false" hostspecific="false" language="C#" inherits="CodeWriterBase<EnumToGenerate>" #>
<#@ import namespace="Common" #>
<#@ import namespace="Models" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="T4CodeWriter" #>
<#@ include file="$(ProjectDir)CodeWriters\Factory\TryParseInternal.ttinclude"#>
<#@ include file="$(ProjectDir)CodeWriters\Factory\DefaultBlock.ttinclude"#>
<#@ include file="$(ProjectDir)CodeWriters\Factory\EnumMemberBlock.ttinclude"#>
<#@ include file="$(ProjectDir)CodeWriters\Factory\DescriptionBlock.ttinclude"#>
<#@ include file="$(ProjectDir)CodeWriters\Factory\DisplayBlock.ttinclude"#>
<#@ include file="$(ProjectDir)CodeWriters\Factory\JsonBlock.ttinclude"#>
<#@ include file="$(ProjectDir)CodeWriters\Factory\MiscellaneousBlock.ttinclude"#>
<#
#nullable enable
#>
// <auto-generated />
#nullable enable

using System;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Runtime.CompilerServices;
using Raiqub.Generators.EnumUtilities.Parsers;

#pragma warning disable CS1591 // publicly visible type or member must be documented

<#
            if (!string.IsNullOrEmpty(Model.Namespace))
            {
                WriteLine($"namespace {Model.Namespace}");
                WriteLine("{");
                PushIndent();
            }
#>
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("<#= CurrentAssemblyName.Name #>", "<#= Append($"{CurrentAssemblyName.Version}") #>")]
<#= Model.IsPublic ? "public" : "internal" #> static partial class <#= Model.Name #>Factory
{
<#
            if ((Model.SelectedGenerators & SelectedGenerators.MainGenerator) != 0)
            {
                WriteDefaultBlock();
                WriteEnumMemberBlock();
                WriteDescriptionBlock();
                WriteDisplayBlock();
                WriteMiscellaneousBlock();
            }
            WriteJsonBlock();
#>
}
<#
            if (!string.IsNullOrEmpty(Model.Namespace))
            {
                PopIndent();
                WriteLine("}");
            }
#>
<#+
    public EnumFactoryWriter(StringBuilder builder) : base(builder)
    {
    }

    public override string GetFileName() => CodeWriterHelper.GetFileName(Model, "Factory");

    protected override bool CanGenerateFor(EnumToGenerate model) =>
        (model.SelectedGenerators & (SelectedGenerators.MainGenerator | SelectedGenerators.JsonConverter)) != 0;
#>
