// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Raiqub.Generators.EnumUtilities.CodeWriters
{
    using Common;
    using Models;
    using System.Text;
    using T4CodeWriter;
    using System;

    /// <summary>
    /// Class to produce the template output
    /// </summary>

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class EnumInfoWriter : CodeWriterBase<EnumToGenerate>
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("\r\n");
            this.Write("\r\n// <auto-generated />\r\n#nullable enable\r\n\r\nusing System;\r\nusing System.Runtime.CompilerServices;\r\nusing Raiqub.Generators.EnumUtilities.Formatters;\r\nusing Raiqub.Generators.EnumUtilities.Parsers;\r\n\r\n#pragma warning disable CS1591 // publicly visible type or member must be documented\r\n\r\n");

    if (!string.IsNullOrEmpty(Model.Namespace))
    {
        WriteLine($"namespace {Model.Namespace}");
        WriteLine("{");
        PushIndent();
    }

            this.Write("/// <summary>Provides metadata for <see cref=\"");

            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

            this.Write("\" /> enumeration.</summary>\r\n[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\r\n[global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"");

            this.Write(this.ToStringHelper.ToStringWithCulture(CurrentAssemblyName.Name));

            this.Write("\", \"");

            this.Write(this.ToStringHelper.ToStringWithCulture(Append($"{CurrentAssemblyName.Version}")));

            this.Write("\")]\r\n");

            this.Write(this.ToStringHelper.ToStringWithCulture(Model.IsPublic ? "public" : "internal"));

            this.Write(" static partial class ");

            this.Write(this.ToStringHelper.ToStringWithCulture(Model.MetadataClassName));

            this.Write("\r\n{\r\n");

    WriteDefaultBlock();

            this.Write("}\r\n");

    if (!string.IsNullOrEmpty(Model.Namespace))
    {
        PopIndent();
        WriteLine("}");
    }

            return this.GenerationEnvironment.ToString();
        }

    private void WriteNames(
        string className,
        string xmlDocAllRef,
        string xmlDocItemRef,
        string xmlDocAction,
        Func<EnumValue, string> keySelector)
    {

this.Write("    /// <summary>Provides constant values for <see cref=\"");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

this.Write("\" /> ");

this.Write(this.ToStringHelper.ToStringWithCulture(xmlDocAllRef));

this.Write(".</summary>\r\n    public static partial class ");

this.Write(this.ToStringHelper.ToStringWithCulture(className));

this.Write("\r\n    {\r\n        /// <summary>Represents the largest possible number of characters produced by ");

this.Write(this.ToStringHelper.ToStringWithCulture(xmlDocAction));

this.Write(" a <see cref=\"");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

this.Write("\" /> value to string, based on defined members.</summary>\r\n        public const int MaxCharsLength = ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.Values.Max(x => keySelector(x).Length)));

this.Write(";\r\n");

        foreach (var curr in Model.Values)
        {

this.Write("\r\n        /// <summary>The string representation of <see cref=\"");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

this.Write(".");

this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberName));

this.Write("\" /> ");

this.Write(this.ToStringHelper.ToStringWithCulture(xmlDocItemRef));

this.Write(".</summary>\r\n        public const string ");

this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberName));

this.Write(" = \"");

this.Write(this.ToStringHelper.ToStringWithCulture(keySelector(curr)));

this.Write("\";\r\n");

        }

this.Write("    }\r\n\r\n    /// <summary>Provides static values for <see cref=\"");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

this.Write("\" /> UTF-8 encoded ");

this.Write(this.ToStringHelper.ToStringWithCulture(xmlDocAllRef));

this.Write(".</summary>\r\n    public static partial class Utf8");

this.Write(this.ToStringHelper.ToStringWithCulture(className));

this.Write("\r\n    {\r\n        /// <summary>Represents the largest possible number of bytes produced by ");

this.Write(this.ToStringHelper.ToStringWithCulture(xmlDocAction));

this.Write(" a <see cref=\"");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

this.Write("\" /> value to UTF-8 string, based on defined members.</summary>\r\n        public const int MaxBytesLength = ");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.Values.Max(x => _utf8Encoding.GetByteCount(keySelector(x)))));

this.Write(";\r\n");

        foreach (var curr in Model.Values)
        {

this.Write("\r\n        /// <summary>The UTF-8 representation of <see cref=\"");

this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

this.Write(".");

this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberName));

this.Write("\" /> ");

this.Write(this.ToStringHelper.ToStringWithCulture(xmlDocItemRef));

this.Write(".</summary>\r\n        public static ReadOnlySpan<byte> ");

this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberName));

this.Write(" => new byte[");

this.Write(this.ToStringHelper.ToStringWithCulture(_utf8Encoding.GetByteCount(keySelector(curr))));

this.Write("] { ");

this.Write(this.ToStringHelper.ToStringWithCulture(_utf8Encoding.GetBytes(keySelector(curr)).JoinToString()));

this.Write(" };\r\n");

        }

this.Write("    }\r\n");

    }

    private static readonly Encoding _utf8Encoding = Encoding.UTF8;

    private void WriteDefaultBlock()
    {
        if (HasMainGenerator)
        {
            WriteNames(
                "Name",
                "members names",
                "name",
                "converting",
                x => x.MemberName);
        }

        if (HasMainGenerator && Model.HasSerializationValue)
        {
            WriteLine();
            WriteNames(
                "SerializedValue",
                "serialized members values",
                "serialized value",
                "serializing",
                x => x.ResolvedSerializedValue);
        }

        if (HasMainGenerator && Model.HasJsonProperty)
        {
            WriteLine();
            WriteNames(
                "JsonValue",
                "serialized members values",
                "serialized value",
                "serializing",
                x => x.ResolvedJsonValue);
        }
    }

    public EnumInfoWriter(StringBuilder builder) : base(builder)
    {
    }

    private bool HasMainGenerator => (Model.SelectedGenerators & SelectedGenerators.MainGenerator) ==
                                     SelectedGenerators.MainGenerator;

    public override string GetFileName() => CodeWriterHelper.GetFileName(Model, "EnumInfo");

    protected override bool CanGenerateFor(EnumToGenerate model) =>
        (model.SelectedGenerators & SelectedGenerators.MainGenerator) != 0;

    }

}
