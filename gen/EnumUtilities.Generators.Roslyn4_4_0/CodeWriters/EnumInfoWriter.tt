<#@ template debug="false" linePragmas="false" hostspecific="false" language="C#" inherits="CodeWriterBase<EnumToGenerate>" #>
<#@ import namespace="Common" #>
<#@ import namespace="Models" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="T4CodeWriter" #>
<#@ include file="$(ProjectDir)CodeWriters\EnumInfo\NamesInternal.ttinclude" #>
<#@ include file="$(ProjectDir)CodeWriters\EnumInfo\DefaultBlock.ttinclude" #>
// <auto-generated />
#nullable enable

using System;
using System.Runtime.CompilerServices;
using Raiqub.Generators.EnumUtilities.Formatters;
using Raiqub.Generators.EnumUtilities.Parsers;

#pragma warning disable CS1591 // publicly visible type or member must be documented

<#
    if (!string.IsNullOrEmpty(Model.Namespace))
    {
        WriteLine($"namespace {Model.Namespace}");
        WriteLine("{");
        PushIndent();
    }
#>
/// <summary>Provides metadata for <see cref="<#= Model.Name #>" /> enumeration.</summary>
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("<#= CurrentAssemblyName.Name #>", "<#= Append($"{CurrentAssemblyName.Version}") #>")]
<#= Model.IsPublic ? "public" : "internal" #> static partial class <#= Model.MetadataClassName #>
{
<#
    WriteDefaultBlock();
#>
}
<#
    if (!string.IsNullOrEmpty(Model.Namespace))
    {
        PopIndent();
        WriteLine("}");
    }
#>
<#+
    public EnumInfoWriter(StringBuilder builder) : base(builder)
    {
    }

    private bool HasMainGenerator => (Model.SelectedGenerators & SelectedGenerators.MainGenerator) ==
                                     SelectedGenerators.MainGenerator;

    public override string GetFileName() => CodeWriterHelper.GetFileName(Model, "EnumInfo");

    protected override bool CanGenerateFor(EnumToGenerate model) =>
        (model.SelectedGenerators & SelectedGenerators.MainGenerator) != 0;
#>
