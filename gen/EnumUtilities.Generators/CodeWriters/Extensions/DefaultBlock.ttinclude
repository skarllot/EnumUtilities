<#+
    private void WriteDefaultBlock()
    {
#>
    /// <summary>Converts the value of this instance to its equivalent string representation.</summary>
    /// <returns>The string representation of the value of this instance.</returns>
    public static string ToStringFast(this <#= Model.RefName #> value)
    {
        return <#= Model.IsFlags ? "FormatFlagNames" : "GetNameInlined" #>((<#= Model.UnderlyingType #>)value)
            ?? ((<#= Model.UnderlyingType #>)value).ToString();
    }
<#+
        if (Model.IsFlags)
        {
#>

    /// <summary>Determines whether one or more bit fields are set in the current instance.</summary>
    /// <param name="flag">An enumeration value.</param>
    /// <returns><see langword="true"/> if the bit field or bit fields that are set in flag are also set in the current instance; otherwise, <see langword="false"/>.</returns>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static bool HasFlagFast(this <#= Model.RefName #> value, <#= Model.RefName #> flag)
    {
        return (value & flag) == flag;
    }
<#+
        }
#>

    /// <summary>Calculates the number of characters produced by converting the specified value to string.</summary>
    /// <param name="value">The value to calculate the number of characters.</param>
    /// <returns>The number of characters produced by converting the specified value to string.</returns>
    public static int GetStringLength(this <#= Model.RefName #> value)
    {
        return <#= Model.IsFlags ? "FormatFlagNamesLength" : "GetNameLengthInlined" #>((<#= Model.UnderlyingType #>)value)
            ?? EnumNumericFormatter.GetStringLength((<#= Model.UnderlyingType #>)value);
    }

    /// <summary>Returns a boolean telling whether the value of this instance exists in the enumeration.</summary>
    /// <returns><c>true</c> if the value of this instance exists in the enumeration; <c>false</c> otherwise.</returns>
    public static bool IsDefined(this <#= Model.RefName #> value)
    {
        return (<#= Model.UnderlyingType #>)value switch
        {
<#+
        foreach (var curr in Model.UniqueValues)
        {
#>
            <#= curr.MemberValue #> => true,
<#+
        }
#>
            _ => false
        };
    }

<#+
        WriteFormatString(x => x.MemberName, "Name", $"{Model.MetadataClassName}.Name.NamesSpan");
    }
#>
