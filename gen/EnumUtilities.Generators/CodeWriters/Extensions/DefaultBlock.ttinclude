<#+
    private void WriteDefaultBlock()
    {
#>
    /// <summary>Represents the largest possible number of characters produced by converting an <see cref="<#= Model.Name #>" /> value to string, based on defined members. This field is constant.</summary>
    public const int NameMaxCharsLength = <#= Model.Values.Max(x => x.MemberName.Length) #>;

    /// <summary>Converts the value of this instance to its equivalent string representation.</summary>
    /// <returns>The string representation of the value of this instance.</returns>
    public static string ToStringFast(this <#= Model.RefName #> value)
    {
        return EnumStringFormatter.GetString((<#= Model.UnderlyingType #>)value, <#= Model.Name #>StringFormatter.Instance);
    }
<#+
        if (Model.IsFlags)
        {
#>

    /// <summary>Determines whether one or more bit fields are set in the current instance.</summary>
    /// <param name="flag">An enumeration value.</param>
    /// <returns><see langword="true"/> if the bit field or bit fields that are set in flag are also set in the current instance; otherwise, <see langword="false"/>.</returns>
    public static bool HasFlagFast(this <#= Model.RefName #> value, <#= Model.RefName #> flag)
    {
        return (value & flag) == flag;
    }
<#+
        }
#>

    /// <summary>Calculates the number of characters produced by converting the specified value to string.</summary>
    /// <param name="value">The value to calculate the number of characters.</param>
    /// <returns>The number of characters produced by converting the specified value to string.</returns>
    public static int GetStringCount(this <#= Model.RefName #> value)
    {
        return EnumStringFormatter.GetStringCount((<#= Model.UnderlyingType #>)value, <#= Model.Name #>StringFormatter.Instance);
    }

    /// <summary>Returns a boolean telling whether the value of this instance exists in the enumeration.</summary>
    /// <returns><c>true</c> if the value of this instance exists in the enumeration; <c>false</c> otherwise.</returns>
    public static bool IsDefined(this <#= Model.RefName #> value)
    {
        return <#= Model.Name #>Validation.IsDefined(value);
    }

    private sealed partial class <#= Model.Name #>StringFormatter : IEnumFormatter<<#= Model.UnderlyingType #>>
    {
        public static <#= Model.Name #>StringFormatter Instance = new <#= Model.Name #>StringFormatter();

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int GetStringCountForNumber(<#= Model.UnderlyingType #> value) => EnumNumericFormatter.GetStringLength(value);

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string GetStringForNumber(<#= Model.UnderlyingType #> value) => value.ToString();
<#+
        if (Model.IsFlags)
        {
#>

        public int? TryGetStringCountForMember(<#= Model.UnderlyingType #> value)
        {
            if (value == 0)
            {
                return <#=
                    Model.Values.FirstOrDefault(x => x.MemberValue == "0")?.MemberName.Length ?? 1 #>;
            }

            int count = 0, foundItemsCount = 0;
<#+
            foreach (
                var curr in
                    Model.UniqueValues.OrderByDescending(x => x.RealMemberValue).Where(x => x.MemberValue != "0"))
            {
#>
            if ((value & <#= curr.MemberValue #>) == <#= curr.MemberValue #>)
            {
                value -= <#= curr.MemberValue #>;
                count = checked(count + <#= curr.MemberName.Length #>);
                foundItemsCount++;
            }
<#+
            }
#>

            if (value != 0)
            {
                return null;
            }

            const int separatorStringLength = 2;
            return checked(count + (separatorStringLength * (foundItemsCount - 1)));
        }

        public string? TryGetStringForMember(<#= Model.UnderlyingType #> value)
        {
            if (value == 0)
            {
                return "<#= Model.Values.FirstOrDefault(x => x.MemberValue == "0")?.MemberName ?? "0" #>";
            }

            Span<<#= Model.UnderlyingType #>> foundItems = stackalloc <#= Model.UnderlyingType #>[<#= GetMappedBitCount() #>];
            int count = 0, foundItemsCount = 0;
<#+
            foreach (
                var curr in
                    Model.UniqueValues.OrderByDescending(x => x.RealMemberValue).Where(x => x.MemberValue != "0"))
            {
#>
            if ((value & <#= curr.MemberValue #>) == <#= curr.MemberValue #>)
            {
                value -= <#= curr.MemberValue #>;
                count = checked(count + <#= curr.MemberName.Length #>);
                foundItems[foundItemsCount++] = <#= curr.MemberValue #>;
            }
<#+
            }
#>

            if (value != 0)
            {
                return null;
            }

            if (foundItemsCount == 1)
            {
                return GetStringForSingleMember(foundItems[0]);
            }

            return WriteMultipleFoundFlagsNames(count, foundItemsCount, foundItems);
        }

        private string WriteMultipleFoundFlagsNames(int count, int foundItemsCount, Span<<#= Model.UnderlyingType #>> foundItems)
        {
            const int separatorStringLength = 2;
            const char enumSeparatorChar = ',';
            var strlen = checked(count + (separatorStringLength * (foundItemsCount - 1)));
            Span<char> result = strlen <= 128
                ? stackalloc char[128].Slice(0, strlen)
                : new char[strlen];
            var span = result;

            string name = GetStringForSingleMember(foundItems[--foundItemsCount]);
            name.AsSpan().CopyTo(span);
            span = span.Slice(name.Length);
            while (--foundItemsCount >= 0)
            {
                span[0] = enumSeparatorChar;
                span[1] = ' ';
                span = span.Slice(2);

                name = GetStringForSingleMember(foundItems[foundItemsCount]);
                name.CopyTo(span);
                span = span.Slice(name.Length);
            }

            return result.ToString();
        }

        private string GetStringForSingleMember(<#= Model.UnderlyingType #> value)
        {
            return value switch
            {
<#+
            foreach (var curr in Model.UniqueValues)
            {
#>
                <#= curr.MemberValue #> => "<#= curr.MemberName #>",
<#+
            }
#>
                _ => throw new ArgumentOutOfRangeException()
            };
        }
<#+
        }
        else
        {
#>

        public int? TryGetStringCountForMember(<#= Model.UnderlyingType #> value)
        {
            return value switch
            {
<#+
            foreach (var curr in Model.UniqueValues)
            {
#>
                <#= curr.MemberValue #> => <#= curr.MemberName.Length #>,
<#+
            }
#>
                _ => null
            };
        }

        public string? TryGetStringForMember(<#= Model.UnderlyingType #> value)
        {
            return value switch
            {
<#+
            foreach (var curr in Model.UniqueValues)
            {
#>
                <#= curr.MemberValue #> => "<#= curr.MemberName #>",
<#+
            }
#>
                _ => null
            };
        }
<#+
        }
#>
    }
<#+
    }

    private int GetBitCount() => Model.UnderlyingType switch {
        "byte" => 8,
        "sbyte" => 8,
        "short" => 16,
        "ushort" => 16,
        "int" => 32,
        "uint" => 32,
        "long" => 64,
        "ulong" => 64,
        _ => 64,
    };

    private int GetMappedBitCount()
    {
        if (Model.Values.Any(x => x.MemberValue[0] == '-'))
            return GetBitCount();

        return GetBitCount() -
               (BitOperations.LeadingZeroCount(Model.Values.Select(x => Convert.ToUInt64(x.RealMemberValue)).Max()) -
                (64 - GetBitCount()));
    }
#>
