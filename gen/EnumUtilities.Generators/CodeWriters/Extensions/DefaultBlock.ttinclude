<#+
    private void WriteDefaultBlock()
    {
#>
    /// <summary>Represents the largest possible number of characters produced by converting an <see cref="<#= Model.Name #>" /> value to string, based on defined members. This field is constant.</summary>
    public const int NameMaxCharsLength = <#= Model.Values.Max(x => x.MemberName.Length) #>;

    /// <summary>Converts the value of this instance to its equivalent string representation.</summary>
    /// <returns>The string representation of the value of this instance.</returns>
    public static string ToStringFast(this <#= Model.RefName #> value)
    {
        return EnumStringFormatter.GetString((<#= Model.UnderlyingType #>)value, s_stringFormatter);
    }
<#+
        if (Model.IsFlags)
        {
#>

    /// <summary>Determines whether one or more bit fields are set in the current instance.</summary>
    /// <param name="flag">An enumeration value.</param>
    /// <returns><see langword="true"/> if the bit field or bit fields that are set in flag are also set in the current instance; otherwise, <see langword="false"/>.</returns>
    public static bool HasFlagFast(this <#= Model.RefName #> value, <#= Model.RefName #> flag)
    {
        return (value & flag) == flag;
    }
<#+
        }
#>

    /// <summary>Calculates the number of characters produced by converting the specified value to string.</summary>
    /// <param name="value">The value to calculate the number of characters.</param>
    /// <returns>The number of characters produced by converting the specified value to string.</returns>
    public static int GetStringLength(this <#= Model.RefName #> value)
    {
        return EnumStringFormatter.GetStringLength((<#= Model.UnderlyingType #>)value, s_stringFormatter);
    }

    /// <summary>Returns a boolean telling whether the value of this instance exists in the enumeration.</summary>
    /// <returns><c>true</c> if the value of this instance exists in the enumeration; <c>false</c> otherwise.</returns>
    public static bool IsDefined(this <#= Model.RefName #> value)
    {
        return <#= Model.Name #>Validation.IsDefined(value);
    }
<#+
    }
#>
