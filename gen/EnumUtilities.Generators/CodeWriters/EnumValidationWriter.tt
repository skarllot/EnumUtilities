<#@ template debug="false" linePragmas="false" hostspecific="false" language="C#" inherits="CodeWriterBase<EnumToGenerate>" #>
<#@ import namespace="Common" #>
<#@ import namespace="Models" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="T4CodeWriter" #>
// <auto-generated />
#nullable enable

using System;
using System.Diagnostics.CodeAnalysis;

#pragma warning disable CS1591 // publicly visible type or member must be documented

<#
    if (!string.IsNullOrEmpty(Model.Namespace))
    {
        WriteLine($"namespace {Model.Namespace}");
        WriteLine("{");
        PushIndent();
    }
#>
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("<#= CurrentAssemblyName.Name #>", "<#= Append($"{CurrentAssemblyName.Version}") #>")]
<#= Model.IsPublic ? "public" : "internal" #> static partial class <#= Model.Name #>Validation
{
    /// <summary>Returns a boolean telling whether the value of <see cref="<#= Model.Name #>"/> instance exists in the enumeration.</summary>
    /// <returns><c>true</c> if the value of <see cref="<#= Model.Name #>"/> instance exists in the enumeration; <c>false</c> otherwise.</returns>
    public static bool IsDefined(<#= Model.RefName #> value)
    {
        return (<#= Model.UnderlyingType #>)value switch
        {
<#
    foreach (var curr in Model.UniqueValues)
    {
#>
            <#= curr.MemberValue #> => true,
<#
    }
#>
            _ => false
        };
    }

    public static bool IsDefined(
        [NotNullWhen(true)] string? name,
        StringComparison comparisonType)
    {
        return name switch
        {
<#
    foreach (var curr in Model.Values)
    {
#>
            { } s when s.Equals("<#= curr.MemberName #>", comparisonType) => true,
<#
    }
#>
            _ => false
        };
    }

    public static bool IsDefinedIgnoreCase([NotNullWhen(true)] string? name)
    {
        return IsDefined(name, StringComparison.OrdinalIgnoreCase);
    }

    public static bool IsDefined([NotNullWhen(true)] string? name)
    {
        return name switch
        {
<#
    foreach (var curr in Model.Values)
    {
#>
            "<#= curr.MemberName #>" => true,
<#
    }
#>
            _ => false
        };
    }
}
<#
    if (!string.IsNullOrEmpty(Model.Namespace))
    {
        PopIndent();
        WriteLine("}");
    }
#>
<#+
    public EnumValidationWriter(StringBuilder builder) : base(builder)
    {
    }

    public override string GetFileName() => $"{Model.Namespace ?? "_"}.{Model.Name}Validation.g.cs";

    protected override bool CanGenerateFor(EnumToGenerate model) =>
        (model.SelectedGenerators & SelectedGenerators.MainGenerator) != 0;
#>
