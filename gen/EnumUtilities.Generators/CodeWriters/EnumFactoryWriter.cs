// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Raiqub.Generators.EnumUtilities.CodeWriters
{
    using Common;
    using Models;
    using System.Text;
    using T4CodeWriter;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumFactoryWriter.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class EnumFactoryWriter : CodeWriterBase<EnumToGenerate>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("\r\n");
            this.Write("\r\n");
            this.Write("\r\n");
            this.Write("\r\n");
            this.Write("\r\n");
            this.Write("\r\n// <auto-generated />\r\n#nullable enable\r\n\r\nusing System;\r\nusing System.Diagnostics.CodeAnalysis;\r\nusing System.Globalization;\r\nusing System.Runtime.CompilerServices;\r\nusing Raiqub.Generators.EnumUtilities.Parsers;\r\n\r\n#pragma warning disable CS1591 // publicly visible type or member must be documented\r\n\r\n");
            
            #line 23 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumFactoryWriter.tt"

    if (!string.IsNullOrEmpty(Model.Namespace))
    {
        WriteLine($"namespace {Model.Namespace}");
        WriteLine("{");
        PushIndent();
    }

            
            #line default
            #line hidden
            this.Write("[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\r\n[global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"");
            
            #line 32 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CurrentAssemblyName.Name));
            
            #line default
            #line hidden
            this.Write("\", \"");
            
            #line 32 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Append($"{CurrentAssemblyName.Version}")));
            
            #line default
            #line hidden
            this.Write("\")]\r\n");
            
            #line 33 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.IsPublic ? "public" : "internal"));
            
            #line default
            #line hidden
            this.Write(" static partial class ");
            
            #line 33 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write("Factory\r\n{\r\n    private static readonly ");
            
            #line 35 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.MetadataClassName));
            
            #line default
            #line hidden
            this.Write(".StringParser s_stringParser = ");
            
            #line 35 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.MetadataClassName));
            
            #line default
            #line hidden
            this.Write(".StringParser.Instance;\r\n");
            
            #line 36 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumFactoryWriter.tt"

    if (Model.HasSerializationValue)
    {

            
            #line default
            #line hidden
            this.Write("    private static readonly ");
            
            #line 40 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.MetadataClassName));
            
            #line default
            #line hidden
            this.Write(".SerializationStringParser s_serializationStringParser = ");
            
            #line 40 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumFactoryWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.MetadataClassName));
            
            #line default
            #line hidden
            this.Write(".SerializationStringParser.Instance;\r\n");
            
            #line 41 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumFactoryWriter.tt"

    }

            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 45 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumFactoryWriter.tt"

    WriteDefaultBlock();
    WriteLegacyDefaultBlock();
    WriteEnumMemberBlock();
    WriteDescriptionBlock();
    WriteDisplayBlock();
    WriteMiscellaneousBlock();

            
            #line default
            #line hidden
            this.Write("}\r\n");
            
            #line 54 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumFactoryWriter.tt"

    if (!string.IsNullOrEmpty(Model.Namespace))
    {
        PopIndent();
        WriteLine("}");
    }

            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"

    private void WriteDefaultBlock()
    {

        
        #line default
        #line hidden
        
        #line 5 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write("    /// <summary>\r\n    /// Converts the string representation of the name or numeric value of one or more enumerated constants to\r\n    /// an equivalent enumerated object.\r\n    /// </summary>\r\n    /// <param name=\"value\">The string representation of the enumeration name or underlying value to convert.</param>\r\n    /// <param name=\"ignoreCase\"><see langword=\"true\"/> to ignore case; <see langword=\"false\"/> to regard case.</param>\r\n    /// <returns>The value represented by the specified name or numeric value. Note that this value need not be a member of the ");

        
        #line default
        #line hidden
        
        #line 11 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 11 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(" enumeration.</returns>\r\n    /// <exception cref=\"ArgumentNullException\"><paramref name=\"value\"/> is <see langword=\"null\"/>.</exception>\r\n    /// <exception cref=\"ArgumentException\"><paramref name=\"value\"/> is empty or does not represent a valid value.</exception>\r\n    public static ");

        
        #line default
        #line hidden
        
        #line 14 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 14 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(" Parse(string value, bool ignoreCase = false)\r\n    {\r\n        if (value is null) ThrowArgumentNullException(nameof(value));\r\n        TryParse(value.AsSpan(), ignoreCase, throwOnFailure: true, out var result);\r\n        return result;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Converts the string representation of the name or numeric value of one or more enumerated constants to\r\n    /// an equivalent enumerated object.\r\n    /// </summary>\r\n    /// <param name=\"value\">The string representation of the enumeration name or underlying value to convert.</param>\r\n    /// <param name=\"ignoreCase\"><see langword=\"true\"/> to ignore case; <see langword=\"false\"/> to regard case.</param>\r\n    /// <returns>The value represented by the specified name or numeric value. Note that this value need not be a member of the ");

        
        #line default
        #line hidden
        
        #line 27 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 27 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(" enumeration.</returns>\r\n    /// <exception cref=\"ArgumentException\"><paramref name=\"value\"/> is empty or does not represent a valid value.</exception>\r\n    public static ");

        
        #line default
        #line hidden
        
        #line 29 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 29 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(" Parse(ReadOnlySpan<char> value, bool ignoreCase = false)\r\n    {\r\n        TryParse(value, ignoreCase, throwOnFailure: true, out var result);\r\n        return result;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Converts the string representation of the name or numeric value of one or more enumerated constants to\r\n    /// an equivalent enumerated object.\r\n    /// </summary>\r\n    /// <param name=\"value\">The string representation of the enumeration name or underlying value to convert.</param>\r\n    /// <param name=\"ignoreCase\"><see langword=\"true\"/> to ignore case; <see langword=\"false\"/> to regard case.</param>\r\n    /// <returns>The value represented by the specified name or numeric value or null. Note that this value need not be a member of the ");

        
        #line default
        #line hidden
        
        #line 41 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 41 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(" enumeration.</returns>\r\n    /// <exception cref=\"ArgumentException\"><paramref name=\"value\"/> is empty or does not represent a valid value.</exception>\r\n    [return: NotNullIfNotNull(\"value\")]\r\n    public static ");

        
        #line default
        #line hidden
        
        #line 44 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 44 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write("? ParseOrNull(string? value, bool ignoreCase = false)\r\n    {\r\n        if (value is null) return null;\r\n        TryParse(value.AsSpan(), ignoreCase, throwOnFailure: true, out var result);\r\n        return result;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Converts the string representation of the name or numeric value of one or more enumerated constants to\r\n    /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.\r\n    /// </summary>\r\n    /// <param name=\"value\">The string representation of the enumeration name or underlying value to convert.</param>\r\n    /// <param name=\"ignoreCase\"><see langword=\"true\"/> to ignore case; <see langword=\"false\"/> to regard case.</param>\r\n    /// <param name=\"result\">\r\n    /// When this method returns, result contains an object of type ");

        
        #line default
        #line hidden
        
        #line 58 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 58 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(" whose value is represented by value\r\n    /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the\r\n    /// underlying type of ");

        
        #line default
        #line hidden
        
        #line 60 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 60 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(". Note that this value need not be a member of the ");

        
        #line default
        #line hidden
        
        #line 60 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 60 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(" enumeration.\r\n    /// </param>\r\n    /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>\r\n    public static bool TryParse([NotNullWhen(true)] string? value, bool ignoreCase, out ");

        
        #line default
        #line hidden
        
        #line 63 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 63 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(" result)\r\n    {\r\n        return TryParse(value.AsSpan(), ignoreCase, throwOnFailure: false, out result);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Converts the string representation of the name or numeric value of one or more enumerated constants to\r\n    /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.\r\n    /// </summary>\r\n    /// <param name=\"value\">The string representation of the enumeration name or underlying value to convert.</param>\r\n    /// <param name=\"result\">\r\n    /// When this method returns, result contains an object of type ");

        
        #line default
        #line hidden
        
        #line 74 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 74 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(" whose value is represented by value\r\n    /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the\r\n    /// underlying type of ");

        
        #line default
        #line hidden
        
        #line 76 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 76 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(". Note that this value need not be a member of the ");

        
        #line default
        #line hidden
        
        #line 76 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 76 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(" enumeration.\r\n    /// </param>\r\n    /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>\r\n    public static bool TryParse([NotNullWhen(true)] string? value, out ");

        
        #line default
        #line hidden
        
        #line 79 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 79 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(" result)\r\n    {\r\n        return TryParse(value.AsSpan(), ignoreCase: false, throwOnFailure: false, out result);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Converts the string representation of the name or numeric value of one or more enumerated constants to\r\n    /// an equivalent enumerated object.\r\n    /// </summary>\r\n    /// <param name=\"value\">The string representation of the enumeration name or underlying value to convert.</param>\r\n    /// <param name=\"ignoreCase\"><see langword=\"true\"/> to ignore case; <see langword=\"false\"/> to regard case.</param>\r\n    /// <returns>\r\n    /// Contains an object of type ");

        
        #line default
        #line hidden
        
        #line 91 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 91 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(" whose value is represented by value if the parse operation succeeds.\r\n    /// If the parse operation fails, result contains <c>null</c> value.\r\n    /// </returns>\r\n    public static ");

        
        #line default
        #line hidden
        
        #line 94 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 94 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write("? TryParse(string? value, bool ignoreCase = false)\r\n    {\r\n        return TryParse(value.AsSpan(), ignoreCase, throwOnFailure: false, out ");

        
        #line default
        #line hidden
        
        #line 96 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 96 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(" result) ? result : null;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Converts the string representation of the name or numeric value of one or more enumerated constants to\r\n    /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.\r\n    /// </summary>\r\n    /// <param name=\"value\">The string representation of the enumeration name or underlying value to convert.</param>\r\n    /// <param name=\"ignoreCase\"><see langword=\"true\"/> to ignore case; <see langword=\"false\"/> to regard case.</param>\r\n    /// <param name=\"result\">\r\n    /// When this method returns, result contains an object of type ");

        
        #line default
        #line hidden
        
        #line 106 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 106 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(" whose value is represented by value\r\n    /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the\r\n    /// underlying type of ");

        
        #line default
        #line hidden
        
        #line 108 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 108 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(". Note that this value need not be a member of the ");

        
        #line default
        #line hidden
        
        #line 108 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 108 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(" enumeration.\r\n    /// </param>\r\n    /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>\r\n    public static bool TryParse(ReadOnlySpan<char> value, bool ignoreCase, out ");

        
        #line default
        #line hidden
        
        #line 111 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 111 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(" result)\r\n    {\r\n        return TryParse(value, ignoreCase, throwOnFailure: false, out result);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Converts the string representation of the name or numeric value of one or more enumerated constants to\r\n    /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.\r\n    /// </summary>\r\n    /// <param name=\"value\">The case-sensitive string representation of the enumeration name or underlying value to convert.</param>\r\n    /// <param name=\"result\">\r\n    /// When this method returns, result contains an object of type ");

        
        #line default
        #line hidden
        
        #line 122 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 122 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(" whose value is represented by value\r\n    /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the\r\n    /// underlying type of ");

        
        #line default
        #line hidden
        
        #line 124 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 124 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(". Note that this value need not be a member of the ");

        
        #line default
        #line hidden
        
        #line 124 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 124 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(" enumeration.\r\n    /// </param>\r\n    /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>\r\n    public static bool TryParse(ReadOnlySpan<char> value, out ");

        
        #line default
        #line hidden
        
        #line 127 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 127 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(" result)\r\n    {\r\n        return TryParse(value, ignoreCase: false, throwOnFailure: false, out result);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Converts the string representation of the name or numeric value of one or more enumerated constants to\r\n    /// an equivalent enumerated object.\r\n    /// </summary>\r\n    /// <param name=\"value\">The string representation of the enumeration name or underlying value to convert.</param>\r\n    /// <param name=\"ignoreCase\"><see langword=\"true\"/> to ignore case; <see langword=\"false\"/> to regard case.</param>\r\n    /// <returns>\r\n    /// Contains an object of type ");

        
        #line default
        #line hidden
        
        #line 139 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 139 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(" whose value is represented by value if the parse operation succeeds.\r\n    /// If the parse operation fails, result contains <c>null</c> value.\r\n    /// </returns>\r\n    public static ");

        
        #line default
        #line hidden
        
        #line 142 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 142 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write("? TryParse(ReadOnlySpan<char> value, bool ignoreCase = false)\r\n    {\r\n        return TryParse(value, ignoreCase, throwOnFailure: false, out ");

        
        #line default
        #line hidden
        
        #line 144 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 144 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(" result) ? result : null;\r\n    }\r\n\r\n    private static bool TryParse(ReadOnlySpan<char> value, bool ignoreCase, bool throwOnFailure, out ");

        
        #line default
        #line hidden
        
        #line 147 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 147 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(" result)\r\n    {\r\n        var comparisonType = ignoreCase ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal;\r\n        bool success = EnumStringParser.TryParse(value, s_stringParser, comparisonType, throwOnFailure, out ");

        
        #line default
        #line hidden
        
        #line 150 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));

        
        #line default
        #line hidden
        
        #line 150 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(" number);\r\n        if (!success)\r\n        {\r\n            result = 0;\r\n            return false;\r\n        }\r\n\r\n        result = (");

        
        #line default
        #line hidden
        
        #line 157 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 157 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"
this.Write(")number;\r\n        return true;\r\n    }\r\n");

        
        #line default
        #line hidden
        
        #line 160 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DefaultBlock.ttinclude"

    }

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"

    private void WriteLegacyDefaultBlock()
    {

        
        #line default
        #line hidden
        
        #line 6 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"
this.Write("\r\n    /// <summary>\r\n    /// Converts the string representation of the name or numeric value of one or more enumerated constants to\r\n    /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.\r\n    /// </summary>\r\n    /// <param name=\"name\">The string representation of the enumeration name or underlying value to convert.</param>\r\n    /// <param name=\"comparisonType\">One of the enumeration values that specifies how the strings will be compared.</param>\r\n    /// <param name=\"result\">\r\n    /// When this method returns, result contains an object of type ");

        
        #line default
        #line hidden
        
        #line 13 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 13 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"
this.Write(" whose value is represented by value\r\n    /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the\r\n    /// underlying type of ");

        
        #line default
        #line hidden
        
        #line 15 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 15 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"
this.Write(". Note that this value need not be a member of the ");

        
        #line default
        #line hidden
        
        #line 15 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 15 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"
this.Write(" enumeration.\r\n    /// </param>\r\n    /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>\r\n    /// <exception cref=\"ArgumentException\"><paramref name=\"comparisonType\"/> is not a <see cref=\"StringComparison\"/> value.</exception>\r\n    [Obsolete(\"Use TryParse overload with 'ignoreCase' parameter\")]\r\n    public static bool TryParse(\r\n        [NotNullWhen(true)] string? name,\r\n        StringComparison comparisonType,\r\n        out ");

        
        #line default
        #line hidden
        
        #line 23 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 23 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"
this.Write(" result)\r\n    {\r\n        bool success = EnumStringParser.TryParse(name, s_stringParser, comparisonType, throwOnFailure: false, out ");

        
        #line default
        #line hidden
        
        #line 25 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));

        
        #line default
        #line hidden
        
        #line 25 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"
this.Write(" number);\r\n        if (!success)\r\n        {\r\n            result = 0;\r\n            return false;\r\n        }\r\n\r\n        result = (");

        
        #line default
        #line hidden
        
        #line 32 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 32 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"
this.Write(")number;\r\n        return true;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Converts the string representation of the name or numeric value of one or more enumerated constants to\r\n    /// an equivalent enumerated object. The return value indicates whether the conversion succeeded.\r\n    /// </summary>\r\n    /// <param name=\"name\">The case-insensitive string representation of the enumeration name or underlying value to convert.</param>\r\n    /// <param name=\"result\">\r\n    /// When this method returns, result contains an object of type ");

        
        #line default
        #line hidden
        
        #line 42 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 42 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"
this.Write(" whose value is represented by value\r\n    /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the\r\n    /// underlying type of ");

        
        #line default
        #line hidden
        
        #line 44 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 44 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"
this.Write(". Note that this value need not be a member of the ");

        
        #line default
        #line hidden
        
        #line 44 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 44 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"
this.Write(" enumeration.\r\n    /// </param>\r\n    /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>\r\n    [Obsolete(\"Use TryParse overload with 'ignoreCase' parameter\")]\r\n    public static bool TryParseIgnoreCase(\r\n        [NotNullWhen(true)] string? name,\r\n        out ");

        
        #line default
        #line hidden
        
        #line 50 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 50 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"
this.Write(" result)\r\n    {\r\n        return TryParse(name.AsSpan(), ignoreCase: true, out result);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Converts the string representation of the name or numeric value of one or more enumerated constants to\r\n    /// an equivalent enumerated object.\r\n    /// </summary>\r\n    /// <param name=\"name\">The case-insensitive string representation of the enumeration name or underlying value to convert.</param>\r\n    /// <returns>\r\n    /// Contains an object of type ");

        
        #line default
        #line hidden
        
        #line 61 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 61 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"
this.Write(" whose value is represented by value if the parse operation succeeds.\r\n    /// If the parse operation fails, result contains <c>null</c> value.\r\n    /// </returns>\r\n    [Obsolete(\"Use TryParse overload with 'ignoreCase' parameter\")]\r\n    public static ");

        
        #line default
        #line hidden
        
        #line 65 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 65 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"
this.Write("? TryParseIgnoreCase(string? name)\r\n    {\r\n        return TryParse(name.AsSpan(), ignoreCase: true, out ");

        
        #line default
        #line hidden
        
        #line 67 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 67 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"
this.Write(" result) ? result : null;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Converts the string representation of the name or numeric value of one or more enumerated constants to\r\n    /// an equivalent enumerated object.\r\n    /// </summary>\r\n    /// <param name=\"name\">The string representation of the enumeration name or underlying value to convert.</param>\r\n    /// <param name=\"comparisonType\">One of the enumeration values that specifies how the strings will be compared.</param>\r\n    /// <returns>\r\n    /// Contains an object of type ");

        
        #line default
        #line hidden
        
        #line 77 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 77 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"
this.Write(" whose value is represented by value if the parse operation succeeds.\r\n    /// If the parse operation fails, result contains <c>null</c> value.\r\n    /// </returns>\r\n    /// <exception cref=\"ArgumentException\"><paramref name=\"comparisonType\"/> is not a <see cref=\"StringComparison\"/> value.</exception>\r\n    [Obsolete(\"Use TryParse overload with 'ignoreCase' parameter\")]\r\n    public static ");

        
        #line default
        #line hidden
        
        #line 82 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 82 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"
this.Write("? TryParse(string? name, StringComparison comparisonType)\r\n    {\r\n        return TryParse(name, comparisonType, out ");

        
        #line default
        #line hidden
        
        #line 84 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 84 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"
this.Write(" result) ? result : null;\r\n    }\r\n");

        
        #line default
        #line hidden
        
        #line 86 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\LegacyDefaultBlock.ttinclude"

    }

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"

    private void WriteEnumMemberBlock()
    {
        if (!Model.HasSerializationValue)
            return;

        
        #line default
        #line hidden
        
        #line 8 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write("\r\n    /// <summary>\r\n    /// Converts the string representation of the serialized value to an equivalent enumerated object.\r\n    /// </summary>\r\n    /// <param name=\"value\">The string representation of the enumeration serialized value to convert.</param>\r\n    /// <param name=\"ignoreCase\"><see langword=\"true\"/> to ignore case; <see langword=\"false\"/> to regard case.</param>\r\n    /// <returns>The value represented by the specified serialized value. Note that this value need not be a member of the ");

        
        #line default
        #line hidden
        
        #line 13 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 13 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(" enumeration.</returns>\r\n    /// <exception cref=\"ArgumentNullException\"><paramref name=\"value\"/> is <see langword=\"null\"/>.</exception>\r\n    /// <exception cref=\"ArgumentException\"><paramref name=\"value\"/> is empty or does not represent a valid value.</exception>\r\n    public static ");

        
        #line default
        #line hidden
        
        #line 16 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 16 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(" ParseFromEnumMemberValue(string value, bool ignoreCase = false)\r\n    {\r\n        if (value is null) ThrowArgumentNullException(nameof(value));\r\n        TryParseFromEnumMemberValue(value.AsSpan(), ignoreCase, throwOnFailure: true, out var result);\r\n        return result;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Converts the string representation of the serialized value to an equivalent enumerated object.\r\n    /// </summary>\r\n    /// <param name=\"value\">The string representation of the enumeration serialized value to convert.</param>\r\n    /// <param name=\"ignoreCase\"><see langword=\"true\"/> to ignore case; <see langword=\"false\"/> to regard case.</param>\r\n    /// <returns>The value represented by the specified serialized value. Note that this value need not be a member of the ");

        
        #line default
        #line hidden
        
        #line 28 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 28 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(" enumeration.</returns>\r\n    /// <exception cref=\"ArgumentException\"><paramref name=\"value\"/> is empty or does not represent a valid value.</exception>\r\n    public static ");

        
        #line default
        #line hidden
        
        #line 30 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 30 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(" ParseFromEnumMemberValue(ReadOnlySpan<char> value, bool ignoreCase = false)\r\n    {\r\n        TryParseFromEnumMemberValue(value, ignoreCase, throwOnFailure: true, out var result);\r\n        return result;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Converts the string representation of the serialized value to an equivalent enumerated object.\r\n    /// </summary>\r\n    /// <param name=\"value\">The string representation of the enumeration serialized value to convert.</param>\r\n    /// <param name=\"ignoreCase\"><see langword=\"true\"/> to ignore case; <see langword=\"false\"/> to regard case.</param>\r\n    /// <returns>The value represented by the specified serialized value or null. Note that this value need not be a member of the ");

        
        #line default
        #line hidden
        
        #line 41 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 41 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(" enumeration.</returns>\r\n    /// <exception cref=\"ArgumentException\"><paramref name=\"value\"/> is empty or does not represent a valid value.</exception>\r\n    [return: NotNullIfNotNull(\"value\")]\r\n    public static ");

        
        #line default
        #line hidden
        
        #line 44 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 44 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write("? ParseFromEnumMemberValueOrNull(string? value, bool ignoreCase = false)\r\n    {\r\n        if (value is null) return null;\r\n        TryParseFromEnumMemberValue(value.AsSpan(), ignoreCase, throwOnFailure: true, out var result);\r\n        return result;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Converts the string representation of the serialized value to an equivalent enumerated object.\r\n    /// The return value indicates whether the conversion succeeded.\r\n    /// </summary>\r\n    /// <param name=\"value\">The value as defined with <see cref=\"System.Runtime.Serialization.EnumMemberAttribute\"/>.</param>\r\n    /// <param name=\"ignoreCase\"><see langword=\"true\"/> to ignore case; <see langword=\"false\"/> to regard case.</param>\r\n    /// <param name=\"result\">\r\n    /// When this method returns, result contains an object of type ");

        
        #line default
        #line hidden
        
        #line 58 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 58 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(" whose value is represented by a\r\n    /// serialized value if the parse operation succeeds. If the parse operation fails, result contains the default\r\n    /// value of the underlying type of ");

        
        #line default
        #line hidden
        
        #line 60 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 60 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(". Note that this value need not be a member of the ");

        
        #line default
        #line hidden
        
        #line 60 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 60 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(" enumeration.\r\n    /// </param>\r\n    /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>\r\n    public static bool TryParseFromEnumMemberValue([NotNullWhen(true)] string? value, bool ignoreCase, out ");

        
        #line default
        #line hidden
        
        #line 63 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 63 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(" result)\r\n    {\r\n        return TryParseFromEnumMemberValue(value.AsSpan(), ignoreCase, throwOnFailure: false, out result);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Converts the string representation of the serialized value to an equivalent enumerated object.\r\n    /// The return value indicates whether the conversion succeeded.\r\n    /// </summary>\r\n    /// <param name=\"value\">The value as defined with <see cref=\"System.Runtime.Serialization.EnumMemberAttribute\"/>.</param>\r\n    /// <param name=\"result\">\r\n    /// When this method returns, result contains an object of type ");

        
        #line default
        #line hidden
        
        #line 74 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 74 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(" whose value is represented by a\r\n    /// serialized value if the parse operation succeeds. If the parse operation fails, result contains the default\r\n    /// value of the underlying type of ");

        
        #line default
        #line hidden
        
        #line 76 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 76 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(". Note that this value need not be a member of the ");

        
        #line default
        #line hidden
        
        #line 76 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 76 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(" enumeration.\r\n    /// </param>\r\n    /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>\r\n    public static bool TryParseFromEnumMemberValue([NotNullWhen(true)] string? value, out ");

        
        #line default
        #line hidden
        
        #line 79 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 79 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(" result)\r\n    {\r\n        return TryParseFromEnumMemberValue(value.AsSpan(), ignoreCase: false, throwOnFailure: false, out result);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Converts the string representation of the serialized value to an equivalent enumerated object.\r\n    /// </summary>\r\n    /// <param name=\"value\">The value as defined with <see cref=\"System.Runtime.Serialization.EnumMemberAttribute\"/>.</param>\r\n    /// <param name=\"ignoreCase\"><see langword=\"true\"/> to ignore case; <see langword=\"false\"/> to regard case.</param>\r\n    /// <returns>\r\n    /// Contains an object of type ");

        
        #line default
        #line hidden
        
        #line 90 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 90 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(" whose value is represented by value if the parse operation succeeds.\r\n    /// If the parse operation fails, result contains a null value.\r\n    /// </returns>\r\n    public static ");

        
        #line default
        #line hidden
        
        #line 93 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 93 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write("? TryParseFromEnumMemberValue(string? value, bool ignoreCase = false)\r\n    {\r\n        return TryParseFromEnumMemberValue(value.AsSpan(), ignoreCase, throwOnFailure: false, out ");

        
        #line default
        #line hidden
        
        #line 95 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 95 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(" result) ? result : null;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Converts the string representation of the serialized value to an equivalent enumerated object.\r\n    /// The return value indicates whether the conversion succeeded.\r\n    /// </summary>\r\n    /// <param name=\"value\">The value as defined with <see cref=\"System.Runtime.Serialization.EnumMemberAttribute\"/>.</param>\r\n    /// <param name=\"ignoreCase\"><see langword=\"true\"/> to ignore case; <see langword=\"false\"/> to regard case.</param>\r\n    /// <param name=\"result\">\r\n    /// When this method returns, result contains an object of type ");

        
        #line default
        #line hidden
        
        #line 105 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 105 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(" whose value is represented by a\r\n    /// serialized value if the parse operation succeeds. If the parse operation fails, result contains the default\r\n    /// value of the underlying type of ");

        
        #line default
        #line hidden
        
        #line 107 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 107 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(". Note that this value need not be a member of the ");

        
        #line default
        #line hidden
        
        #line 107 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 107 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(" enumeration.\r\n    /// </param>\r\n    /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>\r\n    public static bool TryParseFromEnumMemberValue(ReadOnlySpan<char> value, bool ignoreCase, out ");

        
        #line default
        #line hidden
        
        #line 110 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 110 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(" result)\r\n    {\r\n        return TryParseFromEnumMemberValue(value, ignoreCase, throwOnFailure: false, out result);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Converts the string representation of the serialized value to an equivalent enumerated object.\r\n    /// The return value indicates whether the conversion succeeded.\r\n    /// </summary>\r\n    /// <param name=\"value\">The value as defined with <see cref=\"System.Runtime.Serialization.EnumMemberAttribute\"/>.</param>\r\n    /// <param name=\"result\">\r\n    /// When this method returns, result contains an object of type ");

        
        #line default
        #line hidden
        
        #line 121 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 121 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(" whose value is represented by a\r\n    /// serialized value if the parse operation succeeds. If the parse operation fails, result contains the default\r\n    /// value of the underlying type of ");

        
        #line default
        #line hidden
        
        #line 123 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 123 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(". Note that this value need not be a member of the ");

        
        #line default
        #line hidden
        
        #line 123 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 123 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(" enumeration.\r\n    /// </param>\r\n    /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>\r\n    public static bool TryParseFromEnumMemberValue(ReadOnlySpan<char> value, out ");

        
        #line default
        #line hidden
        
        #line 126 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 126 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(" result)\r\n    {\r\n        return TryParseFromEnumMemberValue(value, ignoreCase: false, throwOnFailure: false, out result);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Converts the string representation of the serialized value to an equivalent enumerated object.\r\n    /// </summary>\r\n    /// <param name=\"value\">The value as defined with <see cref=\"System.Runtime.Serialization.EnumMemberAttribute\"/>.</param>\r\n    /// <param name=\"ignoreCase\"><see langword=\"true\"/> to ignore case; <see langword=\"false\"/> to regard case.</param>\r\n    /// <returns>\r\n    /// Contains an object of type ");

        
        #line default
        #line hidden
        
        #line 137 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 137 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(" whose value is represented by value if the parse operation succeeds.\r\n    /// If the parse operation fails, result contains a null value.\r\n    /// </returns>\r\n    public static ");

        
        #line default
        #line hidden
        
        #line 140 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 140 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write("? TryParseFromEnumMemberValue(ReadOnlySpan<char> value, bool ignoreCase = false)\r\n    {\r\n        return TryParseFromEnumMemberValue(value, ignoreCase, throwOnFailure: false, out ");

        
        #line default
        #line hidden
        
        #line 142 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 142 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(" result) ? result : null;\r\n    }\r\n\r\n    private static bool TryParseFromEnumMemberValue(ReadOnlySpan<char> value, bool ignoreCase, bool throwOnFailure, out ");

        
        #line default
        #line hidden
        
        #line 145 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 145 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(" result)\r\n    {\r\n        return TryParseFromEnumMemberValue(value, ignoreCase ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal, throwOnFailure, out result);\r\n    }\r\n\r\n    private static bool TryParseFromEnumMemberValue(ReadOnlySpan<char> value, StringComparison comparisonType, bool throwOnFailure, out ");

        
        #line default
        #line hidden
        
        #line 150 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 150 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(" result)\r\n    {\r\n        bool success = EnumStringParser.TryParse(value, s_serializationStringParser, comparisonType, throwOnFailure, out ");

        
        #line default
        #line hidden
        
        #line 152 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));

        
        #line default
        #line hidden
        
        #line 152 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(" number);\r\n        if (!success)\r\n        {\r\n            result = 0;\r\n            return false;\r\n        }\r\n\r\n        result = (");

        
        #line default
        #line hidden
        
        #line 159 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 159 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(")number;\r\n        return true;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Converts the string representation of the serialized value to an equivalent enumerated object.\r\n    /// The return value indicates whether the conversion succeeded.\r\n    /// </summary>\r\n    /// <param name=\"value\">The value as defined with <see cref=\"System.Runtime.Serialization.EnumMemberAttribute\"/>.</param>\r\n    /// <param name=\"comparisonType\">One of the enumeration values that specifies how the strings will be compared.</param>\r\n    /// <param name=\"result\">\r\n    /// When this method returns, result contains an object of type ");

        
        #line default
        #line hidden
        
        #line 170 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 170 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(" whose value is represented by value\r\n    /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the\r\n    /// underlying type of ");

        
        #line default
        #line hidden
        
        #line 172 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 172 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(". Note that this value need not be a member of the ");

        
        #line default
        #line hidden
        
        #line 172 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 172 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(" enumeration.\r\n    /// </param>\r\n    /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>\r\n    /// <exception cref=\"ArgumentException\"><paramref name=\"comparisonType\"/> is not a <see cref=\"StringComparison\"/> value.</exception>\r\n    [Obsolete(\"Use TryParseFromEnumMemberValue overload with 'ignoreCase' parameter\")]\r\n    public static bool TryParseFromEnumMemberValue(\r\n        [NotNullWhen(true)] string? value,\r\n        StringComparison comparisonType,\r\n        out ");

        
        #line default
        #line hidden
        
        #line 180 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 180 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(" result)\r\n    {\r\n        return TryParseFromEnumMemberValue(value.AsSpan(), comparisonType, throwOnFailure: false, out result);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Converts the string representation of the value associated with one enumerated constant to\r\n    /// an equivalent enumerated object.\r\n    /// </summary>\r\n    /// <param name=\"value\">The value as defined with <see cref=\"System.Runtime.Serialization.EnumMemberAttribute\"/>.</param>\r\n    /// <param name=\"comparisonType\">One of the enumeration values that specifies how the strings will be compared.</param>\r\n    /// <returns>\r\n    /// Contains an object of type ");

        
        #line default
        #line hidden
        
        #line 192 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 192 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(" whose value is represented by value if the parse operation succeeds.\r\n    /// If the parse operation fails, result contains a null value.\r\n    /// </returns>\r\n    /// <exception cref=\"ArgumentException\"><paramref name=\"comparisonType\"/> is not a <see cref=\"StringComparison\"/> value.</exception>\r\n    [Obsolete(\"Use TryParseFromEnumMemberValue overload with 'ignoreCase' parameter\")]\r\n    public static ");

        
        #line default
        #line hidden
        
        #line 197 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 197 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write("? TryParseFromEnumMemberValue(string? value, StringComparison comparisonType)\r\n    {\r\n        return TryParseFromEnumMemberValue(value.AsSpan(), comparisonType, throwOnFailure: false, out ");

        
        #line default
        #line hidden
        
        #line 199 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 199 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"
this.Write(" result) ? result : null;\r\n    }\r\n");

        
        #line default
        #line hidden
        
        #line 201 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\EnumMemberBlock.ttinclude"

    }

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DescriptionBlock.ttinclude"

    private void WriteDescriptionBlock()
    {
        if (!Model.HasDescription)
            return;

        
        #line default
        #line hidden
        
        #line 8 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DescriptionBlock.ttinclude"
this.Write("\r\n    public static ");

        
        #line default
        #line hidden
        
        #line 8 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DescriptionBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 8 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DescriptionBlock.ttinclude"
this.Write(" CreateFromDescription(string description, StringComparison comparisonType = StringComparison.Ordinal)\r\n    {\r\n        if (description is null) ThrowArgumentNullException(nameof(description));\r\n        TryCreateFromDescription(description.AsSpan(), comparisonType, throwOnFailure: true, out var result);\r\n        return result;\r\n    }\r\n\r\n    public static ");

        
        #line default
        #line hidden
        
        #line 15 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DescriptionBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 15 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DescriptionBlock.ttinclude"
this.Write(" CreateFromDescription(ReadOnlySpan<char> description, StringComparison comparisonType = StringComparison.Ordinal)\r\n    {\r\n        TryCreateFromDescription(description, comparisonType, throwOnFailure: true, out var result);\r\n        return result;\r\n    }\r\n\r\n    [return: NotNullIfNotNull(\"description\")]\r\n    public static ");

        
        #line default
        #line hidden
        
        #line 22 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DescriptionBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 22 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DescriptionBlock.ttinclude"
this.Write("? CreateFromDescriptionOrNull(string? description, StringComparison comparisonType = StringComparison.Ordinal)\r\n    {\r\n        if (description is null) return null;\r\n        TryCreateFromDescription(description.AsSpan(), comparisonType, throwOnFailure: true, out var result);\r\n        return result;\r\n    }\r\n\r\n    public static bool TryCreateFromDescription([NotNullWhen(true)] string? description, StringComparison comparisonType, out ");

        
        #line default
        #line hidden
        
        #line 29 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DescriptionBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 29 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DescriptionBlock.ttinclude"
this.Write(" result)\r\n    {\r\n        return TryCreateFromDescription(description.AsSpan(), comparisonType, throwOnFailure: false, out result);\r\n    }\r\n\r\n    public static bool TryCreateFromDescription([NotNullWhen(true)] string? description, out ");

        
        #line default
        #line hidden
        
        #line 34 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DescriptionBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 34 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DescriptionBlock.ttinclude"
this.Write(" result)\r\n    {\r\n        return TryCreateFromDescription(description.AsSpan(), StringComparison.Ordinal, throwOnFailure: false, out result);\r\n    }\r\n\r\n    public static ");

        
        #line default
        #line hidden
        
        #line 39 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DescriptionBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 39 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DescriptionBlock.ttinclude"
this.Write("? TryCreateFromDescription(string? description, StringComparison comparisonType = StringComparison.Ordinal)\r\n    {\r\n        return TryCreateFromDescription(description.AsSpan(), comparisonType, throwOnFailure: false, out ");

        
        #line default
        #line hidden
        
        #line 41 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DescriptionBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 41 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DescriptionBlock.ttinclude"
this.Write(" result) ? result : null;\r\n    }\r\n\r\n    public static bool TryCreateFromDescription(ReadOnlySpan<char> description, StringComparison comparisonType, out ");

        
        #line default
        #line hidden
        
        #line 44 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DescriptionBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 44 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DescriptionBlock.ttinclude"
this.Write(" result)\r\n    {\r\n        return TryCreateFromDescription(description, comparisonType, throwOnFailure: false, out result);\r\n    }\r\n\r\n    public static bool TryCreateFromDescription(ReadOnlySpan<char> description, out ");

        
        #line default
        #line hidden
        
        #line 49 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DescriptionBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 49 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DescriptionBlock.ttinclude"
this.Write(" result)\r\n    {\r\n        return TryCreateFromDescription(description, StringComparison.Ordinal, throwOnFailure: false, out result);\r\n    }\r\n\r\n    public static ");

        
        #line default
        #line hidden
        
        #line 54 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DescriptionBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 54 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DescriptionBlock.ttinclude"
this.Write("? TryCreateFromDescription(ReadOnlySpan<char> description, StringComparison comparisonType = StringComparison.Ordinal)\r\n    {\r\n        return TryCreateFromDescription(description, comparisonType, throwOnFailure: false, out ");

        
        #line default
        #line hidden
        
        #line 56 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DescriptionBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 56 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DescriptionBlock.ttinclude"
this.Write(" result) ? result : null;\r\n    }\r\n\r\n    private static bool TryCreateFromDescription(ReadOnlySpan<char> description, StringComparison comparisonType, bool throwOnFailure, out ");

        
        #line default
        #line hidden
        
        #line 59 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DescriptionBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 59 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DescriptionBlock.ttinclude"
this.Write(" result)\r\n    {\r\n        bool success = EnumStringParser.TryParseDescription(description, s_stringParser, comparisonType, throwOnFailure, out ");

        
        #line default
        #line hidden
        
        #line 61 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DescriptionBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));

        
        #line default
        #line hidden
        
        #line 61 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DescriptionBlock.ttinclude"
this.Write(" number);\r\n        if (!success)\r\n        {\r\n            result = 0;\r\n            return false;\r\n        }\r\n\r\n        result = (");

        
        #line default
        #line hidden
        
        #line 68 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DescriptionBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 68 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DescriptionBlock.ttinclude"
this.Write(")number;\r\n        return true;\r\n    }\r\n");

        
        #line default
        #line hidden
        
        #line 71 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DescriptionBlock.ttinclude"

    }

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"

    private void WriteDisplayBlock()
    {
        if (Model.HasDisplayName)
        {

        
        #line default
        #line hidden
        
        #line 8 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write("\r\n    public static bool TryCreateFromDisplayShortName(\r\n        [NotNullWhen(true)] string? displayShortName,\r\n        StringComparison comparisonType,\r\n        out ");

        
        #line default
        #line hidden
        
        #line 11 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 11 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(" result)\r\n    {\r\n");

        
        #line default
        #line hidden
        
        #line 13 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"

            if (Model.Values.All(x => x.Display?.ShortName == null))
            {

        
        #line default
        #line hidden
        
        #line 17 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write("        return TryCreateFromDisplayName(displayShortName, comparisonType, out result);\r\n");

        
        #line default
        #line hidden
        
        #line 18 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"

            }
            else
            {

        
        #line default
        #line hidden
        
        #line 23 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write("        ");

        
        #line default
        #line hidden
        
        #line 23 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));

        
        #line default
        #line hidden
        
        #line 23 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(" numValue;\r\n        switch (displayShortName)\r\n        {\r\n");

        
        #line default
        #line hidden
        
        #line 26 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"

                foreach (var curr in Model.Values.Where(x => x.Display?.ShortName != null))
                {

        
        #line default
        #line hidden
        
        #line 30 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write("            case { } s when s.Equals(");

        
        #line default
        #line hidden
        
        #line 30 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(curr.Display!.ResourceShortName != null
                                ? Append(curr.Display.ResourceShortName)
                                : Append($"\"{curr.Display.ShortName}\"")));

        
        #line default
        #line hidden
        
        #line 33 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(", comparisonType):\r\n                numValue = ");

        
        #line default
        #line hidden
        
        #line 34 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberValue));

        
        #line default
        #line hidden
        
        #line 34 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(";\r\n                break;\r\n");

        
        #line default
        #line hidden
        
        #line 36 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"

                }

        
        #line default
        #line hidden
        
        #line 39 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write("            default:\r\n                return TryCreateFromDisplayName(displayShortName, comparisonType, out result);\r\n        }\r\n\r\n        result = (");

        
        #line default
        #line hidden
        
        #line 43 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 43 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(")numValue;\r\n        return true;\r\n");

        
        #line default
        #line hidden
        
        #line 45 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"

            }

        
        #line default
        #line hidden
        
        #line 48 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write("    }\r\n\r\n    public static bool TryCreateFromDisplayShortName([NotNullWhen(true)] string? displayShortName, out ");

        
        #line default
        #line hidden
        
        #line 50 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 50 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(" result)\r\n    {\r\n        return TryCreateFromDisplayShortName(displayShortName, StringComparison.Ordinal, out result);\r\n    }\r\n\r\n    public static ");

        
        #line default
        #line hidden
        
        #line 55 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 55 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write("? TryCreateFromDisplayShortName(string? displayShortName, StringComparison comparisonType)\r\n    {\r\n        return TryCreateFromDisplayShortName(displayShortName, comparisonType, out ");

        
        #line default
        #line hidden
        
        #line 57 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 57 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(" result) ? result : null;\r\n    }\r\n\r\n    public static ");

        
        #line default
        #line hidden
        
        #line 60 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 60 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write("? TryCreateFromDisplayShortName(string? displayShortName)\r\n    {\r\n        return TryCreateFromDisplayShortName(displayShortName, StringComparison.Ordinal, out ");

        
        #line default
        #line hidden
        
        #line 62 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 62 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(" result) ? result : null;\r\n    }\r\n\r\n    public static bool TryCreateFromDisplayName(\r\n        [NotNullWhen(true)] string? displayName,\r\n        StringComparison comparisonType,\r\n        out ");

        
        #line default
        #line hidden
        
        #line 68 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 68 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(" result)\r\n    {\r\n");

        
        #line default
        #line hidden
        
        #line 70 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"

            if (Model.Values.Count == 0)
            {

        
        #line default
        #line hidden
        
        #line 74 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write("        result = default;\r\n        return false;\r\n");

        
        #line default
        #line hidden
        
        #line 76 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"

            }
            else
            {

        
        #line default
        #line hidden
        
        #line 81 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write("        ");

        
        #line default
        #line hidden
        
        #line 81 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));

        
        #line default
        #line hidden
        
        #line 81 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(" numValue;\r\n        switch (displayName)\r\n        {\r\n");

        
        #line default
        #line hidden
        
        #line 84 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"

                foreach (var curr in Model.Values)
                {

        
        #line default
        #line hidden
        
        #line 88 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write("            case { } s when s.Equals(");

        
        #line default
        #line hidden
        
        #line 88 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(curr.Display?.ResourceName != null
                                ? Append(curr.Display.ResourceName)
                                : curr.Display?.Name != null
                                    ? Append($"\"{curr.Display.Name}\"")
                                    : Append($"\"{curr.MemberName}\"")));

        
        #line default
        #line hidden
        
        #line 93 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(", comparisonType):\r\n                numValue = ");

        
        #line default
        #line hidden
        
        #line 94 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberValue));

        
        #line default
        #line hidden
        
        #line 94 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(";\r\n                break;\r\n");

        
        #line default
        #line hidden
        
        #line 96 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"

                }

        
        #line default
        #line hidden
        
        #line 99 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write("            default:\r\n                result = default;\r\n                return false;\r\n        }\r\n\r\n        result = (");

        
        #line default
        #line hidden
        
        #line 104 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 104 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(")numValue;\r\n        return true;\r\n");

        
        #line default
        #line hidden
        
        #line 106 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"

            }

        
        #line default
        #line hidden
        
        #line 109 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write("    }\r\n\r\n    public static bool TryCreateFromDisplayName([NotNullWhen(true)] string? displayName, out ");

        
        #line default
        #line hidden
        
        #line 111 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 111 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(" result)\r\n    {\r\n        return TryCreateFromDisplayName(displayName, StringComparison.Ordinal, out result);\r\n    }\r\n\r\n    public static ");

        
        #line default
        #line hidden
        
        #line 116 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 116 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write("? TryCreateFromDisplayName(string? displayName, StringComparison comparisonType)\r\n    {\r\n        return TryCreateFromDisplayName(displayName, comparisonType, out ");

        
        #line default
        #line hidden
        
        #line 118 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 118 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(" result) ? result : null;\r\n    }\r\n\r\n    public static ");

        
        #line default
        #line hidden
        
        #line 121 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 121 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write("? TryCreateFromDisplayName(string? displayName)\r\n    {\r\n        return TryCreateFromDisplayName(displayName, StringComparison.Ordinal, out ");

        
        #line default
        #line hidden
        
        #line 123 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 123 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(" result) ? result : null;\r\n    }\r\n");

        
        #line default
        #line hidden
        
        #line 125 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"

        }

        
        #line default
        #line hidden
        
        #line 128 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"

        if (Model.HasDisplayDescription)
        {

        
        #line default
        #line hidden
        
        #line 133 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write("\r\n    public static bool TryCreateFromDescription(\r\n        [NotNullWhen(true)] string? description,\r\n        StringComparison comparisonType,\r\n        out ");

        
        #line default
        #line hidden
        
        #line 136 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 136 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(" result)\r\n    {\r\n");

        
        #line default
        #line hidden
        
        #line 138 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"

            if (Model.Values.All(x => x.Display?.Description == null))
            {

        
        #line default
        #line hidden
        
        #line 142 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write("        result = default;\r\n        return false;\r\n");

        
        #line default
        #line hidden
        
        #line 144 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"

            }
            else
            {

        
        #line default
        #line hidden
        
        #line 149 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write("        ");

        
        #line default
        #line hidden
        
        #line 149 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));

        
        #line default
        #line hidden
        
        #line 149 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(" numValue;\r\n        switch (description)\r\n        {\r\n");

        
        #line default
        #line hidden
        
        #line 152 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"

                foreach (var curr in Model.Values.Where(x => x.Display?.Description != null))
                {

        
        #line default
        #line hidden
        
        #line 156 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write("            case { } s when s.Equals(");

        
        #line default
        #line hidden
        
        #line 156 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(curr.Display!.ResourceDescription != null
                                ? Append(curr.Display.ResourceDescription)
                                : Append($"\"{curr.Display.Description}\"")));

        
        #line default
        #line hidden
        
        #line 159 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(", comparisonType):\r\n                numValue = ");

        
        #line default
        #line hidden
        
        #line 160 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberValue));

        
        #line default
        #line hidden
        
        #line 160 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(";\r\n                break;\r\n");

        
        #line default
        #line hidden
        
        #line 162 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"

                }

        
        #line default
        #line hidden
        
        #line 165 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write("            default:\r\n                result = default;\r\n                return false;\r\n        }\r\n\r\n        result = (");

        
        #line default
        #line hidden
        
        #line 170 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 170 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(")numValue;\r\n        return true;\r\n");

        
        #line default
        #line hidden
        
        #line 172 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"

            }

        
        #line default
        #line hidden
        
        #line 175 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write("    }\r\n\r\n    public static bool TryCreateFromDescription([NotNullWhen(true)] string? description, out ");

        
        #line default
        #line hidden
        
        #line 177 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 177 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(" result)\r\n    {\r\n        return TryCreateFromDescription(description, StringComparison.Ordinal, out result);\r\n    }\r\n\r\n    public static ");

        
        #line default
        #line hidden
        
        #line 182 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 182 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write("? TryCreateFromDescription(string? description, StringComparison comparisonType)\r\n    {\r\n        return TryCreateFromDescription(description, comparisonType, out ");

        
        #line default
        #line hidden
        
        #line 184 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 184 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(" result) ? result : null;\r\n    }\r\n\r\n    public static ");

        
        #line default
        #line hidden
        
        #line 187 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 187 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write("? TryCreateFromDescription(string? description)\r\n    {\r\n        return TryCreateFromDescription(description, StringComparison.Ordinal, out ");

        
        #line default
        #line hidden
        
        #line 189 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 189 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"
this.Write(" result) ? result : null;\r\n    }\r\n");

        
        #line default
        #line hidden
        
        #line 191 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\DisplayBlock.ttinclude"

        }
    }

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\MiscellaneousBlock.ttinclude"

    private void WriteMiscellaneousBlock()
    {

        
        #line default
        #line hidden
        
        #line 6 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\MiscellaneousBlock.ttinclude"
this.Write("\r\n    /// <summary>Retrieves an array of the values of the constants in the ");

        
        #line default
        #line hidden
        
        #line 6 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\MiscellaneousBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 6 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\MiscellaneousBlock.ttinclude"
this.Write(" enumeration.</summary>\r\n    /// <returns>An array that contains the values of the constants in ");

        
        #line default
        #line hidden
        
        #line 7 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\MiscellaneousBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 7 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\MiscellaneousBlock.ttinclude"
this.Write(".</returns>\r\n    public static ");

        
        #line default
        #line hidden
        
        #line 8 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\MiscellaneousBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 8 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\MiscellaneousBlock.ttinclude"
this.Write("[] GetValues()\r\n    {\r\n        return new[]\r\n        {\r\n");

        
        #line default
        #line hidden
        
        #line 12 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\MiscellaneousBlock.ttinclude"

        foreach (var curr in Model.UniqueValues)
        {

        
        #line default
        #line hidden
        
        #line 16 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\MiscellaneousBlock.ttinclude"
this.Write("            (");

        
        #line default
        #line hidden
        
        #line 16 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\MiscellaneousBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));

        
        #line default
        #line hidden
        
        #line 16 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\MiscellaneousBlock.ttinclude"
this.Write(")");

        
        #line default
        #line hidden
        
        #line 16 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\MiscellaneousBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberValue));

        
        #line default
        #line hidden
        
        #line 16 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\MiscellaneousBlock.ttinclude"
this.Write(",\r\n");

        
        #line default
        #line hidden
        
        #line 17 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\MiscellaneousBlock.ttinclude"

        }

        
        #line default
        #line hidden
        
        #line 20 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\MiscellaneousBlock.ttinclude"
this.Write("        };\r\n    }\r\n\r\n    /// <summary>Retrieves an array of the names of the constants in ");

        
        #line default
        #line hidden
        
        #line 23 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\MiscellaneousBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 23 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\MiscellaneousBlock.ttinclude"
this.Write(" enumeration.</summary>\r\n    /// <returns>A string array of the names of the constants in ");

        
        #line default
        #line hidden
        
        #line 24 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\MiscellaneousBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));

        
        #line default
        #line hidden
        
        #line 24 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\MiscellaneousBlock.ttinclude"
this.Write(".</returns>\r\n    public static string[] GetNames()\r\n    {\r\n        return new[]\r\n        {\r\n");

        
        #line default
        #line hidden
        
        #line 29 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\MiscellaneousBlock.ttinclude"

        foreach (var curr in Model.Values)
        {

        
        #line default
        #line hidden
        
        #line 33 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\MiscellaneousBlock.ttinclude"
this.Write("            \"");

        
        #line default
        #line hidden
        
        #line 33 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\MiscellaneousBlock.ttinclude"
this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberName));

        
        #line default
        #line hidden
        
        #line 33 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\MiscellaneousBlock.ttinclude"
this.Write("\",\r\n");

        
        #line default
        #line hidden
        
        #line 34 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\MiscellaneousBlock.ttinclude"

        }

        
        #line default
        #line hidden
        
        #line 37 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\MiscellaneousBlock.ttinclude"
this.Write("        };\r\n    }\r\n\r\n    [DoesNotReturn]\r\n    private static void ThrowArgumentNullException(string paramName)\r\n    {\r\n        throw new ArgumentNullException(paramName);\r\n    }\r\n");

        
        #line default
        #line hidden
        
        #line 45 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\Factory\MiscellaneousBlock.ttinclude"

    }

        
        #line default
        #line hidden
        
        #line 61 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumFactoryWriter.tt"

    public EnumFactoryWriter(StringBuilder builder) : base(builder)
    {
    }

    public override string GetFileName() => $"{Model.Namespace ?? "_"}.{Model.Name}Factory.g.cs";

    protected override bool CanGenerateFor(EnumToGenerate model) =>
        (model.SelectedGenerators & SelectedGenerators.MainGenerator) != 0;

        
        #line default
        #line hidden
    }
    
}
