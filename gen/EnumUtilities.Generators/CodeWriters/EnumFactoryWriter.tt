<#@ template debug="false" linePragmas="false" hostspecific="false" language="C#" inherits="CodeWriterBase<EnumToGenerate>" #>
<#@ import namespace="Common" #>
<#@ import namespace="Models" #>
<#@ import namespace="System.Text" #>
<#@ include file="$(ProjectDir)CodeWriters\Factory\DefaultBlock.ttinclude"#>
<#@ include file="$(ProjectDir)CodeWriters\Factory\LegacyDefaultBlock.ttinclude"#>
<#@ include file="$(ProjectDir)CodeWriters\Factory\EnumMemberBlock.ttinclude"#>
<#@ include file="$(ProjectDir)CodeWriters\Factory\DescriptionBlock.ttinclude"#>
<#@ include file="$(ProjectDir)CodeWriters\Factory\DisplayBlock.ttinclude"#>
<#@ include file="$(ProjectDir)CodeWriters\Factory\MiscellaneousBlock.ttinclude"#>
// <auto-generated />
#nullable enable

using System;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Runtime.CompilerServices;
using Raiqub.Generators.EnumUtilities.Parsers;

#pragma warning disable CS1591 // publicly visible type or member must be documented

<#
    if (!string.IsNullOrEmpty(Model.Namespace))
    {
        WriteLine($"namespace {Model.Namespace}");
        WriteLine("{");
        PushIndent();
    }
#>
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("<#= CurrentAssemblyName.Name #>", "<#= Append($"{CurrentAssemblyName.Version}") #>")]
<#= Model.IsPublic ? "public" : "internal" #> static partial class <#= Model.Name #>Factory
{
    private static readonly <#= Model.MetadataClassName #>.StringParser s_stringParser = <#= Model.MetadataClassName #>.StringParser.Instance;

<#
    WriteDefaultBlock();
    WriteLegacyDefaultBlock();
    WriteEnumMemberBlock();
    WriteDescriptionBlock();
    WriteDisplayBlock();
    WriteMiscellaneousBlock();
#>
}
<#
    if (!string.IsNullOrEmpty(Model.Namespace))
    {
        PopIndent();
        WriteLine("}");
    }
#>
<#+
    public EnumFactoryWriter(StringBuilder builder) : base(builder)
    {
    }

    public override string GetFileName() => $"{Model.Namespace ?? "_"}.{Model.Name}Factory.g.cs";

    protected override bool CanGenerateFor(EnumToGenerate model) =>
        (model.SelectedGenerators & SelectedGenerators.MainGenerator) != 0;
#>
