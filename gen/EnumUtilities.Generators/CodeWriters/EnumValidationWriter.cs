// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Raiqub.Generators.EnumUtilities.CodeWriters
{
    using Common;
    using Models;
    using System.Text;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumValidationWriter.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class EnumValidationWriter : CodeWriterBase<EnumToGenerate>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("// <auto-generated />\r\n#nullable enable\r\n\r\nusing System;\r\nusing System.Diagnostics.CodeAnalysis;\r\n\r\n#pragma warning disable CS1591 // publicly visible type or member must be documented\r\n\r\n");
            
            #line 13 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumValidationWriter.tt"

    if (!string.IsNullOrEmpty(Model.Namespace))
    {
        WriteLine($"namespace {Model.Namespace}");
        WriteLine("{");
        PushIndent();
    }

            
            #line default
            #line hidden
            this.Write("[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]\r\n[global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"");
            
            #line 22 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumValidationWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(CurrentAssemblyName.Name));
            
            #line default
            #line hidden
            this.Write("\", \"");
            
            #line 22 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumValidationWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Append($"{CurrentAssemblyName.Version}")));
            
            #line default
            #line hidden
            this.Write("\")]\r\n");
            
            #line 23 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumValidationWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.IsPublic ? "public" : "internal"));
            
            #line default
            #line hidden
            this.Write(" static partial class ");
            
            #line 23 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumValidationWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write("Validation\r\n{\r\n    /// <summary>Returns a boolean telling whether the value of <see cref=\"");
            
            #line 25 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumValidationWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write("\"/> instance exists in the enumeration.</summary>\r\n    /// <returns><c>true</c> if the value of <see cref=\"");
            
            #line 26 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumValidationWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name));
            
            #line default
            #line hidden
            this.Write("\"/> instance exists in the enumeration; <c>false</c> otherwise.</returns>\r\n    public static bool IsDefined(");
            
            #line 27 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumValidationWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.RefName));
            
            #line default
            #line hidden
            this.Write(" value)\r\n    {\r\n        return (");
            
            #line 29 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumValidationWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.UnderlyingType));
            
            #line default
            #line hidden
            this.Write(")value switch\r\n        {\r\n");
            
            #line 31 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumValidationWriter.tt"

    foreach (var curr in Model.UniqueValues)
    {

            
            #line default
            #line hidden
            this.Write("            ");
            
            #line 35 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumValidationWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberValue));
            
            #line default
            #line hidden
            this.Write(" => true,\r\n");
            
            #line 36 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumValidationWriter.tt"

    }

            
            #line default
            #line hidden
            this.Write("            _ => false\r\n        };\r\n    }\r\n\r\n    public static bool IsDefined(\r\n        [NotNullWhen(true)] string? name,\r\n        StringComparison comparisonType)\r\n    {\r\n        return name switch\r\n        {\r\n");
            
            #line 49 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumValidationWriter.tt"

    foreach (var curr in Model.Values)
    {

            
            #line default
            #line hidden
            this.Write("            { } s when s.Equals(\"");
            
            #line 53 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumValidationWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberName));
            
            #line default
            #line hidden
            this.Write("\", comparisonType) => true,\r\n");
            
            #line 54 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumValidationWriter.tt"

    }

            
            #line default
            #line hidden
            this.Write("            _ => false\r\n        };\r\n    }\r\n\r\n    public static bool IsDefinedIgnoreCase([NotNullWhen(true)] string? name)\r\n    {\r\n        return IsDefined(name, StringComparison.OrdinalIgnoreCase);\r\n    }\r\n\r\n    public static bool IsDefined([NotNullWhen(true)] string? name)\r\n    {\r\n        return name switch\r\n        {\r\n");
            
            #line 70 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumValidationWriter.tt"

    foreach (var curr in Model.Values)
    {

            
            #line default
            #line hidden
            this.Write("            \"");
            
            #line 74 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumValidationWriter.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(curr.MemberName));
            
            #line default
            #line hidden
            this.Write("\" => true,\r\n");
            
            #line 75 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumValidationWriter.tt"

    }

            
            #line default
            #line hidden
            this.Write("            _ => false\r\n        };\r\n    }\r\n}\r\n");
            
            #line 82 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumValidationWriter.tt"

    if (!string.IsNullOrEmpty(Model.Namespace))
    {
        PopIndent();
        WriteLine("}");
    }

            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        #line 89 "C:\Users\skarl\source\repos\github\skarllot\EnumUtilities\gen\EnumUtilities.Generators\CodeWriters\EnumValidationWriter.tt"

    public EnumValidationWriter(StringBuilder builder) : base(builder)
    {
    }

    public override string GetFileName() => $"{Model.Namespace ?? "_"}.{Model.Name}Validation.g.cs";

    protected override bool CanGenerateFor(EnumToGenerate model) =>
        (model.SelectedGenerators & SelectedGenerators.MainGenerator) != 0;

        
        #line default
        #line hidden
    }
    
}
