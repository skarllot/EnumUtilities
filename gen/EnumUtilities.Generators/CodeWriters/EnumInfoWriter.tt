<#@ template debug="false" linePragmas="false" hostspecific="false" language="C#" inherits="CodeWriterBase<EnumToGenerate>" #>
<#@ import namespace="Common" #>
<#@ import namespace="Models" #>
<#@ import namespace="System.Text" #>
<#@ include file="$(ProjectDir)CodeWriters\EnumInfo\ExtensionsBlock.ttinclude" #>
<#@ include file="$(ProjectDir)CodeWriters\EnumInfo\FactoryBlock.ttinclude" #>
// <auto-generated />
#nullable enable

using System;
using System.Runtime.CompilerServices;
using Raiqub.Generators.EnumUtilities.Formatters;
using Raiqub.Generators.EnumUtilities.Parsers;

#pragma warning disable CS1591 // publicly visible type or member must be documented

<#
            if (!string.IsNullOrEmpty(Model.Namespace))
            {
                WriteLine($"namespace {Model.Namespace}");
                WriteLine("{");
                PushIndent();
            }
#>
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[global::System.CodeDom.Compiler.GeneratedCodeAttribute("<#= CurrentAssemblyName.Name #>", "<#= Append($"{CurrentAssemblyName.Version}") #>")]
<#= Model.IsPublic ? "public" : "internal" #> static partial class <#= Model.Name #>EnumInfo
{
<#
            WriteExtensionsBlock();
            WriteFactoryBlock();
#>
}
<#
            if (!string.IsNullOrEmpty(Model.Namespace))
            {
                PopIndent();
                WriteLine("}");
            }
#>
<#+
    public EnumInfoWriter(StringBuilder builder) : base(builder)
    {
    }

    public override string GetFileName() => $"{Model.Namespace ?? "_"}.{Model.Name}EnumInfo.g.cs";

    protected override bool CanGenerateFor(EnumToGenerate model) =>
        model.SelectedGenerators != 0;
#>
