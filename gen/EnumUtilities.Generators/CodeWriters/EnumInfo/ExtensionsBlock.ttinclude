<#+
    private void WriteExtensionsBlock()
    {
        if (HasMainGenerator && Model.HasSerializationValue)
        {
#>

    /// <summary>Provides support for formatting <see cref="<#= Model.Name #>"/> serialized values.</summary>
    internal sealed partial class SerializationStringFormatter : IEnum<#= Model.IsFlags ? "Flags" : "" #>Formatter<<#= Model.UnderlyingType #>>
    {
        /// <summary>Gets the singleton instance of the <see cref="SerializationStringFormatter"/> class.</summary>
        public static SerializationStringFormatter Instance = new SerializationStringFormatter();

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public int GetStringLengthForNumber(<#= Model.UnderlyingType #> value) => EnumNumericFormatter.GetStringLength(value);

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string GetStringForNumber(<#= Model.UnderlyingType #> value) => value.ToString();
<#+
            if (Model.IsFlags)
            {
#>

        /// <inheritdoc />
        public int? TryGetStringLengthForMember(<#= Model.UnderlyingType #> value)
        {
            if (value == 0)
            {
                return <#=
                        Model.Values.FirstOrDefault(x => x.MemberValue == "0")?.ResolvedSerializedValue.Length ?? 1 #>;
            }

            int count = 0, foundItemsCount = 0;
<#+
                foreach (
                    var curr in
                        Model.UniqueValues.OrderByDescending(x => x.RealMemberValue).Where(x => x.MemberValue != "0"))
                {
#>
            if ((value & <#= curr.MemberValue #>) == <#= curr.MemberValue #>)
            {
                value -= <#= curr.MemberValue #>;
                count = checked(count + <#= curr.ResolvedSerializedValue.Length #>);
                foundItemsCount++;
            }
<#+
                }
#>

            if (value != 0)
            {
                return null;
            }

            const int separatorStringLength = 2;
            return checked(count + (separatorStringLength * (foundItemsCount - 1)));
        }

        /// <inheritdoc />
        public string? TryGetStringForMember(<#= Model.UnderlyingType #> value)
        {
            if (value == 0)
            {
                return "<#=
                        Model.Values.FirstOrDefault(x => x.MemberValue == "0")?.ResolvedSerializedValue ?? "0" #>";
            }

            Span<<#= Model.UnderlyingType #>> foundItems = stackalloc <#= Model.UnderlyingType #>[<#= GetMappedBitCount() #>];
            int count = 0, foundItemsCount = 0;
<#+
                foreach (
                    var curr in
                        Model.UniqueValues.OrderByDescending(x => x.RealMemberValue).Where(x => x.MemberValue != "0"))
                {
#>
            if ((value & <#= curr.MemberValue #>) == <#= curr.MemberValue #>)
            {
                value -= <#= curr.MemberValue #>;
                count = checked(count + <#= curr.ResolvedSerializedValue.Length #>);
                foundItems[foundItemsCount++] = <#= curr.MemberValue #>;
            }
<#+
                }
#>

            if (value != 0)
            {
                return null;
            }

            if (foundItemsCount == 1)
            {
                return GetStringForSingleMember(foundItems[0]);
            }

            return EnumStringFormatter.WriteMultipleFoundFlagsNames(this, count, foundItemsCount, foundItems);
        }

        public string GetStringForSingleMember(<#= Model.UnderlyingType #> value)
        {
            return value switch
            {
<#+
                foreach (var curr in Model.UniqueValues)
                {
#>
                <#= curr.MemberValue #> => "<#= curr.ResolvedSerializedValue #>",
<#+
                }
#>
                _ => throw new ArgumentOutOfRangeException()
            };
        }
<#+
            }
            else
            {
#>

        /// <inheritdoc />
        public int? TryGetStringLengthForMember(<#= Model.UnderlyingType #> value)
        {
            return value switch
            {
<#+
                foreach (var curr in Model.UniqueValues)
                {
#>
                <#= curr.MemberValue #> => <#= curr.ResolvedSerializedValue.Length #>,
<#+
                }
#>
                _ => null
            };
        }

        /// <inheritdoc />
        public string? TryGetStringForMember(<#= Model.UnderlyingType #> value)
        {
            return value switch
            {
<#+
                foreach (var curr in Model.UniqueValues)
                {
#>
                <#= curr.MemberValue #> => "<#= curr.ResolvedSerializedValue #>",
<#+
                }
#>
                _ => null
            };
        }
<#+
            }
#>
    }
<#+
        }
    }

    private int GetBitCount() => Model.UnderlyingType switch {
        "byte" => 8,
        "sbyte" => 8,
        "short" => 16,
        "ushort" => 16,
        "int" => 32,
        "uint" => 32,
        "long" => 64,
        "ulong" => 64,
        _ => 64,
        };

    private int GetMappedBitCount()
    {
        if (Model.Values.Any(x => x.MemberValue[0] == '-'))
            return GetBitCount();

        return GetBitCount() -
               (BitOperations.LeadingZeroCount(Model.Values.Select(x => x.RealMemberValue).Max()) -
                (64 - GetBitCount()));
    }
#>
