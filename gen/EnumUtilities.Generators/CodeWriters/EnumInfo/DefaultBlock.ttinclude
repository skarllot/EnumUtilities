<#+
    private static readonly Encoding _utf8Encoding = Encoding.UTF8;

    private void WriteDefaultBlock()
    {
        if ((Model.SelectedGenerators & SelectedGenerators.MainGenerator) != SelectedGenerators.MainGenerator)
            return;
#>
    /// <summary>Provides constant values for <see cref="<#= Model.Name #>" /> members names.</summary>
    public static partial class Name
    {
        /// <summary>Represents the largest possible number of characters produced by converting an <see cref="<#= Model.Name #>" /> value to string, based on defined members. This field is constant.</summary>
        public const int MaxCharsLength = <#= Model.Values.Max(x => x.MemberName.Length) #>;
<#+
        foreach (var curr in Model.Values)
        {
#>

        /// <summary>The string representation of <see cref="<#= Model.Name #>.<#= curr.MemberName #>" /> name.</summary>
        public const string <#= curr.MemberName #> = "<#= curr.MemberName #>";
<#+
        }
#>
    }

    /// <summary>Provides static values for <see cref="<#= Model.Name #>" /> UTF-8 encoded members names.</summary>
    public static partial class Utf8Name
    {
        /// <summary>Represents the largest possible number of bytes produced by converting an <see cref="<#= Model.Name #>" /> value to UTF-8 string, based on defined members. This field is constant.</summary>
        public const int MaxBytesLength = <#= Model.Values.Max(x => _utf8Encoding.GetByteCount(x.MemberName)) #>;
<#+
        foreach (var curr in Model.Values)
        {
#>

        /// <summary>The UTF-8 representation of <see cref="<#= Model.Name #>.<#= curr.MemberName #>" /> name.</summary>
        public static ReadOnlySpan<byte> <#= curr.MemberName #> => new byte[<#= _utf8Encoding.GetByteCount(curr.MemberName) #>] { <#= _utf8Encoding.GetBytes(curr.MemberName).JoinToString() #> };
<#+
        }
#>
    }
<#+
        WriteLine();
    }
#>
