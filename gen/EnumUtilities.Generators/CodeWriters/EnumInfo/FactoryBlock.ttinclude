<#+
    private void WriteFactoryBlock()
    {
        bool enableDescription = HasMainGenerator && Model.HasDescription;
#>

    /// <summary>Provides support for parsing <see cref="<#= Model.Name #>"/> values.</summary>
    internal sealed partial class StringParser
        : IEnumParser<<#= Model.UnderlyingType #>><#=
                enableDescription ? Append($", IEnumDescriptionParser<{Model.UnderlyingType}>") : new None() #>
    {
        /// <summary>Gets the singleton instance of the <see cref="StringParser"/> class.</summary>
        public static StringParser Instance = new StringParser();

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#= Model.UnderlyingType #> BitwiseOr(<#= Model.UnderlyingType #> value1, <#= Model.UnderlyingType #> value2) => unchecked((<#= Model.UnderlyingType #>)(value1 | value2));

        /// <inheritdoc />
        public bool TryParseNumber(ReadOnlySpan<char> value, out <#= Model.UnderlyingType #> result) => EnumNumericParser.TryParse(value, out result);

        /// <inheritdoc />
        public bool TryParseSingleName(ReadOnlySpan<char> value, StringComparison comparisonType, out <#= Model.UnderlyingType #> result)
        {
            if (value.IsEmpty)
            {
                result = 0;
                return false;
            }

<#+
        var lookupTable = Model.Values.ToLookup(x => x.MemberName[0]);
#>
            switch (value[0])
            {
<#+
        foreach (var curr in lookupTable)
        {
            if (char.ToUpperInvariant(curr.Key) == curr.Key && char.ToLowerInvariant(curr.Key) == curr.Key)
            {
#>
                case '<#= curr.Key #>':
<#+
            }
            else
            {
#>
                case '<#= char.ToUpperInvariant(curr.Key) #>':
                case '<#= char.ToLowerInvariant(curr.Key) #>':
<#+
            }
#>
                    switch (value)
                    {
<#+
            foreach (var enumValue in curr)
            {
#>
                        case { } when value.Equals("<#= enumValue.MemberName #>", comparisonType):
                            result = <#= enumValue.MemberValue #>;
                            return true;
<#+
            }
#>
                    }
                    goto default;
<#+
        }
#>
                default:
                    result = 0;
                    return false;
            }
        }
<#+
        if (enableDescription)
        {
#>

        /// <inheritdoc />
        public bool TryParseDescription(ReadOnlySpan<char> value, StringComparison comparisonType, out <#= Model.UnderlyingType #> result)
        {
<#+
            if (Model.Values.All(x => x.Description == null))
            {
#>
            result = default;
            return false;
<#+
            }
            else
            {
#>
            switch (value)
            {
<#+
                foreach (var curr in Model.Values.Where(x => x.Description != null))
                {
#>
                case { } s when s.Equals("<#= curr.Description #>", comparisonType):
                    result = <#= curr.MemberValue #>;
                    return true;
<#+
                }
#>
                default:
                    result = default;
                    return false;
            }
<#+
            }
#>
        }
<#+
        }
#>
    }
<#+
        if (HasMainGenerator && Model.HasSerializationValue)
        {
#>

    /// <summary>Provides support for parsing serialized <see cref="<#= Model.Name #>"/> values.</summary>
    internal sealed partial class SerializationStringParser : IEnumParser<<#= Model.UnderlyingType #>>
    {
        /// <summary>Gets the singleton instance of the <see cref="StringParser"/> class.</summary>
        public static SerializationStringParser Instance = new SerializationStringParser();

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#= Model.UnderlyingType #> BitwiseOr(<#= Model.UnderlyingType #> value1, <#= Model.UnderlyingType #> value2) => unchecked((<#= Model.UnderlyingType #>)(value1 | value2));

        /// <inheritdoc />
        public bool TryParseNumber(ReadOnlySpan<char> value, out <#= Model.UnderlyingType #> result) => EnumNumericParser.TryParse(value, out result);

        /// <inheritdoc />
        public bool TryParseSingleName(ReadOnlySpan<char> value, StringComparison comparisonType, out <#= Model.UnderlyingType #> result)
        {
            if (value.IsEmpty)
            {
<#+
        var binEmptyValue = Model.Values.FirstOrDefault(x => x.ResolvedSerializedValue.Length == 0);
        if (binEmptyValue != null)
        {
#>
                result = <#= binEmptyValue.MemberValue #>;
                return true;
<#+
        }
        else
        {
#>
                result = 0;
                return false;
<#+
        }
#>
            }

<#+
        var binLookupTable = Model.Values.ToLookup(x => x.ResolvedSerializedValue[0]);
#>
            switch (value[0])
            {
<#+
        foreach (var curr in binLookupTable)
        {
            if (char.ToUpperInvariant(curr.Key) == curr.Key && char.ToLowerInvariant(curr.Key) == curr.Key)
            {
#>
                case '<#= curr.Key #>':
<#+
            }
            else
            {
#>
                case '<#= char.ToUpperInvariant(curr.Key) #>':
                case '<#= char.ToLowerInvariant(curr.Key) #>':
<#+
            }
#>
                    switch (value)
                    {
<#+
            foreach (var enumValue in curr)
            {
#>
                        case { } when value.Equals("<#= enumValue.ResolvedSerializedValue #>", comparisonType):
                            result = <#= enumValue.MemberValue #>;
                            return true;
<#+
            }
#>
                    }
                    goto default;
<#+
        }
#>
                default:
                    result = 0;
                    return false;
            }
        }
    }
<#+
        }
    }
#>
