<#+
    private void WriteDescriptionBlock()
    {
        if (!Model.HasDescription)
            return;
#>

    public static <#= Model.RefName #> CreateFromDescription(string description, StringComparison comparisonType = StringComparison.Ordinal)
    {
        if (description is null) ThrowHelper.ThrowArgumentNullException(nameof(description));
        TryParseDescription(description.AsSpan(), comparisonType, throwOnFailure: true, out var result);
        return (<#= Model.RefName #>)result;
    }

    public static <#= Model.RefName #> CreateFromDescription(ReadOnlySpan<char> description, StringComparison comparisonType = StringComparison.Ordinal)
    {
        TryParseDescription(description, comparisonType, throwOnFailure: true, out var result);
        return (<#= Model.RefName #>)result;
    }

    [return: NotNullIfNotNull("description")]
    public static <#= Model.RefName #>? CreateFromDescriptionOrNull(string? description, StringComparison comparisonType = StringComparison.Ordinal)
    {
        if (description is null) return null;
        TryParseDescription(description.AsSpan(), comparisonType, throwOnFailure: true, out var result);
        return (<#= Model.RefName #>)result;
    }

    public static bool TryCreateFromDescription([NotNullWhen(true)] string? description, StringComparison comparisonType, out <#= Model.RefName #> result)
    {
        Unsafe.SkipInit(out result);
        return TryParseDescription(description.AsSpan(), comparisonType, throwOnFailure: false, out Unsafe.As<<#= Model.RefName #>, <#= Model.UnderlyingType #>>(ref result));
    }

    public static bool TryCreateFromDescription([NotNullWhen(true)] string? description, out <#= Model.RefName #> result)
    {
        Unsafe.SkipInit(out result);
        return TryParseDescription(description.AsSpan(), StringComparison.Ordinal, throwOnFailure: false, out Unsafe.As<<#= Model.RefName #>, <#= Model.UnderlyingType #>>(ref result));
    }

    public static <#= Model.RefName #>? TryCreateFromDescription(string? description, StringComparison comparisonType = StringComparison.Ordinal)
    {
        return TryParseDescription(description.AsSpan(), comparisonType, throwOnFailure: false, out var result) ? (<#= Model.RefName #>?)result : null;
    }

    public static bool TryCreateFromDescription(ReadOnlySpan<char> description, StringComparison comparisonType, out <#= Model.RefName #> result)
    {
        Unsafe.SkipInit(out result);
        return TryParseDescription(description, comparisonType, throwOnFailure: false, out Unsafe.As<<#= Model.RefName #>, <#= Model.UnderlyingType #>>(ref result));
    }

    public static bool TryCreateFromDescription(ReadOnlySpan<char> description, out <#= Model.RefName #> result)
    {
        Unsafe.SkipInit(out result);
        return TryParseDescription(description, StringComparison.Ordinal, throwOnFailure: false, out Unsafe.As<<#= Model.RefName #>, <#= Model.UnderlyingType #>>(ref result));
    }

    public static <#= Model.RefName #>? TryCreateFromDescription(ReadOnlySpan<char> description, StringComparison comparisonType = StringComparison.Ordinal)
    {
        return TryParseDescription(description, comparisonType, throwOnFailure: false, out var result) ? (<#= Model.RefName #>?)result : null;
    }

<#+
        WriteTryParse(x => x.Description, "Description", "description", allowNumbers: false);
    }
#>
