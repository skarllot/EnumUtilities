<#+
    private void WriteEnumMemberBlock()
    {
        if (!Model.HasSerializationValue)
            return;
#>

    /// <summary>
    /// Converts the string representation of the serialized value to an equivalent enumerated object.
    /// </summary>
    /// <param name="value">The string representation of the enumeration serialized value to convert.</param>
    /// <param name="ignoreCase"><see langword="true"/> to ignore case; <see langword="false"/> to regard case.</param>
    /// <returns>The value represented by the specified serialized value. Note that this value need not be a member of the <#= Model.Name #> enumeration.</returns>
    /// <exception cref="ArgumentNullException"><paramref name="value"/> is <see langword="null"/>.</exception>
    /// <exception cref="ArgumentException"><paramref name="value"/> is empty or does not represent a valid value.</exception>
    public static <#= Model.RefName #> ParseFromEnumMemberValue(string value, bool ignoreCase = false)
    {
        if (value is null) ThrowHelper.ThrowArgumentNullException(nameof(value));
        TryParseFromEnumMemberValue(value.AsSpan(), ignoreCase, throwOnFailure: true, out var result);
        return result;
    }

    /// <summary>
    /// Converts the string representation of the serialized value to an equivalent enumerated object.
    /// </summary>
    /// <param name="value">The string representation of the enumeration serialized value to convert.</param>
    /// <param name="ignoreCase"><see langword="true"/> to ignore case; <see langword="false"/> to regard case.</param>
    /// <returns>The value represented by the specified serialized value. Note that this value need not be a member of the <#= Model.Name #> enumeration.</returns>
    /// <exception cref="ArgumentException"><paramref name="value"/> is empty or does not represent a valid value.</exception>
    public static <#= Model.RefName #> ParseFromEnumMemberValue(ReadOnlySpan<char> value, bool ignoreCase = false)
    {
        TryParseFromEnumMemberValue(value, ignoreCase, throwOnFailure: true, out var result);
        return result;
    }

    /// <summary>
    /// Converts the string representation of the serialized value to an equivalent enumerated object.
    /// </summary>
    /// <param name="value">The string representation of the enumeration serialized value to convert.</param>
    /// <param name="ignoreCase"><see langword="true"/> to ignore case; <see langword="false"/> to regard case.</param>
    /// <returns>The value represented by the specified serialized value or null. Note that this value need not be a member of the <#= Model.Name #> enumeration.</returns>
    /// <exception cref="ArgumentException"><paramref name="value"/> is empty or does not represent a valid value.</exception>
    [return: NotNullIfNotNull("value")]
    public static <#= Model.RefName #>? ParseFromEnumMemberValueOrNull(string? value, bool ignoreCase = false)
    {
        if (value is null) return null;
        TryParseFromEnumMemberValue(value.AsSpan(), ignoreCase, throwOnFailure: true, out var result);
        return result;
    }

    /// <summary>
    /// Converts the string representation of the serialized value to an equivalent enumerated object.
    /// The return value indicates whether the conversion succeeded.
    /// </summary>
    /// <param name="value">The value as defined with <see cref="System.Runtime.Serialization.EnumMemberAttribute"/>.</param>
    /// <param name="ignoreCase"><see langword="true"/> to ignore case; <see langword="false"/> to regard case.</param>
    /// <param name="result">
    /// When this method returns, result contains an object of type <#= Model.Name #> whose value is represented by a
    /// serialized value if the parse operation succeeds. If the parse operation fails, result contains the default
    /// value of the underlying type of <#= Model.Name #>. Note that this value need not be a member of the <#= Model.Name #> enumeration.
    /// </param>
    /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
    public static bool TryParseFromEnumMemberValue([NotNullWhen(true)] string? value, bool ignoreCase, out <#= Model.RefName #> result)
    {
        return TryParseFromEnumMemberValue(value.AsSpan(), ignoreCase, throwOnFailure: false, out result);
    }

    /// <summary>
    /// Converts the string representation of the serialized value to an equivalent enumerated object.
    /// The return value indicates whether the conversion succeeded.
    /// </summary>
    /// <param name="value">The value as defined with <see cref="System.Runtime.Serialization.EnumMemberAttribute"/>.</param>
    /// <param name="result">
    /// When this method returns, result contains an object of type <#= Model.Name #> whose value is represented by a
    /// serialized value if the parse operation succeeds. If the parse operation fails, result contains the default
    /// value of the underlying type of <#= Model.Name #>. Note that this value need not be a member of the <#= Model.Name #> enumeration.
    /// </param>
    /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
    public static bool TryParseFromEnumMemberValue([NotNullWhen(true)] string? value, out <#= Model.RefName #> result)
    {
        return TryParseFromEnumMemberValue(value.AsSpan(), ignoreCase: false, throwOnFailure: false, out result);
    }

    /// <summary>
    /// Converts the string representation of the serialized value to an equivalent enumerated object.
    /// </summary>
    /// <param name="value">The value as defined with <see cref="System.Runtime.Serialization.EnumMemberAttribute"/>.</param>
    /// <param name="ignoreCase"><see langword="true"/> to ignore case; <see langword="false"/> to regard case.</param>
    /// <returns>
    /// Contains an object of type <#= Model.Name #> whose value is represented by value if the parse operation succeeds.
    /// If the parse operation fails, result contains a null value.
    /// </returns>
    public static <#= Model.RefName #>? TryParseFromEnumMemberValue(string? value, bool ignoreCase = false)
    {
        return TryParseFromEnumMemberValue(value.AsSpan(), ignoreCase, throwOnFailure: false, out <#= Model.RefName #> result) ? result : null;
    }

    /// <summary>
    /// Converts the string representation of the serialized value to an equivalent enumerated object.
    /// The return value indicates whether the conversion succeeded.
    /// </summary>
    /// <param name="value">The value as defined with <see cref="System.Runtime.Serialization.EnumMemberAttribute"/>.</param>
    /// <param name="ignoreCase"><see langword="true"/> to ignore case; <see langword="false"/> to regard case.</param>
    /// <param name="result">
    /// When this method returns, result contains an object of type <#= Model.Name #> whose value is represented by a
    /// serialized value if the parse operation succeeds. If the parse operation fails, result contains the default
    /// value of the underlying type of <#= Model.Name #>. Note that this value need not be a member of the <#= Model.Name #> enumeration.
    /// </param>
    /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
    public static bool TryParseFromEnumMemberValue(ReadOnlySpan<char> value, bool ignoreCase, out <#= Model.RefName #> result)
    {
        return TryParseFromEnumMemberValue(value, ignoreCase, throwOnFailure: false, out result);
    }

    /// <summary>
    /// Converts the string representation of the serialized value to an equivalent enumerated object.
    /// The return value indicates whether the conversion succeeded.
    /// </summary>
    /// <param name="value">The value as defined with <see cref="System.Runtime.Serialization.EnumMemberAttribute"/>.</param>
    /// <param name="result">
    /// When this method returns, result contains an object of type <#= Model.Name #> whose value is represented by a
    /// serialized value if the parse operation succeeds. If the parse operation fails, result contains the default
    /// value of the underlying type of <#= Model.Name #>. Note that this value need not be a member of the <#= Model.Name #> enumeration.
    /// </param>
    /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
    public static bool TryParseFromEnumMemberValue(ReadOnlySpan<char> value, out <#= Model.RefName #> result)
    {
        return TryParseFromEnumMemberValue(value, ignoreCase: false, throwOnFailure: false, out result);
    }

    /// <summary>
    /// Converts the string representation of the serialized value to an equivalent enumerated object.
    /// </summary>
    /// <param name="value">The value as defined with <see cref="System.Runtime.Serialization.EnumMemberAttribute"/>.</param>
    /// <param name="ignoreCase"><see langword="true"/> to ignore case; <see langword="false"/> to regard case.</param>
    /// <returns>
    /// Contains an object of type <#= Model.Name #> whose value is represented by value if the parse operation succeeds.
    /// If the parse operation fails, result contains a null value.
    /// </returns>
    public static <#= Model.RefName #>? TryParseFromEnumMemberValue(ReadOnlySpan<char> value, bool ignoreCase = false)
    {
        return TryParseFromEnumMemberValue(value, ignoreCase, throwOnFailure: false, out <#= Model.RefName #> result) ? result : null;
    }

    private static bool TryParseFromEnumMemberValue(ReadOnlySpan<char> value, bool ignoreCase, bool throwOnFailure, out <#= Model.RefName #> result)
    {
        return TryParseFromEnumMemberValue(value, ignoreCase ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal, throwOnFailure, out result);
    }

    private static bool TryParseFromEnumMemberValue(ReadOnlySpan<char> value, StringComparison comparisonType, bool throwOnFailure, out <#= Model.RefName #> result)
    {
        bool success = EnumStringParser.TryParse<#= Model.IsFlags ? "WithFlags" : "" #>(value, TryParseSingleEnumMemberValue, comparisonType, throwOnFailure, out <#= Model.UnderlyingType #> number);
        if (!success)
        {
            result = 0;
            return false;
        }

        result = (<#= Model.RefName #>)number;
        return true;
    }

<#+
        WriteTryParseLookup(x => x.ResolvedSerializedValue, "EnumMemberValue");
#>

    /// <summary>
    /// Converts the string representation of the serialized value to an equivalent enumerated object.
    /// The return value indicates whether the conversion succeeded.
    /// </summary>
    /// <param name="value">The value as defined with <see cref="System.Runtime.Serialization.EnumMemberAttribute"/>.</param>
    /// <param name="comparisonType">One of the enumeration values that specifies how the strings will be compared.</param>
    /// <param name="result">
    /// When this method returns, result contains an object of type <#= Model.Name #> whose value is represented by value
    /// if the parse operation succeeds. If the parse operation fails, result contains the default value of the
    /// underlying type of <#= Model.Name #>. Note that this value need not be a member of the <#= Model.Name #> enumeration.
    /// </param>
    /// <returns><c>true</c> if the value parameter was converted successfully; otherwise, <c>false</c>.</returns>
    /// <exception cref="ArgumentException"><paramref name="comparisonType"/> is not a <see cref="StringComparison"/> value.</exception>
    [Obsolete("Use TryParseFromEnumMemberValue overload with 'ignoreCase' parameter")]
    public static bool TryParseFromEnumMemberValue(
        [NotNullWhen(true)] string? value,
        StringComparison comparisonType,
        out <#= Model.RefName #> result)
    {
        return TryParseFromEnumMemberValue(value.AsSpan(), comparisonType, throwOnFailure: false, out result);
    }

    /// <summary>
    /// Converts the string representation of the value associated with one enumerated constant to
    /// an equivalent enumerated object.
    /// </summary>
    /// <param name="value">The value as defined with <see cref="System.Runtime.Serialization.EnumMemberAttribute"/>.</param>
    /// <param name="comparisonType">One of the enumeration values that specifies how the strings will be compared.</param>
    /// <returns>
    /// Contains an object of type <#= Model.Name #> whose value is represented by value if the parse operation succeeds.
    /// If the parse operation fails, result contains a null value.
    /// </returns>
    /// <exception cref="ArgumentException"><paramref name="comparisonType"/> is not a <see cref="StringComparison"/> value.</exception>
    [Obsolete("Use TryParseFromEnumMemberValue overload with 'ignoreCase' parameter")]
    public static <#= Model.RefName #>? TryParseFromEnumMemberValue(string? value, StringComparison comparisonType)
    {
        return TryParseFromEnumMemberValue(value.AsSpan(), comparisonType, throwOnFailure: false, out <#= Model.RefName #> result) ? result : null;
    }
<#+
    }
#>
